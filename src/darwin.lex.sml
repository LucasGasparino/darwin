structure DarwinLexer  = struct

    datatype yystart_state = 
INITIAL
    structure UserDeclarations = 
      struct

 
    structure T = DarwinTokens
    type lex_result = T.token
    fun eof() = T.EOF


      end

    local
    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of ULexBuffer.stream * action * yymatch
    withtype action = ULexBuffer.stream * yymatch -> UserDeclarations.lex_result

    val yytable : ((UTF8.wchar * UTF8.wchar * int) list * int list) Vector.vector = 
#[([(0w0,0w8,1),
(0w11,0w31,1),
(0w35,0w37,1),
(0w39,0w39,1),
(0w58,0w58,1),
(0w63,0w64,1),
(0w91,0w96,1),
(0w125,0w2147483647,1),
(0w9,0w10,2),
(0w32,0w32,2),
(0w33,0w33,3),
(0w34,0w34,4),
(0w38,0w38,5),
(0w40,0w40,6),
(0w41,0w41,7),
(0w42,0w42,8),
(0w43,0w43,9),
(0w44,0w44,10),
(0w45,0w45,11),
(0w46,0w46,12),
(0w47,0w47,13),
(0w48,0w57,14),
(0w59,0w59,15),
(0w60,0w60,16),
(0w61,0w61,17),
(0w62,0w62,18),
(0w65,0w90,19),
(0w97,0w97,19),
(0w100,0w100,19),
(0w103,0w104,19),
(0w106,0w107,19),
(0w109,0w111,19),
(0w113,0w114,19),
(0w117,0w117,19),
(0w119,0w122,19),
(0w98,0w98,20),
(0w99,0w99,21),
(0w101,0w101,22),
(0w102,0w102,23),
(0w105,0w105,24),
(0w108,0w108,25),
(0w112,0w112,26),
(0w115,0w115,27),
(0w116,0w116,28),
(0w118,0w118,29),
(0w123,0w123,30),
(0w124,0w124,31)], []), ([], [36]), ([], [34, 36]), ([(0w61,0w61,496)], [27, 36]), ([(0w65,0w90,494),
(0w97,0w122,494)], [36]), ([(0w38,0w38,493)], [36]), ([(0w34,0w34,333),
(0w48,0w57,334),
(0w102,0w102,335),
(0w116,0w116,336)], [22, 36]), ([], [23, 36]), ([], [20, 36]), ([], [18, 36]), ([], [33, 36]), ([], [19, 36]), ([], [24, 36]), ([], [21, 36]), ([(0w34,0w34,327),
(0w46,0w46,327),
(0w48,0w57,328)], [10, 36]), ([], [17, 36]), ([(0w61,0w61,326)], [36]), ([(0w61,0w61,325)], [15, 36]), ([(0w61,0w61,324)], [36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w110,44),
(0w112,0w122,44),
(0w111,0w111,319)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w110,44),
(0w112,0w122,44),
(0w111,0w111,312)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w109,44),
(0w111,0w122,44),
(0w110,0w110,300)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w98,0w107,44),
(0w109,0w122,44),
(0w97,0w97,295),
(0w108,0w108,296)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w109,44),
(0w111,0w122,44),
(0w110,0w110,294)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w122,44),
(0w101,0w101,292)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w113,44),
(0w115,0w122,44),
(0w114,0w114,288)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w98,0w115,44),
(0w117,0w122,44),
(0w97,0w97,253),
(0w116,0w116,254)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w104,44),
(0w106,0w113,44),
(0w115,0w116,44),
(0w118,0w122,44),
(0w101,0w101,53),
(0w105,0w105,54),
(0w114,0w114,55),
(0w117,0w117,56)], [8, 36]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w98,0w122,44),
(0w97,0w97,45)], [8, 36]), ([(0w48,0w57,33),
(0w125,0w125,34)], [36]), ([(0w124,0w124,32)], [36]), ([], [26]), ([(0w34,0w34,35),
(0w46,0w46,35),
(0w44,0w44,36),
(0w48,0w57,33),
(0w125,0w125,34)], []), ([], [14]), ([(0w48,0w57,38)], []), ([(0w48,0w57,37)], []), ([(0w44,0w44,36),
(0w48,0w57,37),
(0w125,0w125,34)], []), ([(0w44,0w44,39),
(0w48,0w57,40),
(0w69,0w69,41),
(0w101,0w101,41),
(0w125,0w125,34)], []), ([(0w48,0w57,43)], []), ([(0w44,0w44,39),
(0w48,0w57,40),
(0w125,0w125,34)], []), ([(0w48,0w57,42)], []), ([(0w44,0w44,39),
(0w48,0w57,42),
(0w125,0w125,34)], []), ([(0w34,0w34,35),
(0w46,0w46,35),
(0w48,0w57,43)], []), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w113,44),
(0w115,0w122,44),
(0w114,0w114,46)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w104,44),
(0w106,0w122,44),
(0w105,0w105,47)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w98,0w122,44),
(0w97,0w97,48)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w97,44),
(0w99,0w122,44),
(0w98,0w98,49)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w107,44),
(0w109,0w122,44),
(0w108,0w108,50)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w122,44),
(0w101,0w101,51)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w114,44),
(0w116,0w122,44),
(0w115,0w115,52)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [1, 8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w113,44),
(0w115,0w122,44),
(0w114,0w114,246)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w115,44),
(0w117,0w122,44),
(0w116,0w116,243)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w116,44),
(0w118,0w122,44),
(0w117,0w117,241)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w111,44),
(0w113,0w122,44),
(0w112,0w112,57)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w107,44),
(0w109,0w122,44),
(0w108,0w108,58)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w122,44),
(0w101,0w101,59)], [8]), ([(0w40,0w40,60),
(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [8]), ([(0w98,0w98,61),
(0w102,0w102,62),
(0w105,0w105,63),
(0w115,0w115,64)], []), ([(0w111,0w111,236)], []), ([(0w108,0w108,234)], []), ([(0w110,0w110,233)], []), ([(0w116,0w116,65)], []), ([(0w114,0w114,66)], []), ([(0w105,0w105,67)], []), ([(0w110,0w110,68)], []), ([(0w103,0w103,69)], []), ([(0w44,0w44,70)], []), ([(0w98,0w98,71),
(0w102,0w102,72),
(0w105,0w105,73),
(0w115,0w115,74)], []), ([(0w111,0w111,228)], []), ([(0w108,0w108,226)], []), ([(0w110,0w110,225)], []), ([(0w116,0w116,75)], []), ([(0w114,0w114,76)], []), ([(0w105,0w105,77)], []), ([(0w110,0w110,78)], []), ([(0w103,0w103,79)], []), ([(0w41,0w41,80),
(0w44,0w44,81)], []), ([], [7]), ([(0w98,0w98,82),
(0w102,0w102,83),
(0w105,0w105,84),
(0w115,0w115,85)], []), ([(0w111,0w111,220)], []), ([(0w108,0w108,218)], []), ([(0w110,0w110,217)], []), ([(0w116,0w116,86)], []), ([(0w114,0w114,87)], []), ([(0w105,0w105,88)], []), ([(0w110,0w110,89)], []), ([(0w103,0w103,90)], []), ([(0w41,0w41,80),
(0w44,0w44,91)], []), ([(0w98,0w98,92),
(0w102,0w102,93),
(0w105,0w105,94),
(0w115,0w115,95)], []), ([(0w111,0w111,212)], []), ([(0w108,0w108,210)], []), ([(0w110,0w110,209)], []), ([(0w116,0w116,96)], []), ([(0w114,0w114,97)], []), ([(0w105,0w105,98)], []), ([(0w110,0w110,99)], []), ([(0w103,0w103,100)], []), ([(0w41,0w41,80),
(0w44,0w44,101)], []), ([(0w98,0w98,102),
(0w102,0w102,103),
(0w105,0w105,104),
(0w115,0w115,105)], []), ([(0w111,0w111,204)], []), ([(0w108,0w108,202)], []), ([(0w110,0w110,201)], []), ([(0w116,0w116,106)], []), ([(0w114,0w114,107)], []), ([(0w105,0w105,108)], []), ([(0w110,0w110,109)], []), ([(0w103,0w103,110)], []), ([(0w41,0w41,80),
(0w44,0w44,111)], []), ([(0w98,0w98,112),
(0w102,0w102,113),
(0w105,0w105,114),
(0w115,0w115,115)], []), ([(0w111,0w111,196)], []), ([(0w108,0w108,194)], []), ([(0w110,0w110,193)], []), ([(0w116,0w116,116)], []), ([(0w114,0w114,117)], []), ([(0w105,0w105,118)], []), ([(0w110,0w110,119)], []), ([(0w103,0w103,120)], []), ([(0w41,0w41,80),
(0w44,0w44,121)], []), ([(0w98,0w98,122),
(0w102,0w102,123),
(0w105,0w105,124),
(0w115,0w115,125)], []), ([(0w111,0w111,188)], []), ([(0w108,0w108,186)], []), ([(0w110,0w110,185)], []), ([(0w116,0w116,126)], []), ([(0w114,0w114,127)], []), ([(0w105,0w105,128)], []), ([(0w110,0w110,129)], []), ([(0w103,0w103,130)], []), ([(0w41,0w41,80),
(0w44,0w44,131)], []), ([(0w98,0w98,132),
(0w102,0w102,133),
(0w105,0w105,134),
(0w115,0w115,135)], []), ([(0w111,0w111,180)], []), ([(0w108,0w108,178)], []), ([(0w110,0w110,177)], []), ([(0w116,0w116,136)], []), ([(0w114,0w114,137)], []), ([(0w105,0w105,138)], []), ([(0w110,0w110,139)], []), ([(0w103,0w103,140)], []), ([(0w41,0w41,80),
(0w44,0w44,141)], []), ([(0w98,0w98,142),
(0w102,0w102,143),
(0w105,0w105,144),
(0w115,0w115,145)], []), ([(0w111,0w111,172)], []), ([(0w108,0w108,170)], []), ([(0w110,0w110,169)], []), ([(0w116,0w116,146)], []), ([(0w114,0w114,147)], []), ([(0w105,0w105,148)], []), ([(0w110,0w110,149)], []), ([(0w103,0w103,150)], []), ([(0w41,0w41,80),
(0w44,0w44,151)], []), ([(0w98,0w98,152),
(0w102,0w102,153),
(0w105,0w105,154),
(0w115,0w115,155)], []), ([(0w111,0w111,164)], []), ([(0w108,0w108,162)], []), ([(0w110,0w110,161)], []), ([(0w116,0w116,156)], []), ([(0w114,0w114,157)], []), ([(0w105,0w105,158)], []), ([(0w110,0w110,159)], []), ([(0w103,0w103,160)], []), ([(0w41,0w41,80)], []), ([(0w116,0w116,160)], []), ([(0w111,0w111,163)], []), ([(0w97,0w97,161)], []), ([(0w111,0w111,165)], []), ([(0w108,0w108,166)], []), ([(0w101,0w101,167)], []), ([(0w97,0w97,168)], []), ([(0w110,0w110,160)], []), ([(0w116,0w116,150)], []), ([(0w111,0w111,171)], []), ([(0w97,0w97,169)], []), ([(0w111,0w111,173)], []), ([(0w108,0w108,174)], []), ([(0w101,0w101,175)], []), ([(0w97,0w97,176)], []), ([(0w110,0w110,150)], []), ([(0w116,0w116,140)], []), ([(0w111,0w111,179)], []), ([(0w97,0w97,177)], []), ([(0w111,0w111,181)], []), ([(0w108,0w108,182)], []), ([(0w101,0w101,183)], []), ([(0w97,0w97,184)], []), ([(0w110,0w110,140)], []), ([(0w116,0w116,130)], []), ([(0w111,0w111,187)], []), ([(0w97,0w97,185)], []), ([(0w111,0w111,189)], []), ([(0w108,0w108,190)], []), ([(0w101,0w101,191)], []), ([(0w97,0w97,192)], []), ([(0w110,0w110,130)], []), ([(0w116,0w116,120)], []), ([(0w111,0w111,195)], []), ([(0w97,0w97,193)], []), ([(0w111,0w111,197)], []), ([(0w108,0w108,198)], []), ([(0w101,0w101,199)], []), ([(0w97,0w97,200)], []), ([(0w110,0w110,120)], []), ([(0w116,0w116,110)], []), ([(0w111,0w111,203)], []), ([(0w97,0w97,201)], []), ([(0w111,0w111,205)], []), ([(0w108,0w108,206)], []), ([(0w101,0w101,207)], []), ([(0w97,0w97,208)], []), ([(0w110,0w110,110)], []), ([(0w116,0w116,100)], []), ([(0w111,0w111,211)], []), ([(0w97,0w97,209)], []), ([(0w111,0w111,213)], []), ([(0w108,0w108,214)], []), ([(0w101,0w101,215)], []), ([(0w97,0w97,216)], []), ([(0w110,0w110,100)], []), ([(0w116,0w116,90)], []), ([(0w111,0w111,219)], []), ([(0w97,0w97,217)], []), ([(0w111,0w111,221)], []), ([(0w108,0w108,222)], []), ([(0w101,0w101,223)], []), ([(0w97,0w97,224)], []), ([(0w110,0w110,90)], []), ([(0w116,0w116,79)], []), ([(0w111,0w111,227)], []), ([(0w97,0w97,225)], []), ([(0w111,0w111,229)], []), ([(0w108,0w108,230)], []), ([(0w101,0w101,231)], []), ([(0w97,0w97,232)], []), ([(0w110,0w110,79)], []), ([(0w116,0w116,69)], []), ([(0w111,0w111,235)], []), ([(0w97,0w97,233)], []), ([(0w111,0w111,237)], []), ([(0w108,0w108,238)], []), ([(0w101,0w101,239)], []), ([(0w97,0w97,240)], []), ([(0w110,0w110,69)], []), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w122,44),
(0w101,0w101,242)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [8, 12]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w107,44),
(0w109,0w122,44),
(0w108,0w108,244)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w122,44),
(0w101,0w101,245)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [2, 8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w108,44),
(0w110,0w122,44),
(0w109,0w109,247)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w104,44),
(0w106,0w122,44),
(0w105,0w105,248)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w109,44),
(0w111,0w122,44),
(0w110,0w110,249)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w98,0w122,44),
(0w97,0w97,250)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w115,44),
(0w117,0w122,44),
(0w116,0w116,251)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w122,44),
(0w101,0w101,252)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [8, 35]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w108,44),
(0w110,0w122,44),
(0w109,0w109,259)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w113,44),
(0w115,0w122,44),
(0w114,0w114,255)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w104,44),
(0w106,0w122,44),
(0w105,0w105,256)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w109,44),
(0w111,0w122,44),
(0w110,0w110,257)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w102,44),
(0w104,0w122,44),
(0w103,0w103,258)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [7, 8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w111,44),
(0w113,0w122,44),
(0w112,0w112,260)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w107,44),
(0w109,0w122,44),
(0w108,0w108,261)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w122,44),
(0w101,0w101,262)], [8]), ([(0w32,0w32,263),
(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [8]), ([(0w111,0w111,264)], []), ([(0w102,0w102,265)], []), ([(0w32,0w32,266)], []), ([(0w98,0w98,267),
(0w102,0w102,268),
(0w105,0w105,269),
(0w115,0w115,270),
(0w116,0w116,271)], []), ([(0w111,0w111,283)], []), ([(0w108,0w108,281)], []), ([(0w110,0w110,280)], []), ([(0w116,0w116,276)], []), ([(0w117,0w117,272)], []), ([(0w112,0w112,273)], []), ([(0w108,0w108,274)], []), ([(0w101,0w101,275)], []), ([(0w40,0w40,60)], []), ([(0w114,0w114,277)], []), ([(0w105,0w105,278)], []), ([(0w110,0w110,279)], []), ([(0w103,0w103,80)], []), ([(0w116,0w116,80)], []), ([(0w111,0w111,282)], []), ([(0w97,0w97,280)], []), ([(0w111,0w111,284)], []), ([(0w108,0w108,285)], []), ([(0w101,0w101,286)], []), ([(0w97,0w97,287)], []), ([(0w110,0w110,80)], []), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w104,44),
(0w106,0w122,44),
(0w105,0w105,289)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w109,44),
(0w111,0w122,44),
(0w110,0w110,290)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w115,44),
(0w117,0w122,44),
(0w116,0w116,291)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [4, 8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w115,44),
(0w117,0w122,44),
(0w116,0w116,293)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [0, 8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w115,44),
(0w117,0w122,44),
(0w116,0w116,258)], [6, 8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w107,44),
(0w109,0w122,44),
(0w108,0w108,299)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w110,44),
(0w112,0w122,44),
(0w111,0w111,297)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w98,0w122,44),
(0w97,0w97,298)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w115,44),
(0w117,0w122,44),
(0w116,0w116,258)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w114,44),
(0w116,0w122,44),
(0w115,0w115,241)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w99,44),
(0w101,0w122,44),
(0w100,0w100,301)], [8]), ([(0w32,0w32,302),
(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [8]), ([(0w118,0w118,303)], []), ([(0w97,0w97,304)], []), ([(0w114,0w114,305)], []), ([(0w105,0w105,306)], []), ([(0w97,0w97,307)], []), ([(0w98,0w98,308)], []), ([(0w108,0w108,309)], []), ([(0w101,0w101,310)], []), ([(0w115,0w115,311)], []), ([], [5]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w108,44),
(0w110,0w122,44),
(0w109,0w109,313)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w108,44),
(0w110,0w122,44),
(0w109,0w109,314)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w98,0w122,44),
(0w97,0w97,315)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w109,44),
(0w111,0w122,44),
(0w110,0w110,316)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w99,44),
(0w101,0w122,44),
(0w100,0w100,317)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w114,44),
(0w116,0w122,44),
(0w115,0w115,318)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w122,44)], [3, 8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w110,44),
(0w112,0w122,44),
(0w111,0w111,320)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w107,44),
(0w109,0w122,44),
(0w108,0w108,321)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w100,44),
(0w102,0w122,44),
(0w101,0w101,322)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w98,0w122,44),
(0w97,0w97,323)], [8]), ([(0w48,0w57,44),
(0w65,0w90,44),
(0w97,0w109,44),
(0w111,0w122,44),
(0w110,0w110,258)], [8]), ([], [28, 30]), ([], [16]), ([], [29, 31]), ([(0w48,0w57,329)], []), ([(0w34,0w34,327),
(0w46,0w46,327),
(0w48,0w57,328)], [10]), ([(0w48,0w57,330),
(0w69,0w69,331),
(0w101,0w101,331)], [11]), ([(0w48,0w57,330)], [11]), ([(0w48,0w57,332)], []), ([(0w48,0w57,332)], [11]), ([(0w65,0w90,492),
(0w97,0w122,492)], []), ([(0w34,0w34,487),
(0w46,0w46,487),
(0w44,0w44,340),
(0w48,0w57,334)], []), ([(0w97,0w97,485)], []), ([(0w114,0w114,337)], []), ([(0w117,0w117,338)], []), ([(0w101,0w101,339)], []), ([(0w44,0w44,340)], []), ([(0w34,0w34,341),
(0w48,0w57,342),
(0w102,0w102,343),
(0w116,0w116,344)], []), ([(0w65,0w90,484),
(0w97,0w122,484)], []), ([(0w34,0w34,479),
(0w46,0w46,479),
(0w41,0w41,348),
(0w44,0w44,349),
(0w48,0w57,342)], []), ([(0w97,0w97,477)], []), ([(0w114,0w114,345)], []), ([(0w117,0w117,346)], []), ([(0w101,0w101,347)], []), ([(0w41,0w41,348),
(0w44,0w44,349)], []), ([], [13]), ([(0w34,0w34,350),
(0w48,0w57,351),
(0w102,0w102,352),
(0w116,0w116,353)], []), ([(0w65,0w90,476),
(0w97,0w122,476)], []), ([(0w34,0w34,471),
(0w46,0w46,471),
(0w41,0w41,348),
(0w44,0w44,357),
(0w48,0w57,351)], []), ([(0w97,0w97,469)], []), ([(0w114,0w114,354)], []), ([(0w117,0w117,355)], []), ([(0w101,0w101,356)], []), ([(0w41,0w41,348),
(0w44,0w44,357)], []), ([(0w34,0w34,358),
(0w48,0w57,359),
(0w102,0w102,360),
(0w116,0w116,361)], []), ([(0w65,0w90,468),
(0w97,0w122,468)], []), ([(0w34,0w34,463),
(0w46,0w46,463),
(0w41,0w41,348),
(0w44,0w44,365),
(0w48,0w57,359)], []), ([(0w97,0w97,461)], []), ([(0w114,0w114,362)], []), ([(0w117,0w117,363)], []), ([(0w101,0w101,364)], []), ([(0w41,0w41,348),
(0w44,0w44,365)], []), ([(0w34,0w34,366),
(0w48,0w57,367),
(0w102,0w102,368),
(0w116,0w116,369)], []), ([(0w65,0w90,460),
(0w97,0w122,460)], []), ([(0w34,0w34,455),
(0w46,0w46,455),
(0w41,0w41,348),
(0w44,0w44,373),
(0w48,0w57,367)], []), ([(0w97,0w97,453)], []), ([(0w114,0w114,370)], []), ([(0w117,0w117,371)], []), ([(0w101,0w101,372)], []), ([(0w41,0w41,348),
(0w44,0w44,373)], []), ([(0w34,0w34,374),
(0w48,0w57,375),
(0w102,0w102,376),
(0w116,0w116,377)], []), ([(0w65,0w90,452),
(0w97,0w122,452)], []), ([(0w34,0w34,447),
(0w46,0w46,447),
(0w41,0w41,348),
(0w44,0w44,381),
(0w48,0w57,375)], []), ([(0w97,0w97,445)], []), ([(0w114,0w114,378)], []), ([(0w117,0w117,379)], []), ([(0w101,0w101,380)], []), ([(0w41,0w41,348),
(0w44,0w44,381)], []), ([(0w34,0w34,382),
(0w48,0w57,383),
(0w102,0w102,384),
(0w116,0w116,385)], []), ([(0w65,0w90,444),
(0w97,0w122,444)], []), ([(0w34,0w34,439),
(0w46,0w46,439),
(0w41,0w41,348),
(0w44,0w44,389),
(0w48,0w57,383)], []), ([(0w97,0w97,437)], []), ([(0w114,0w114,386)], []), ([(0w117,0w117,387)], []), ([(0w101,0w101,388)], []), ([(0w41,0w41,348),
(0w44,0w44,389)], []), ([(0w34,0w34,390),
(0w48,0w57,391),
(0w102,0w102,392),
(0w116,0w116,393)], []), ([(0w65,0w90,436),
(0w97,0w122,436)], []), ([(0w34,0w34,431),
(0w46,0w46,431),
(0w41,0w41,348),
(0w44,0w44,397),
(0w48,0w57,391)], []), ([(0w97,0w97,429)], []), ([(0w114,0w114,394)], []), ([(0w117,0w117,395)], []), ([(0w101,0w101,396)], []), ([(0w41,0w41,348),
(0w44,0w44,397)], []), ([(0w34,0w34,398),
(0w48,0w57,399),
(0w102,0w102,400),
(0w116,0w116,401)], []), ([(0w65,0w90,428),
(0w97,0w122,428)], []), ([(0w34,0w34,423),
(0w46,0w46,423),
(0w41,0w41,348),
(0w44,0w44,405),
(0w48,0w57,399)], []), ([(0w97,0w97,421)], []), ([(0w114,0w114,402)], []), ([(0w117,0w117,403)], []), ([(0w101,0w101,404)], []), ([(0w41,0w41,348),
(0w44,0w44,405)], []), ([(0w34,0w34,406),
(0w48,0w57,407),
(0w102,0w102,408),
(0w116,0w116,409)], []), ([(0w65,0w90,420),
(0w97,0w122,420)], []), ([(0w34,0w34,415),
(0w46,0w46,415),
(0w41,0w41,348),
(0w48,0w57,407)], []), ([(0w97,0w97,413)], []), ([(0w114,0w114,410)], []), ([(0w117,0w117,411)], []), ([(0w101,0w101,412)], []), ([(0w41,0w41,348)], []), ([(0w108,0w108,414)], []), ([(0w115,0w115,411)], []), ([(0w48,0w57,416)], []), ([(0w41,0w41,348),
(0w48,0w57,417),
(0w69,0w69,418),
(0w101,0w101,418)], []), ([(0w41,0w41,348),
(0w48,0w57,417)], []), ([(0w48,0w57,419)], []), ([(0w41,0w41,348),
(0w48,0w57,419)], []), ([(0w34,0w34,412),
(0w48,0w57,420),
(0w65,0w90,420),
(0w97,0w122,420)], []), ([(0w108,0w108,422)], []), ([(0w115,0w115,403)], []), ([(0w48,0w57,424)], []), ([(0w41,0w41,348),
(0w44,0w44,405),
(0w48,0w57,425),
(0w69,0w69,426),
(0w101,0w101,426)], []), ([(0w41,0w41,348),
(0w44,0w44,405),
(0w48,0w57,425)], []), ([(0w48,0w57,427)], []), ([(0w41,0w41,348),
(0w44,0w44,405),
(0w48,0w57,427)], []), ([(0w34,0w34,404),
(0w48,0w57,428),
(0w65,0w90,428),
(0w97,0w122,428)], []), ([(0w108,0w108,430)], []), ([(0w115,0w115,395)], []), ([(0w48,0w57,432)], []), ([(0w41,0w41,348),
(0w44,0w44,397),
(0w48,0w57,433),
(0w69,0w69,434),
(0w101,0w101,434)], []), ([(0w41,0w41,348),
(0w44,0w44,397),
(0w48,0w57,433)], []), ([(0w48,0w57,435)], []), ([(0w41,0w41,348),
(0w44,0w44,397),
(0w48,0w57,435)], []), ([(0w34,0w34,396),
(0w48,0w57,436),
(0w65,0w90,436),
(0w97,0w122,436)], []), ([(0w108,0w108,438)], []), ([(0w115,0w115,387)], []), ([(0w48,0w57,440)], []), ([(0w41,0w41,348),
(0w44,0w44,389),
(0w48,0w57,441),
(0w69,0w69,442),
(0w101,0w101,442)], []), ([(0w41,0w41,348),
(0w44,0w44,389),
(0w48,0w57,441)], []), ([(0w48,0w57,443)], []), ([(0w41,0w41,348),
(0w44,0w44,389),
(0w48,0w57,443)], []), ([(0w34,0w34,388),
(0w48,0w57,444),
(0w65,0w90,444),
(0w97,0w122,444)], []), ([(0w108,0w108,446)], []), ([(0w115,0w115,379)], []), ([(0w48,0w57,448)], []), ([(0w41,0w41,348),
(0w44,0w44,381),
(0w48,0w57,449),
(0w69,0w69,450),
(0w101,0w101,450)], []), ([(0w41,0w41,348),
(0w44,0w44,381),
(0w48,0w57,449)], []), ([(0w48,0w57,451)], []), ([(0w41,0w41,348),
(0w44,0w44,381),
(0w48,0w57,451)], []), ([(0w34,0w34,380),
(0w48,0w57,452),
(0w65,0w90,452),
(0w97,0w122,452)], []), ([(0w108,0w108,454)], []), ([(0w115,0w115,371)], []), ([(0w48,0w57,456)], []), ([(0w41,0w41,348),
(0w44,0w44,373),
(0w48,0w57,457),
(0w69,0w69,458),
(0w101,0w101,458)], []), ([(0w41,0w41,348),
(0w44,0w44,373),
(0w48,0w57,457)], []), ([(0w48,0w57,459)], []), ([(0w41,0w41,348),
(0w44,0w44,373),
(0w48,0w57,459)], []), ([(0w34,0w34,372),
(0w48,0w57,460),
(0w65,0w90,460),
(0w97,0w122,460)], []), ([(0w108,0w108,462)], []), ([(0w115,0w115,363)], []), ([(0w48,0w57,464)], []), ([(0w41,0w41,348),
(0w44,0w44,365),
(0w48,0w57,465),
(0w69,0w69,466),
(0w101,0w101,466)], []), ([(0w41,0w41,348),
(0w44,0w44,365),
(0w48,0w57,465)], []), ([(0w48,0w57,467)], []), ([(0w41,0w41,348),
(0w44,0w44,365),
(0w48,0w57,467)], []), ([(0w34,0w34,364),
(0w48,0w57,468),
(0w65,0w90,468),
(0w97,0w122,468)], []), ([(0w108,0w108,470)], []), ([(0w115,0w115,355)], []), ([(0w48,0w57,472)], []), ([(0w41,0w41,348),
(0w44,0w44,357),
(0w48,0w57,473),
(0w69,0w69,474),
(0w101,0w101,474)], []), ([(0w41,0w41,348),
(0w44,0w44,357),
(0w48,0w57,473)], []), ([(0w48,0w57,475)], []), ([(0w41,0w41,348),
(0w44,0w44,357),
(0w48,0w57,475)], []), ([(0w34,0w34,356),
(0w48,0w57,476),
(0w65,0w90,476),
(0w97,0w122,476)], []), ([(0w108,0w108,478)], []), ([(0w115,0w115,346)], []), ([(0w48,0w57,480)], []), ([(0w41,0w41,348),
(0w44,0w44,349),
(0w48,0w57,481),
(0w69,0w69,482),
(0w101,0w101,482)], []), ([(0w41,0w41,348),
(0w44,0w44,349),
(0w48,0w57,481)], []), ([(0w48,0w57,483)], []), ([(0w41,0w41,348),
(0w44,0w44,349),
(0w48,0w57,483)], []), ([(0w34,0w34,347),
(0w48,0w57,484),
(0w65,0w90,484),
(0w97,0w122,484)], []), ([(0w108,0w108,486)], []), ([(0w115,0w115,338)], []), ([(0w48,0w57,488)], []), ([(0w44,0w44,340),
(0w48,0w57,489),
(0w69,0w69,490),
(0w101,0w101,490)], []), ([(0w44,0w44,340),
(0w48,0w57,489)], []), ([(0w48,0w57,491)], []), ([(0w44,0w44,340),
(0w48,0w57,491)], []), ([(0w34,0w34,339),
(0w48,0w57,492),
(0w65,0w90,492),
(0w97,0w122,492)], []), ([], [25]), ([(0w34,0w34,495),
(0w48,0w57,494),
(0w65,0w90,494),
(0w97,0w122,494)], []), ([], [9]), ([], [32])]
    fun yystreamify' p input = ULexBuffer.mkStream (p, input)

    fun yystreamifyReader' p readFn strm = let
          val s = ref strm
	  fun iter(strm, n, accum) = 
	        if n > 1024 then (String.implode (rev accum), strm)
		else (case readFn strm
		       of NONE => (String.implode (rev accum), strm)
			| SOME(c, strm') => iter (strm', n+1, c::accum))
          fun input() = let
	        val (data, strm) = iter(!s, 0, [])
	        in
	          s := strm;
		  data
	        end
          in
            yystreamify' p input
          end

    fun yystreamifyInstream' p strm = yystreamify' p (fn ()=>TextIO.input strm)

    fun innerLex 
(yystrm_, yyss_, yysm) = let
        (* current start state *)
          val yyss = ref yyss_
	  fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
          val yystrm = ref yystrm_
	  fun yysetStrm strm = yystrm := strm
	  fun yygetPos() = ULexBuffer.getpos (!yystrm)
	  fun yystreamify input = yystreamify' (yygetPos()) input
	  fun yystreamifyReader readFn strm = yystreamifyReader' (yygetPos()) readFn strm
	  fun yystreamifyInstream strm = yystreamifyInstream' (yygetPos()) strm
        (* start position of token -- can be updated via skip() *)
	  val yystartPos = ref (yygetPos())
	(* get one char of input *)
	  fun yygetc strm = (case ULexBuffer.getu strm
                of (SOME (0w10, s')) => 
		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
		      SOME (0w10, s'))
		 | x => x)
          fun yygetList getc strm = let
            val get1 = UTF8.getu getc
            fun iter (strm, accum) = 
	        (case get1 strm
	          of NONE => rev accum
	           | SOME (w, strm') => iter (strm', w::accum)
	         (* end case *))
          in
            iter (strm, [])
          end
	(* create yytext *)
	  fun yymksubstr(strm) = ULexBuffer.subtract (strm, !yystrm)
	  fun yymktext(strm) = Substring.string (yymksubstr strm)
	  fun yymkunicode(strm) = yygetList Substring.getc (yymksubstr strm)
          open UserDeclarations
          fun lex () = let
            fun yystuck (yyNO_MATCH) = raise Fail "lexer reached a stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yygetPos()
	    fun yygetlineNo strm = AntlrStreamPos.lineNo yysm (ULexBuffer.getpos strm)
	    fun yygetcolNo  strm = AntlrStreamPos.colNo  yysm (ULexBuffer.getpos strm)
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    val yylastwasnref = ref (ULexBuffer.lastWasNL (!yystrm))
	    fun continue() = let val yylastwasn = !yylastwasnref in
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_let )
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_variables )
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_title )
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_comands )
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_Print )
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_endvars )
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_in )
fun yyAction7 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   print yytext; T.TIPO yytext 
      end
fun yyAction8 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.ID yytext 
      end
fun yyAction9 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.NUM (valOf (Int.fromString yytext)) 
      end
fun yyAction11 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.REAL (valOf (Real.fromString yytext)) 
      end
fun yyAction12 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.BOOL (valOf (Bool.fromString yytext)) 
      end
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  print yytext; T.STR yytext
      end
fun yyAction14 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  print yytext; T.STR yytext
      end
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EQ )
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EEQ )
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm;   T.SEMI)
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;   T.PLUS )
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;   T.MINUS )
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;   T.TIMES )
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DIV )
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LP )
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;   T.RP )
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOT )
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;   T.AND )
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;   T.OR )
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NOT )
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GEQ )
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LEQ )
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GT )
fun yyAction31 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LT )
fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NEQ )
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;   T.COMMA )
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;   continue() )
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;
        T.KW_terminate )
fun yyAction36 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print (concat ["Unexpected character: '", yytext,
			           "'\n"]); continue()
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36])
in
  if ULexBuffer.eof(!(yystrm))
    then let
      val yycolno = ref(yygetcolNo(!(yystrm)))
      val yylineno = ref(yygetlineNo(!(yystrm)))
      in
        (case (!(yyss))
         of _ => (UserDeclarations.eof())
        (* end case *))
      end
    else (case (!(yyss))
       of INITIAL => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
      (* end case *))
end
end
            and skip() = (yystartPos := yygetPos(); 
			  yylastwasnref := ULexBuffer.lastWasNL (!yystrm);
			  continue())
	    in (continue(), (!yystartPos, yygetPos()), !yystrm, !yyss) end
          in 
            lex()
          end
  in
    type pos = AntlrStreamPos.pos
    type span = AntlrStreamPos.span
    type tok = UserDeclarations.lex_result

    datatype prestrm = STRM of ULexBuffer.stream * 
		(yystart_state * tok * span * prestrm * yystart_state) option ref
    type strm = (prestrm * yystart_state)

    fun lex sm 
(STRM (yystrm, memo), ss) = (case !memo
	  of NONE => let
	     val (tok, span, yystrm', ss') = innerLex 
(yystrm, ss, sm)
	     val strm' = STRM (yystrm', ref NONE);
	     in 
	       memo := SOME (ss, tok, span, strm', ss');
	       (tok, span, (strm', ss'))
	     end
	   | SOME (ss', tok, span, strm', ss'') => 
	       if ss = ss' then
		 (tok, span, (strm', ss''))
	       else (
		 memo := NONE;
		 lex sm 
(STRM (yystrm, memo), ss))
         (* end case *))

    fun streamify input = (STRM (yystreamify' 0 input, ref NONE), INITIAL)
    fun streamifyReader readFn strm = (STRM (yystreamifyReader' 0 readFn strm, ref NONE), 
				       INITIAL)
    fun streamifyInstream strm = (STRM (yystreamifyInstream' 0 strm, ref NONE), 
				  INITIAL)

    fun getPos (STRM (strm, _), _) = ULexBuffer.getpos strm

  end
end
