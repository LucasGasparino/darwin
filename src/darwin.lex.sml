structure DarwinLexer  = struct

    datatype yystart_state = 
INITIAL
    structure UserDeclarations = 
      struct

 
    structure T = DarwinTokens
    type lex_result = T.token
    fun eof() = T.EOF


      end

    local
    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of ULexBuffer.stream * action * yymatch
    withtype action = ULexBuffer.stream * yymatch -> UserDeclarations.lex_result

    val yytable : ((UTF8.wchar * UTF8.wchar * int) list * int list) Vector.vector = 
#[([(0w0,0w8,1),
(0w11,0w31,1),
(0w35,0w37,1),
(0w39,0w39,1),
(0w58,0w58,1),
(0w63,0w64,1),
(0w91,0w96,1),
(0w125,0w2147483647,1),
(0w9,0w10,2),
(0w32,0w32,2),
(0w33,0w33,3),
(0w34,0w34,4),
(0w38,0w38,5),
(0w40,0w40,6),
(0w41,0w41,7),
(0w42,0w42,8),
(0w43,0w43,9),
(0w44,0w44,10),
(0w45,0w45,11),
(0w46,0w46,12),
(0w47,0w47,13),
(0w48,0w57,14),
(0w59,0w59,15),
(0w60,0w60,16),
(0w61,0w61,17),
(0w62,0w62,18),
(0w65,0w90,19),
(0w97,0w97,19),
(0w100,0w100,19),
(0w103,0w104,19),
(0w106,0w107,19),
(0w109,0w111,19),
(0w113,0w114,19),
(0w117,0w117,19),
(0w119,0w122,19),
(0w98,0w98,20),
(0w99,0w99,21),
(0w101,0w101,22),
(0w102,0w102,23),
(0w105,0w105,24),
(0w108,0w108,25),
(0w112,0w112,26),
(0w115,0w115,27),
(0w116,0w116,28),
(0w118,0w118,29),
(0w123,0w123,30),
(0w124,0w124,31)], []), ([], [16, 39]), ([], [16, 37, 39]), ([(0w61,0w61,503)], [16, 30, 39]), ([(0w65,0w90,501),
(0w97,0w122,501)], [16, 39]), ([(0w38,0w38,500)], [16, 39]), ([(0w34,0w34,340),
(0w48,0w57,341),
(0w102,0w102,342),
(0w116,0w116,343)], [16, 25, 39]), ([], [16, 26, 39]), ([], [16, 23, 39]), ([], [16, 21, 39]), ([], [16, 36, 39]), ([], [16, 22, 39]), ([], [16, 27, 39]), ([], [16, 24, 39]), ([(0w34,0w34,334),
(0w46,0w46,334),
(0w48,0w57,335)], [10, 16, 39]), ([], [16, 20, 39]), ([(0w61,0w61,333)], [16, 39]), ([(0w61,0w61,332)], [16, 18, 39]), ([(0w61,0w61,331)], [16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w110,51),
(0w112,0w122,51),
(0w111,0w111,326)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w110,51),
(0w112,0w122,51),
(0w111,0w111,319)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w109,51),
(0w111,0w122,51),
(0w110,0w110,307)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w98,0w107,51),
(0w109,0w122,51),
(0w97,0w97,302),
(0w108,0w108,303)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w109,51),
(0w111,0w122,51),
(0w110,0w110,301)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w122,51),
(0w101,0w101,299)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w113,51),
(0w115,0w122,51),
(0w114,0w114,295)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w98,0w115,51),
(0w117,0w122,51),
(0w97,0w97,260),
(0w116,0w116,261)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w104,51),
(0w106,0w113,51),
(0w115,0w116,51),
(0w118,0w122,51),
(0w101,0w101,60),
(0w105,0w105,61),
(0w114,0w114,62),
(0w117,0w117,63)], [8, 16, 39]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w98,0w122,51),
(0w97,0w97,52)], [8, 16, 39]), ([(0w34,0w34,33),
(0w48,0w57,34),
(0w125,0w125,35)], [16, 39]), ([(0w124,0w124,32)], [16, 39]), ([], [29]), ([(0w65,0w90,47),
(0w97,0w122,47)], []), ([(0w34,0w34,36),
(0w46,0w46,36),
(0w44,0w44,37),
(0w48,0w57,34),
(0w125,0w125,38)], []), ([], [14, 15, 17]), ([(0w48,0w57,40)], []), ([(0w48,0w57,39)], []), ([], [14]), ([(0w44,0w44,37),
(0w48,0w57,39),
(0w125,0w125,38)], []), ([(0w44,0w44,41),
(0w48,0w57,42),
(0w69,0w69,43),
(0w101,0w101,43),
(0w125,0w125,44)], []), ([(0w48,0w57,46)], []), ([(0w44,0w44,41),
(0w48,0w57,42),
(0w125,0w125,44)], []), ([(0w48,0w57,45)], []), ([], [15]), ([(0w44,0w44,41),
(0w48,0w57,45),
(0w125,0w125,44)], []), ([(0w34,0w34,36),
(0w46,0w46,36),
(0w48,0w57,46)], []), ([(0w34,0w34,48),
(0w48,0w57,47),
(0w65,0w90,47),
(0w97,0w122,47)], []), ([(0w44,0w44,49),
(0w125,0w125,50)], []), ([(0w34,0w34,33)], []), ([], [17]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w113,51),
(0w115,0w122,51),
(0w114,0w114,53)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w104,51),
(0w106,0w122,51),
(0w105,0w105,54)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w98,0w122,51),
(0w97,0w97,55)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w97,51),
(0w99,0w122,51),
(0w98,0w98,56)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w107,51),
(0w109,0w122,51),
(0w108,0w108,57)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w122,51),
(0w101,0w101,58)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w114,51),
(0w116,0w122,51),
(0w115,0w115,59)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [1, 8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w113,51),
(0w115,0w122,51),
(0w114,0w114,253)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w115,51),
(0w117,0w122,51),
(0w116,0w116,250)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w116,51),
(0w118,0w122,51),
(0w117,0w117,248)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w111,51),
(0w113,0w122,51),
(0w112,0w112,64)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w107,51),
(0w109,0w122,51),
(0w108,0w108,65)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w122,51),
(0w101,0w101,66)], [8]), ([(0w40,0w40,67),
(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [8]), ([(0w98,0w98,68),
(0w102,0w102,69),
(0w105,0w105,70),
(0w115,0w115,71)], []), ([(0w111,0w111,243)], []), ([(0w108,0w108,241)], []), ([(0w110,0w110,240)], []), ([(0w116,0w116,72)], []), ([(0w114,0w114,73)], []), ([(0w105,0w105,74)], []), ([(0w110,0w110,75)], []), ([(0w103,0w103,76)], []), ([(0w44,0w44,77)], []), ([(0w98,0w98,78),
(0w102,0w102,79),
(0w105,0w105,80),
(0w115,0w115,81)], []), ([(0w111,0w111,235)], []), ([(0w108,0w108,233)], []), ([(0w110,0w110,232)], []), ([(0w116,0w116,82)], []), ([(0w114,0w114,83)], []), ([(0w105,0w105,84)], []), ([(0w110,0w110,85)], []), ([(0w103,0w103,86)], []), ([(0w41,0w41,87),
(0w44,0w44,88)], []), ([], [7]), ([(0w98,0w98,89),
(0w102,0w102,90),
(0w105,0w105,91),
(0w115,0w115,92)], []), ([(0w111,0w111,227)], []), ([(0w108,0w108,225)], []), ([(0w110,0w110,224)], []), ([(0w116,0w116,93)], []), ([(0w114,0w114,94)], []), ([(0w105,0w105,95)], []), ([(0w110,0w110,96)], []), ([(0w103,0w103,97)], []), ([(0w41,0w41,87),
(0w44,0w44,98)], []), ([(0w98,0w98,99),
(0w102,0w102,100),
(0w105,0w105,101),
(0w115,0w115,102)], []), ([(0w111,0w111,219)], []), ([(0w108,0w108,217)], []), ([(0w110,0w110,216)], []), ([(0w116,0w116,103)], []), ([(0w114,0w114,104)], []), ([(0w105,0w105,105)], []), ([(0w110,0w110,106)], []), ([(0w103,0w103,107)], []), ([(0w41,0w41,87),
(0w44,0w44,108)], []), ([(0w98,0w98,109),
(0w102,0w102,110),
(0w105,0w105,111),
(0w115,0w115,112)], []), ([(0w111,0w111,211)], []), ([(0w108,0w108,209)], []), ([(0w110,0w110,208)], []), ([(0w116,0w116,113)], []), ([(0w114,0w114,114)], []), ([(0w105,0w105,115)], []), ([(0w110,0w110,116)], []), ([(0w103,0w103,117)], []), ([(0w41,0w41,87),
(0w44,0w44,118)], []), ([(0w98,0w98,119),
(0w102,0w102,120),
(0w105,0w105,121),
(0w115,0w115,122)], []), ([(0w111,0w111,203)], []), ([(0w108,0w108,201)], []), ([(0w110,0w110,200)], []), ([(0w116,0w116,123)], []), ([(0w114,0w114,124)], []), ([(0w105,0w105,125)], []), ([(0w110,0w110,126)], []), ([(0w103,0w103,127)], []), ([(0w41,0w41,87),
(0w44,0w44,128)], []), ([(0w98,0w98,129),
(0w102,0w102,130),
(0w105,0w105,131),
(0w115,0w115,132)], []), ([(0w111,0w111,195)], []), ([(0w108,0w108,193)], []), ([(0w110,0w110,192)], []), ([(0w116,0w116,133)], []), ([(0w114,0w114,134)], []), ([(0w105,0w105,135)], []), ([(0w110,0w110,136)], []), ([(0w103,0w103,137)], []), ([(0w41,0w41,87),
(0w44,0w44,138)], []), ([(0w98,0w98,139),
(0w102,0w102,140),
(0w105,0w105,141),
(0w115,0w115,142)], []), ([(0w111,0w111,187)], []), ([(0w108,0w108,185)], []), ([(0w110,0w110,184)], []), ([(0w116,0w116,143)], []), ([(0w114,0w114,144)], []), ([(0w105,0w105,145)], []), ([(0w110,0w110,146)], []), ([(0w103,0w103,147)], []), ([(0w41,0w41,87),
(0w44,0w44,148)], []), ([(0w98,0w98,149),
(0w102,0w102,150),
(0w105,0w105,151),
(0w115,0w115,152)], []), ([(0w111,0w111,179)], []), ([(0w108,0w108,177)], []), ([(0w110,0w110,176)], []), ([(0w116,0w116,153)], []), ([(0w114,0w114,154)], []), ([(0w105,0w105,155)], []), ([(0w110,0w110,156)], []), ([(0w103,0w103,157)], []), ([(0w41,0w41,87),
(0w44,0w44,158)], []), ([(0w98,0w98,159),
(0w102,0w102,160),
(0w105,0w105,161),
(0w115,0w115,162)], []), ([(0w111,0w111,171)], []), ([(0w108,0w108,169)], []), ([(0w110,0w110,168)], []), ([(0w116,0w116,163)], []), ([(0w114,0w114,164)], []), ([(0w105,0w105,165)], []), ([(0w110,0w110,166)], []), ([(0w103,0w103,167)], []), ([(0w41,0w41,87)], []), ([(0w116,0w116,167)], []), ([(0w111,0w111,170)], []), ([(0w97,0w97,168)], []), ([(0w111,0w111,172)], []), ([(0w108,0w108,173)], []), ([(0w101,0w101,174)], []), ([(0w97,0w97,175)], []), ([(0w110,0w110,167)], []), ([(0w116,0w116,157)], []), ([(0w111,0w111,178)], []), ([(0w97,0w97,176)], []), ([(0w111,0w111,180)], []), ([(0w108,0w108,181)], []), ([(0w101,0w101,182)], []), ([(0w97,0w97,183)], []), ([(0w110,0w110,157)], []), ([(0w116,0w116,147)], []), ([(0w111,0w111,186)], []), ([(0w97,0w97,184)], []), ([(0w111,0w111,188)], []), ([(0w108,0w108,189)], []), ([(0w101,0w101,190)], []), ([(0w97,0w97,191)], []), ([(0w110,0w110,147)], []), ([(0w116,0w116,137)], []), ([(0w111,0w111,194)], []), ([(0w97,0w97,192)], []), ([(0w111,0w111,196)], []), ([(0w108,0w108,197)], []), ([(0w101,0w101,198)], []), ([(0w97,0w97,199)], []), ([(0w110,0w110,137)], []), ([(0w116,0w116,127)], []), ([(0w111,0w111,202)], []), ([(0w97,0w97,200)], []), ([(0w111,0w111,204)], []), ([(0w108,0w108,205)], []), ([(0w101,0w101,206)], []), ([(0w97,0w97,207)], []), ([(0w110,0w110,127)], []), ([(0w116,0w116,117)], []), ([(0w111,0w111,210)], []), ([(0w97,0w97,208)], []), ([(0w111,0w111,212)], []), ([(0w108,0w108,213)], []), ([(0w101,0w101,214)], []), ([(0w97,0w97,215)], []), ([(0w110,0w110,117)], []), ([(0w116,0w116,107)], []), ([(0w111,0w111,218)], []), ([(0w97,0w97,216)], []), ([(0w111,0w111,220)], []), ([(0w108,0w108,221)], []), ([(0w101,0w101,222)], []), ([(0w97,0w97,223)], []), ([(0w110,0w110,107)], []), ([(0w116,0w116,97)], []), ([(0w111,0w111,226)], []), ([(0w97,0w97,224)], []), ([(0w111,0w111,228)], []), ([(0w108,0w108,229)], []), ([(0w101,0w101,230)], []), ([(0w97,0w97,231)], []), ([(0w110,0w110,97)], []), ([(0w116,0w116,86)], []), ([(0w111,0w111,234)], []), ([(0w97,0w97,232)], []), ([(0w111,0w111,236)], []), ([(0w108,0w108,237)], []), ([(0w101,0w101,238)], []), ([(0w97,0w97,239)], []), ([(0w110,0w110,86)], []), ([(0w116,0w116,76)], []), ([(0w111,0w111,242)], []), ([(0w97,0w97,240)], []), ([(0w111,0w111,244)], []), ([(0w108,0w108,245)], []), ([(0w101,0w101,246)], []), ([(0w97,0w97,247)], []), ([(0w110,0w110,76)], []), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w122,51),
(0w101,0w101,249)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [8, 12]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w107,51),
(0w109,0w122,51),
(0w108,0w108,251)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w122,51),
(0w101,0w101,252)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [2, 8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w108,51),
(0w110,0w122,51),
(0w109,0w109,254)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w104,51),
(0w106,0w122,51),
(0w105,0w105,255)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w109,51),
(0w111,0w122,51),
(0w110,0w110,256)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w98,0w122,51),
(0w97,0w97,257)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w115,51),
(0w117,0w122,51),
(0w116,0w116,258)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w122,51),
(0w101,0w101,259)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [8, 38]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w108,51),
(0w110,0w122,51),
(0w109,0w109,266)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w113,51),
(0w115,0w122,51),
(0w114,0w114,262)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w104,51),
(0w106,0w122,51),
(0w105,0w105,263)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w109,51),
(0w111,0w122,51),
(0w110,0w110,264)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w102,51),
(0w104,0w122,51),
(0w103,0w103,265)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [7, 8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w111,51),
(0w113,0w122,51),
(0w112,0w112,267)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w107,51),
(0w109,0w122,51),
(0w108,0w108,268)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w122,51),
(0w101,0w101,269)], [8]), ([(0w32,0w32,270),
(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [8]), ([(0w111,0w111,271)], []), ([(0w102,0w102,272)], []), ([(0w32,0w32,273)], []), ([(0w98,0w98,274),
(0w102,0w102,275),
(0w105,0w105,276),
(0w115,0w115,277),
(0w116,0w116,278)], []), ([(0w111,0w111,290)], []), ([(0w108,0w108,288)], []), ([(0w110,0w110,287)], []), ([(0w116,0w116,283)], []), ([(0w117,0w117,279)], []), ([(0w112,0w112,280)], []), ([(0w108,0w108,281)], []), ([(0w101,0w101,282)], []), ([(0w40,0w40,67)], []), ([(0w114,0w114,284)], []), ([(0w105,0w105,285)], []), ([(0w110,0w110,286)], []), ([(0w103,0w103,87)], []), ([(0w116,0w116,87)], []), ([(0w111,0w111,289)], []), ([(0w97,0w97,287)], []), ([(0w111,0w111,291)], []), ([(0w108,0w108,292)], []), ([(0w101,0w101,293)], []), ([(0w97,0w97,294)], []), ([(0w110,0w110,87)], []), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w104,51),
(0w106,0w122,51),
(0w105,0w105,296)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w109,51),
(0w111,0w122,51),
(0w110,0w110,297)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w115,51),
(0w117,0w122,51),
(0w116,0w116,298)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [4, 8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w115,51),
(0w117,0w122,51),
(0w116,0w116,300)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [0, 8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w115,51),
(0w117,0w122,51),
(0w116,0w116,265)], [6, 8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w107,51),
(0w109,0w122,51),
(0w108,0w108,306)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w110,51),
(0w112,0w122,51),
(0w111,0w111,304)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w98,0w122,51),
(0w97,0w97,305)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w115,51),
(0w117,0w122,51),
(0w116,0w116,265)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w114,51),
(0w116,0w122,51),
(0w115,0w115,248)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w99,51),
(0w101,0w122,51),
(0w100,0w100,308)], [8]), ([(0w32,0w32,309),
(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [8]), ([(0w118,0w118,310)], []), ([(0w97,0w97,311)], []), ([(0w114,0w114,312)], []), ([(0w105,0w105,313)], []), ([(0w97,0w97,314)], []), ([(0w98,0w98,315)], []), ([(0w108,0w108,316)], []), ([(0w101,0w101,317)], []), ([(0w115,0w115,318)], []), ([], [5]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w108,51),
(0w110,0w122,51),
(0w109,0w109,320)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w108,51),
(0w110,0w122,51),
(0w109,0w109,321)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w98,0w122,51),
(0w97,0w97,322)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w109,51),
(0w111,0w122,51),
(0w110,0w110,323)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w99,51),
(0w101,0w122,51),
(0w100,0w100,324)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w114,51),
(0w116,0w122,51),
(0w115,0w115,325)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w122,51)], [3, 8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w110,51),
(0w112,0w122,51),
(0w111,0w111,327)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w107,51),
(0w109,0w122,51),
(0w108,0w108,328)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w100,51),
(0w102,0w122,51),
(0w101,0w101,329)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w98,0w122,51),
(0w97,0w97,330)], [8]), ([(0w48,0w57,51),
(0w65,0w90,51),
(0w97,0w109,51),
(0w111,0w122,51),
(0w110,0w110,265)], [8]), ([], [31, 33]), ([], [19]), ([], [32, 34]), ([(0w48,0w57,336)], []), ([(0w34,0w34,334),
(0w46,0w46,334),
(0w48,0w57,335)], [10]), ([(0w48,0w57,337),
(0w69,0w69,338),
(0w101,0w101,338)], [11]), ([(0w48,0w57,337)], [11]), ([(0w48,0w57,339)], []), ([(0w48,0w57,339)], [11]), ([(0w65,0w90,499),
(0w97,0w122,499)], []), ([(0w34,0w34,494),
(0w46,0w46,494),
(0w44,0w44,347),
(0w48,0w57,341)], []), ([(0w97,0w97,492)], []), ([(0w114,0w114,344)], []), ([(0w117,0w117,345)], []), ([(0w101,0w101,346)], []), ([(0w44,0w44,347)], []), ([(0w34,0w34,348),
(0w48,0w57,349),
(0w102,0w102,350),
(0w116,0w116,351)], []), ([(0w65,0w90,491),
(0w97,0w122,491)], []), ([(0w34,0w34,486),
(0w46,0w46,486),
(0w41,0w41,355),
(0w44,0w44,356),
(0w48,0w57,349)], []), ([(0w97,0w97,484)], []), ([(0w114,0w114,352)], []), ([(0w117,0w117,353)], []), ([(0w101,0w101,354)], []), ([(0w41,0w41,355),
(0w44,0w44,356)], []), ([], [13]), ([(0w34,0w34,357),
(0w48,0w57,358),
(0w102,0w102,359),
(0w116,0w116,360)], []), ([(0w65,0w90,483),
(0w97,0w122,483)], []), ([(0w34,0w34,478),
(0w46,0w46,478),
(0w41,0w41,355),
(0w44,0w44,364),
(0w48,0w57,358)], []), ([(0w97,0w97,476)], []), ([(0w114,0w114,361)], []), ([(0w117,0w117,362)], []), ([(0w101,0w101,363)], []), ([(0w41,0w41,355),
(0w44,0w44,364)], []), ([(0w34,0w34,365),
(0w48,0w57,366),
(0w102,0w102,367),
(0w116,0w116,368)], []), ([(0w65,0w90,475),
(0w97,0w122,475)], []), ([(0w34,0w34,470),
(0w46,0w46,470),
(0w41,0w41,355),
(0w44,0w44,372),
(0w48,0w57,366)], []), ([(0w97,0w97,468)], []), ([(0w114,0w114,369)], []), ([(0w117,0w117,370)], []), ([(0w101,0w101,371)], []), ([(0w41,0w41,355),
(0w44,0w44,372)], []), ([(0w34,0w34,373),
(0w48,0w57,374),
(0w102,0w102,375),
(0w116,0w116,376)], []), ([(0w65,0w90,467),
(0w97,0w122,467)], []), ([(0w34,0w34,462),
(0w46,0w46,462),
(0w41,0w41,355),
(0w44,0w44,380),
(0w48,0w57,374)], []), ([(0w97,0w97,460)], []), ([(0w114,0w114,377)], []), ([(0w117,0w117,378)], []), ([(0w101,0w101,379)], []), ([(0w41,0w41,355),
(0w44,0w44,380)], []), ([(0w34,0w34,381),
(0w48,0w57,382),
(0w102,0w102,383),
(0w116,0w116,384)], []), ([(0w65,0w90,459),
(0w97,0w122,459)], []), ([(0w34,0w34,454),
(0w46,0w46,454),
(0w41,0w41,355),
(0w44,0w44,388),
(0w48,0w57,382)], []), ([(0w97,0w97,452)], []), ([(0w114,0w114,385)], []), ([(0w117,0w117,386)], []), ([(0w101,0w101,387)], []), ([(0w41,0w41,355),
(0w44,0w44,388)], []), ([(0w34,0w34,389),
(0w48,0w57,390),
(0w102,0w102,391),
(0w116,0w116,392)], []), ([(0w65,0w90,451),
(0w97,0w122,451)], []), ([(0w34,0w34,446),
(0w46,0w46,446),
(0w41,0w41,355),
(0w44,0w44,396),
(0w48,0w57,390)], []), ([(0w97,0w97,444)], []), ([(0w114,0w114,393)], []), ([(0w117,0w117,394)], []), ([(0w101,0w101,395)], []), ([(0w41,0w41,355),
(0w44,0w44,396)], []), ([(0w34,0w34,397),
(0w48,0w57,398),
(0w102,0w102,399),
(0w116,0w116,400)], []), ([(0w65,0w90,443),
(0w97,0w122,443)], []), ([(0w34,0w34,438),
(0w46,0w46,438),
(0w41,0w41,355),
(0w44,0w44,404),
(0w48,0w57,398)], []), ([(0w97,0w97,436)], []), ([(0w114,0w114,401)], []), ([(0w117,0w117,402)], []), ([(0w101,0w101,403)], []), ([(0w41,0w41,355),
(0w44,0w44,404)], []), ([(0w34,0w34,405),
(0w48,0w57,406),
(0w102,0w102,407),
(0w116,0w116,408)], []), ([(0w65,0w90,435),
(0w97,0w122,435)], []), ([(0w34,0w34,430),
(0w46,0w46,430),
(0w41,0w41,355),
(0w44,0w44,412),
(0w48,0w57,406)], []), ([(0w97,0w97,428)], []), ([(0w114,0w114,409)], []), ([(0w117,0w117,410)], []), ([(0w101,0w101,411)], []), ([(0w41,0w41,355),
(0w44,0w44,412)], []), ([(0w34,0w34,413),
(0w48,0w57,414),
(0w102,0w102,415),
(0w116,0w116,416)], []), ([(0w65,0w90,427),
(0w97,0w122,427)], []), ([(0w34,0w34,422),
(0w46,0w46,422),
(0w41,0w41,355),
(0w48,0w57,414)], []), ([(0w97,0w97,420)], []), ([(0w114,0w114,417)], []), ([(0w117,0w117,418)], []), ([(0w101,0w101,419)], []), ([(0w41,0w41,355)], []), ([(0w108,0w108,421)], []), ([(0w115,0w115,418)], []), ([(0w48,0w57,423)], []), ([(0w41,0w41,355),
(0w48,0w57,424),
(0w69,0w69,425),
(0w101,0w101,425)], []), ([(0w41,0w41,355),
(0w48,0w57,424)], []), ([(0w48,0w57,426)], []), ([(0w41,0w41,355),
(0w48,0w57,426)], []), ([(0w34,0w34,419),
(0w48,0w57,427),
(0w65,0w90,427),
(0w97,0w122,427)], []), ([(0w108,0w108,429)], []), ([(0w115,0w115,410)], []), ([(0w48,0w57,431)], []), ([(0w41,0w41,355),
(0w44,0w44,412),
(0w48,0w57,432),
(0w69,0w69,433),
(0w101,0w101,433)], []), ([(0w41,0w41,355),
(0w44,0w44,412),
(0w48,0w57,432)], []), ([(0w48,0w57,434)], []), ([(0w41,0w41,355),
(0w44,0w44,412),
(0w48,0w57,434)], []), ([(0w34,0w34,411),
(0w48,0w57,435),
(0w65,0w90,435),
(0w97,0w122,435)], []), ([(0w108,0w108,437)], []), ([(0w115,0w115,402)], []), ([(0w48,0w57,439)], []), ([(0w41,0w41,355),
(0w44,0w44,404),
(0w48,0w57,440),
(0w69,0w69,441),
(0w101,0w101,441)], []), ([(0w41,0w41,355),
(0w44,0w44,404),
(0w48,0w57,440)], []), ([(0w48,0w57,442)], []), ([(0w41,0w41,355),
(0w44,0w44,404),
(0w48,0w57,442)], []), ([(0w34,0w34,403),
(0w48,0w57,443),
(0w65,0w90,443),
(0w97,0w122,443)], []), ([(0w108,0w108,445)], []), ([(0w115,0w115,394)], []), ([(0w48,0w57,447)], []), ([(0w41,0w41,355),
(0w44,0w44,396),
(0w48,0w57,448),
(0w69,0w69,449),
(0w101,0w101,449)], []), ([(0w41,0w41,355),
(0w44,0w44,396),
(0w48,0w57,448)], []), ([(0w48,0w57,450)], []), ([(0w41,0w41,355),
(0w44,0w44,396),
(0w48,0w57,450)], []), ([(0w34,0w34,395),
(0w48,0w57,451),
(0w65,0w90,451),
(0w97,0w122,451)], []), ([(0w108,0w108,453)], []), ([(0w115,0w115,386)], []), ([(0w48,0w57,455)], []), ([(0w41,0w41,355),
(0w44,0w44,388),
(0w48,0w57,456),
(0w69,0w69,457),
(0w101,0w101,457)], []), ([(0w41,0w41,355),
(0w44,0w44,388),
(0w48,0w57,456)], []), ([(0w48,0w57,458)], []), ([(0w41,0w41,355),
(0w44,0w44,388),
(0w48,0w57,458)], []), ([(0w34,0w34,387),
(0w48,0w57,459),
(0w65,0w90,459),
(0w97,0w122,459)], []), ([(0w108,0w108,461)], []), ([(0w115,0w115,378)], []), ([(0w48,0w57,463)], []), ([(0w41,0w41,355),
(0w44,0w44,380),
(0w48,0w57,464),
(0w69,0w69,465),
(0w101,0w101,465)], []), ([(0w41,0w41,355),
(0w44,0w44,380),
(0w48,0w57,464)], []), ([(0w48,0w57,466)], []), ([(0w41,0w41,355),
(0w44,0w44,380),
(0w48,0w57,466)], []), ([(0w34,0w34,379),
(0w48,0w57,467),
(0w65,0w90,467),
(0w97,0w122,467)], []), ([(0w108,0w108,469)], []), ([(0w115,0w115,370)], []), ([(0w48,0w57,471)], []), ([(0w41,0w41,355),
(0w44,0w44,372),
(0w48,0w57,472),
(0w69,0w69,473),
(0w101,0w101,473)], []), ([(0w41,0w41,355),
(0w44,0w44,372),
(0w48,0w57,472)], []), ([(0w48,0w57,474)], []), ([(0w41,0w41,355),
(0w44,0w44,372),
(0w48,0w57,474)], []), ([(0w34,0w34,371),
(0w48,0w57,475),
(0w65,0w90,475),
(0w97,0w122,475)], []), ([(0w108,0w108,477)], []), ([(0w115,0w115,362)], []), ([(0w48,0w57,479)], []), ([(0w41,0w41,355),
(0w44,0w44,364),
(0w48,0w57,480),
(0w69,0w69,481),
(0w101,0w101,481)], []), ([(0w41,0w41,355),
(0w44,0w44,364),
(0w48,0w57,480)], []), ([(0w48,0w57,482)], []), ([(0w41,0w41,355),
(0w44,0w44,364),
(0w48,0w57,482)], []), ([(0w34,0w34,363),
(0w48,0w57,483),
(0w65,0w90,483),
(0w97,0w122,483)], []), ([(0w108,0w108,485)], []), ([(0w115,0w115,353)], []), ([(0w48,0w57,487)], []), ([(0w41,0w41,355),
(0w44,0w44,356),
(0w48,0w57,488),
(0w69,0w69,489),
(0w101,0w101,489)], []), ([(0w41,0w41,355),
(0w44,0w44,356),
(0w48,0w57,488)], []), ([(0w48,0w57,490)], []), ([(0w41,0w41,355),
(0w44,0w44,356),
(0w48,0w57,490)], []), ([(0w34,0w34,354),
(0w48,0w57,491),
(0w65,0w90,491),
(0w97,0w122,491)], []), ([(0w108,0w108,493)], []), ([(0w115,0w115,345)], []), ([(0w48,0w57,495)], []), ([(0w44,0w44,347),
(0w48,0w57,496),
(0w69,0w69,497),
(0w101,0w101,497)], []), ([(0w44,0w44,347),
(0w48,0w57,496)], []), ([(0w48,0w57,498)], []), ([(0w44,0w44,347),
(0w48,0w57,498)], []), ([(0w34,0w34,346),
(0w48,0w57,499),
(0w65,0w90,499),
(0w97,0w122,499)], []), ([], [28]), ([(0w34,0w34,502),
(0w48,0w57,501),
(0w65,0w90,501),
(0w97,0w122,501)], []), ([], [9]), ([], [35])]
    fun yystreamify' p input = ULexBuffer.mkStream (p, input)

    fun yystreamifyReader' p readFn strm = let
          val s = ref strm
	  fun iter(strm, n, accum) = 
	        if n > 1024 then (String.implode (rev accum), strm)
		else (case readFn strm
		       of NONE => (String.implode (rev accum), strm)
			| SOME(c, strm') => iter (strm', n+1, c::accum))
          fun input() = let
	        val (data, strm) = iter(!s, 0, [])
	        in
	          s := strm;
		  data
	        end
          in
            yystreamify' p input
          end

    fun yystreamifyInstream' p strm = yystreamify' p (fn ()=>TextIO.input strm)

    fun innerLex 
(yystrm_, yyss_, yysm) = let
        (* current start state *)
          val yyss = ref yyss_
	  fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
          val yystrm = ref yystrm_
	  fun yysetStrm strm = yystrm := strm
	  fun yygetPos() = ULexBuffer.getpos (!yystrm)
	  fun yystreamify input = yystreamify' (yygetPos()) input
	  fun yystreamifyReader readFn strm = yystreamifyReader' (yygetPos()) readFn strm
	  fun yystreamifyInstream strm = yystreamifyInstream' (yygetPos()) strm
        (* start position of token -- can be updated via skip() *)
	  val yystartPos = ref (yygetPos())
	(* get one char of input *)
	  fun yygetc strm = (case ULexBuffer.getu strm
                of (SOME (0w10, s')) => 
		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
		      SOME (0w10, s'))
		 | x => x)
          fun yygetList getc strm = let
            val get1 = UTF8.getu getc
            fun iter (strm, accum) = 
	        (case get1 strm
	          of NONE => rev accum
	           | SOME (w, strm') => iter (strm', w::accum)
	         (* end case *))
          in
            iter (strm, [])
          end
	(* create yytext *)
	  fun yymksubstr(strm) = ULexBuffer.subtract (strm, !yystrm)
	  fun yymktext(strm) = Substring.string (yymksubstr strm)
	  fun yymkunicode(strm) = yygetList Substring.getc (yymksubstr strm)
          open UserDeclarations
          fun lex () = let
            fun yystuck (yyNO_MATCH) = raise Fail "lexer reached a stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yygetPos()
	    fun yygetlineNo strm = AntlrStreamPos.lineNo yysm (ULexBuffer.getpos strm)
	    fun yygetcolNo  strm = AntlrStreamPos.colNo  yysm (ULexBuffer.getpos strm)
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    val yylastwasnref = ref (ULexBuffer.lastWasNL (!yystrm))
	    fun continue() = let val yylastwasn = !yylastwasnref in
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_let )
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_variables )
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_title )
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_comands )
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_Print )
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_endvars )
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_in )
fun yyAction7 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   print yytext; T.TIPO yytext 
      end
fun yyAction8 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.ID yytext 
      end
fun yyAction9 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.NUM (valOf (Int.fromString yytext)) 
      end
fun yyAction11 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.REAL (valOf (Real.fromString yytext)) 
      end
fun yyAction12 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.BOOL (valOf (Bool.fromString yytext)) 
      end
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction14 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print yytext; T.SINT (Grammar.toIntList (Grammar.tokenize yytext))
      end
fun yyAction15 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print yytext; T.SFLOAT (Grammar.toFloatList (Grammar.tokenize yytext))
      end
fun yyAction16 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print yytext; T.SBOOL (Grammar.toBoolList (Grammar.tokenize yytext))
      end
fun yyAction17 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  print yytext; T.SSTRING (Grammar.tokenize yytext)
      end
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EQ )
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EEQ )
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;   T.SEMI)
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;   T.PLUS )
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;   T.MINUS )
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;   T.TIMES )
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DIV )
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LP )
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;   T.RP )
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOT )
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;   T.AND )
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;   T.OR )
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NOT )
fun yyAction31 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GEQ )
fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LEQ )
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GT )
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LT )
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NEQ )
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;   T.COMMA )
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;   continue() )
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;
        T.KW_terminate )
fun yyAction39 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print (concat ["Unexpected character: '", yytext,
			           "'\n"]); continue()
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39])
in
  if ULexBuffer.eof(!(yystrm))
    then let
      val yycolno = ref(yygetcolNo(!(yystrm)))
      val yylineno = ref(yygetlineNo(!(yystrm)))
      in
        (case (!(yyss))
         of _ => (UserDeclarations.eof())
        (* end case *))
      end
    else (case (!(yyss))
       of INITIAL => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
      (* end case *))
end
end
            and skip() = (yystartPos := yygetPos(); 
			  yylastwasnref := ULexBuffer.lastWasNL (!yystrm);
			  continue())
	    in (continue(), (!yystartPos, yygetPos()), !yystrm, !yyss) end
          in 
            lex()
          end
  in
    type pos = AntlrStreamPos.pos
    type span = AntlrStreamPos.span
    type tok = UserDeclarations.lex_result

    datatype prestrm = STRM of ULexBuffer.stream * 
		(yystart_state * tok * span * prestrm * yystart_state) option ref
    type strm = (prestrm * yystart_state)

    fun lex sm 
(STRM (yystrm, memo), ss) = (case !memo
	  of NONE => let
	     val (tok, span, yystrm', ss') = innerLex 
(yystrm, ss, sm)
	     val strm' = STRM (yystrm', ref NONE);
	     in 
	       memo := SOME (ss, tok, span, strm', ss');
	       (tok, span, (strm', ss'))
	     end
	   | SOME (ss', tok, span, strm', ss'') => 
	       if ss = ss' then
		 (tok, span, (strm', ss''))
	       else (
		 memo := NONE;
		 lex sm 
(STRM (yystrm, memo), ss))
         (* end case *))

    fun streamify input = (STRM (yystreamify' 0 input, ref NONE), INITIAL)
    fun streamifyReader readFn strm = (STRM (yystreamifyReader' 0 readFn strm, ref NONE), 
				       INITIAL)
    fun streamifyInstream strm = (STRM (yystreamifyInstream' 0 strm, ref NONE), 
				  INITIAL)

    fun getPos (STRM (strm, _), _) = ULexBuffer.getpos strm

  end
end
