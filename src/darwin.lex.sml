structure DarwinLexer  = struct

    datatype yystart_state = 
INITIAL
    structure UserDeclarations = 
      struct

 
    structure T = DarwinTokens
    type lex_result = T.token
    fun eof() = T.EOF


      end

    local
    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of ULexBuffer.stream * action * yymatch
    withtype action = ULexBuffer.stream * yymatch -> UserDeclarations.lex_result

    val yytable : ((UTF8.wchar * UTF8.wchar * int) list * int list) Vector.vector = 
#[([(0w0,0w8,1),
(0w11,0w31,1),
(0w35,0w37,1),
(0w39,0w39,1),
(0w58,0w58,1),
(0w63,0w64,1),
(0w91,0w96,1),
(0w125,0w2147483647,1),
(0w9,0w10,2),
(0w32,0w32,2),
(0w33,0w33,3),
(0w34,0w34,4),
(0w38,0w38,5),
(0w40,0w40,6),
(0w41,0w41,7),
(0w42,0w42,8),
(0w43,0w43,9),
(0w44,0w44,10),
(0w45,0w45,11),
(0w46,0w46,12),
(0w47,0w47,13),
(0w48,0w57,14),
(0w59,0w59,15),
(0w60,0w60,16),
(0w61,0w61,17),
(0w62,0w62,18),
(0w65,0w90,19),
(0w97,0w97,19),
(0w103,0w104,19),
(0w106,0w108,19),
(0w110,0w111,19),
(0w113,0w114,19),
(0w117,0w117,19),
(0w120,0w122,19),
(0w98,0w98,20),
(0w99,0w99,21),
(0w100,0w100,22),
(0w101,0w101,23),
(0w102,0w102,24),
(0w105,0w105,25),
(0w109,0w109,26),
(0w112,0w112,27),
(0w115,0w115,28),
(0w116,0w116,29),
(0w118,0w118,30),
(0w119,0w119,31),
(0w123,0w123,32),
(0w124,0w124,33)], []), ([], [48]), ([], [46, 48]), ([(0w61,0w61,537)], [38, 48]), ([(0w65,0w90,535),
(0w97,0w122,535)], [48]), ([(0w38,0w38,534)], [48]), ([(0w34,0w34,374),
(0w48,0w57,375),
(0w102,0w102,376),
(0w116,0w116,377)], [33, 48]), ([], [34, 48]), ([], [31, 48]), ([], [29, 48]), ([], [45, 48]), ([], [30, 48]), ([], [35, 48]), ([], [32, 48]), ([(0w34,0w34,368),
(0w46,0w46,368),
(0w48,0w57,369)], [12, 48]), ([], [28, 48]), ([(0w61,0w61,367)], [48]), ([(0w61,0w61,366)], [26, 48]), ([(0w61,0w61,365)], [48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,360)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,353)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,352)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w109,62),
(0w111,0w122,62),
(0w108,0w108,337),
(0w110,0w110,338)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w107,62),
(0w109,0w122,62),
(0w97,0w97,333),
(0w108,0w108,334)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w101,62),
(0w103,0w109,62),
(0w111,0w122,62),
(0w102,0w102,331),
(0w110,0w110,332)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,328)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,322)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w115,62),
(0w118,0w122,62),
(0w97,0w97,285),
(0w116,0w116,286),
(0w117,0w117,287)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w103,62),
(0w106,0w110,62),
(0w112,0w113,62),
(0w115,0w116,62),
(0w118,0w122,62),
(0w101,0w101,75),
(0w104,0w104,76),
(0w105,0w105,77),
(0w111,0w111,78),
(0w114,0w114,79),
(0w117,0w117,80)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,67)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w103,62),
(0w105,0w122,62),
(0w104,0w104,63)], [10, 48]), ([(0w34,0w34,35),
(0w48,0w57,36),
(0w102,0w102,37),
(0w116,0w116,38),
(0w125,0w125,39)], [48]), ([(0w124,0w124,34)], [48]), ([], [37]), ([(0w65,0w90,58),
(0w97,0w122,58)], []), ([(0w34,0w34,47),
(0w46,0w46,47),
(0w44,0w44,48),
(0w48,0w57,36),
(0w125,0w125,49)], []), ([(0w97,0w97,45)], []), ([(0w114,0w114,40)], []), ([], [16, 17, 18, 19, 44]), ([(0w117,0w117,41)], []), ([(0w101,0w101,42)], []), ([(0w44,0w44,43),
(0w125,0w125,44)], []), ([(0w102,0w102,37),
(0w116,0w116,38)], []), ([], [18]), ([(0w108,0w108,46)], []), ([(0w115,0w115,41)], []), ([(0w48,0w57,51)], []), ([(0w48,0w57,50)], []), ([], [16]), ([(0w44,0w44,48),
(0w48,0w57,50),
(0w125,0w125,49)], []), ([(0w44,0w44,52),
(0w48,0w57,53),
(0w69,0w69,54),
(0w101,0w101,54),
(0w125,0w125,55)], []), ([(0w48,0w57,57)], []), ([(0w44,0w44,52),
(0w48,0w57,53),
(0w125,0w125,55)], []), ([(0w48,0w57,56)], []), ([], [17]), ([(0w44,0w44,52),
(0w48,0w57,56),
(0w125,0w125,55)], []), ([(0w34,0w34,47),
(0w46,0w46,47),
(0w48,0w57,57)], []), ([(0w34,0w34,59),
(0w48,0w57,58),
(0w65,0w90,58),
(0w97,0w122,58)], []), ([(0w44,0w44,60),
(0w125,0w125,61)], []), ([(0w34,0w34,35)], []), ([], [19]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,64)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,65)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,66)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 23]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,68)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,69)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,70)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w97,62),
(0w99,0w122,62),
(0w98,0w98,71)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,72)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,73)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w114,62),
(0w116,0w122,62),
(0w115,0w115,74)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [0, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,278)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,276)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,273)], [10]), ([(0w48,0w57,62),
(0w65,0w82,62),
(0w84,0w90,62),
(0w97,0w122,62),
(0w83,0w83,267)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w116,62),
(0w118,0w122,62),
(0w117,0w117,265)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w111,62),
(0w113,0w122,62),
(0w112,0w112,81)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,82)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,83)], [10]), ([(0w40,0w40,84),
(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10]), ([(0w98,0w98,85),
(0w102,0w102,86),
(0w105,0w105,87),
(0w115,0w115,88)], []), ([(0w111,0w111,260)], []), ([(0w108,0w108,258)], []), ([(0w110,0w110,257)], []), ([(0w116,0w116,89)], []), ([(0w114,0w114,90)], []), ([(0w105,0w105,91)], []), ([(0w110,0w110,92)], []), ([(0w103,0w103,93)], []), ([(0w44,0w44,94)], []), ([(0w98,0w98,95),
(0w102,0w102,96),
(0w105,0w105,97),
(0w115,0w115,98)], []), ([(0w111,0w111,252)], []), ([(0w108,0w108,250)], []), ([(0w110,0w110,249)], []), ([(0w116,0w116,99)], []), ([(0w114,0w114,100)], []), ([(0w105,0w105,101)], []), ([(0w110,0w110,102)], []), ([(0w103,0w103,103)], []), ([(0w41,0w41,104),
(0w44,0w44,105)], []), ([], [9]), ([(0w98,0w98,106),
(0w102,0w102,107),
(0w105,0w105,108),
(0w115,0w115,109)], []), ([(0w111,0w111,244)], []), ([(0w108,0w108,242)], []), ([(0w110,0w110,241)], []), ([(0w116,0w116,110)], []), ([(0w114,0w114,111)], []), ([(0w105,0w105,112)], []), ([(0w110,0w110,113)], []), ([(0w103,0w103,114)], []), ([(0w41,0w41,104),
(0w44,0w44,115)], []), ([(0w98,0w98,116),
(0w102,0w102,117),
(0w105,0w105,118),
(0w115,0w115,119)], []), ([(0w111,0w111,236)], []), ([(0w108,0w108,234)], []), ([(0w110,0w110,233)], []), ([(0w116,0w116,120)], []), ([(0w114,0w114,121)], []), ([(0w105,0w105,122)], []), ([(0w110,0w110,123)], []), ([(0w103,0w103,124)], []), ([(0w41,0w41,104),
(0w44,0w44,125)], []), ([(0w98,0w98,126),
(0w102,0w102,127),
(0w105,0w105,128),
(0w115,0w115,129)], []), ([(0w111,0w111,228)], []), ([(0w108,0w108,226)], []), ([(0w110,0w110,225)], []), ([(0w116,0w116,130)], []), ([(0w114,0w114,131)], []), ([(0w105,0w105,132)], []), ([(0w110,0w110,133)], []), ([(0w103,0w103,134)], []), ([(0w41,0w41,104),
(0w44,0w44,135)], []), ([(0w98,0w98,136),
(0w102,0w102,137),
(0w105,0w105,138),
(0w115,0w115,139)], []), ([(0w111,0w111,220)], []), ([(0w108,0w108,218)], []), ([(0w110,0w110,217)], []), ([(0w116,0w116,140)], []), ([(0w114,0w114,141)], []), ([(0w105,0w105,142)], []), ([(0w110,0w110,143)], []), ([(0w103,0w103,144)], []), ([(0w41,0w41,104),
(0w44,0w44,145)], []), ([(0w98,0w98,146),
(0w102,0w102,147),
(0w105,0w105,148),
(0w115,0w115,149)], []), ([(0w111,0w111,212)], []), ([(0w108,0w108,210)], []), ([(0w110,0w110,209)], []), ([(0w116,0w116,150)], []), ([(0w114,0w114,151)], []), ([(0w105,0w105,152)], []), ([(0w110,0w110,153)], []), ([(0w103,0w103,154)], []), ([(0w41,0w41,104),
(0w44,0w44,155)], []), ([(0w98,0w98,156),
(0w102,0w102,157),
(0w105,0w105,158),
(0w115,0w115,159)], []), ([(0w111,0w111,204)], []), ([(0w108,0w108,202)], []), ([(0w110,0w110,201)], []), ([(0w116,0w116,160)], []), ([(0w114,0w114,161)], []), ([(0w105,0w105,162)], []), ([(0w110,0w110,163)], []), ([(0w103,0w103,164)], []), ([(0w41,0w41,104),
(0w44,0w44,165)], []), ([(0w98,0w98,166),
(0w102,0w102,167),
(0w105,0w105,168),
(0w115,0w115,169)], []), ([(0w111,0w111,196)], []), ([(0w108,0w108,194)], []), ([(0w110,0w110,193)], []), ([(0w116,0w116,170)], []), ([(0w114,0w114,171)], []), ([(0w105,0w105,172)], []), ([(0w110,0w110,173)], []), ([(0w103,0w103,174)], []), ([(0w41,0w41,104),
(0w44,0w44,175)], []), ([(0w98,0w98,176),
(0w102,0w102,177),
(0w105,0w105,178),
(0w115,0w115,179)], []), ([(0w111,0w111,188)], []), ([(0w108,0w108,186)], []), ([(0w110,0w110,185)], []), ([(0w116,0w116,180)], []), ([(0w114,0w114,181)], []), ([(0w105,0w105,182)], []), ([(0w110,0w110,183)], []), ([(0w103,0w103,184)], []), ([(0w41,0w41,104)], []), ([(0w116,0w116,184)], []), ([(0w111,0w111,187)], []), ([(0w97,0w97,185)], []), ([(0w111,0w111,189)], []), ([(0w108,0w108,190)], []), ([(0w101,0w101,191)], []), ([(0w97,0w97,192)], []), ([(0w110,0w110,184)], []), ([(0w116,0w116,174)], []), ([(0w111,0w111,195)], []), ([(0w97,0w97,193)], []), ([(0w111,0w111,197)], []), ([(0w108,0w108,198)], []), ([(0w101,0w101,199)], []), ([(0w97,0w97,200)], []), ([(0w110,0w110,174)], []), ([(0w116,0w116,164)], []), ([(0w111,0w111,203)], []), ([(0w97,0w97,201)], []), ([(0w111,0w111,205)], []), ([(0w108,0w108,206)], []), ([(0w101,0w101,207)], []), ([(0w97,0w97,208)], []), ([(0w110,0w110,164)], []), ([(0w116,0w116,154)], []), ([(0w111,0w111,211)], []), ([(0w97,0w97,209)], []), ([(0w111,0w111,213)], []), ([(0w108,0w108,214)], []), ([(0w101,0w101,215)], []), ([(0w97,0w97,216)], []), ([(0w110,0w110,154)], []), ([(0w116,0w116,144)], []), ([(0w111,0w111,219)], []), ([(0w97,0w97,217)], []), ([(0w111,0w111,221)], []), ([(0w108,0w108,222)], []), ([(0w101,0w101,223)], []), ([(0w97,0w97,224)], []), ([(0w110,0w110,144)], []), ([(0w116,0w116,134)], []), ([(0w111,0w111,227)], []), ([(0w97,0w97,225)], []), ([(0w111,0w111,229)], []), ([(0w108,0w108,230)], []), ([(0w101,0w101,231)], []), ([(0w97,0w97,232)], []), ([(0w110,0w110,134)], []), ([(0w116,0w116,124)], []), ([(0w111,0w111,235)], []), ([(0w97,0w97,233)], []), ([(0w111,0w111,237)], []), ([(0w108,0w108,238)], []), ([(0w101,0w101,239)], []), ([(0w97,0w97,240)], []), ([(0w110,0w110,124)], []), ([(0w116,0w116,114)], []), ([(0w111,0w111,243)], []), ([(0w97,0w97,241)], []), ([(0w111,0w111,245)], []), ([(0w108,0w108,246)], []), ([(0w101,0w101,247)], []), ([(0w97,0w97,248)], []), ([(0w110,0w110,114)], []), ([(0w116,0w116,103)], []), ([(0w111,0w111,251)], []), ([(0w97,0w97,249)], []), ([(0w111,0w111,253)], []), ([(0w108,0w108,254)], []), ([(0w101,0w101,255)], []), ([(0w97,0w97,256)], []), ([(0w110,0w110,103)], []), ([(0w116,0w116,93)], []), ([(0w111,0w111,259)], []), ([(0w97,0w97,257)], []), ([(0w111,0w111,261)], []), ([(0w108,0w108,262)], []), ([(0w101,0w101,263)], []), ([(0w97,0w97,264)], []), ([(0w110,0w110,93)], []), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,266)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 14]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,268)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,269)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,270)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,271)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w102,62),
(0w104,0w122,62),
(0w103,0w103,272)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [6, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,274)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,275)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [1, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,277)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 21]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,279)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,280)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,281)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,282)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,283)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,284)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 47]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,293)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,289)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,288)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [4, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,290)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,291)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w102,62),
(0w104,0w122,62),
(0w103,0w103,292)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [9, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w111,62),
(0w113,0w122,62),
(0w112,0w112,294)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,295)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,296)], [10]), ([(0w32,0w32,297),
(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10]), ([(0w111,0w111,298)], []), ([(0w102,0w102,299)], []), ([(0w32,0w32,300)], []), ([(0w98,0w98,301),
(0w102,0w102,302),
(0w105,0w105,303),
(0w115,0w115,304),
(0w116,0w116,305)], []), ([(0w111,0w111,317)], []), ([(0w108,0w108,315)], []), ([(0w110,0w110,314)], []), ([(0w116,0w116,310)], []), ([(0w117,0w117,306)], []), ([(0w112,0w112,307)], []), ([(0w108,0w108,308)], []), ([(0w101,0w101,309)], []), ([(0w40,0w40,84)], []), ([(0w114,0w114,311)], []), ([(0w105,0w105,312)], []), ([(0w110,0w110,313)], []), ([(0w103,0w103,104)], []), ([(0w116,0w116,104)], []), ([(0w111,0w111,316)], []), ([(0w97,0w97,314)], []), ([(0w111,0w111,318)], []), ([(0w108,0w108,319)], []), ([(0w101,0w101,320)], []), ([(0w97,0w97,321)], []), ([(0w110,0w110,104)], []), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w110,62),
(0w112,0w122,62),
(0w105,0w105,323),
(0w111,0w111,324)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,326)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w99,62),
(0w101,0w122,62),
(0w100,0w100,325)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [5, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,327)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [3, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,329)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,330)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [8, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 20]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,292)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,336)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,335)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,332)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w114,62),
(0w116,0w122,62),
(0w115,0w115,265)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w114,62),
(0w116,0w122,62),
(0w115,0w115,350)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w99,62),
(0w101,0w122,62),
(0w100,0w100,339)], [10]), ([(0w32,0w32,340),
(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 25]), ([(0w118,0w118,341)], []), ([(0w97,0w97,342)], []), ([(0w114,0w114,343)], []), ([(0w105,0w105,344)], []), ([(0w97,0w97,345)], []), ([(0w98,0w98,346)], []), ([(0w108,0w108,347)], []), ([(0w101,0w101,348)], []), ([(0w115,0w115,349)], []), ([], [7]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,351)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 22]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 24]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,354)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,355)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,356)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,357)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w99,62),
(0w101,0w122,62),
(0w100,0w100,358)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w114,62),
(0w116,0w122,62),
(0w115,0w115,359)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [2, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,361)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,362)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,363)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,364)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,292)], [10]), ([], [39, 41]), ([], [27]), ([], [40, 42]), ([(0w48,0w57,370)], []), ([(0w34,0w34,368),
(0w46,0w46,368),
(0w48,0w57,369)], [12]), ([(0w48,0w57,371),
(0w69,0w69,372),
(0w101,0w101,372)], [13]), ([(0w48,0w57,371)], [13]), ([(0w48,0w57,373)], []), ([(0w48,0w57,373)], [13]), ([(0w65,0w90,533),
(0w97,0w122,533)], []), ([(0w34,0w34,528),
(0w46,0w46,528),
(0w44,0w44,381),
(0w48,0w57,375)], []), ([(0w97,0w97,526)], []), ([(0w114,0w114,378)], []), ([(0w117,0w117,379)], []), ([(0w101,0w101,380)], []), ([(0w44,0w44,381)], []), ([(0w34,0w34,382),
(0w48,0w57,383),
(0w102,0w102,384),
(0w116,0w116,385)], []), ([(0w65,0w90,525),
(0w97,0w122,525)], []), ([(0w34,0w34,520),
(0w46,0w46,520),
(0w41,0w41,389),
(0w44,0w44,390),
(0w48,0w57,383)], []), ([(0w97,0w97,518)], []), ([(0w114,0w114,386)], []), ([(0w117,0w117,387)], []), ([(0w101,0w101,388)], []), ([(0w41,0w41,389),
(0w44,0w44,390)], []), ([], [15]), ([(0w34,0w34,391),
(0w48,0w57,392),
(0w102,0w102,393),
(0w116,0w116,394)], []), ([(0w65,0w90,517),
(0w97,0w122,517)], []), ([(0w34,0w34,512),
(0w46,0w46,512),
(0w41,0w41,389),
(0w44,0w44,398),
(0w48,0w57,392)], []), ([(0w97,0w97,510)], []), ([(0w114,0w114,395)], []), ([(0w117,0w117,396)], []), ([(0w101,0w101,397)], []), ([(0w41,0w41,389),
(0w44,0w44,398)], []), ([(0w34,0w34,399),
(0w48,0w57,400),
(0w102,0w102,401),
(0w116,0w116,402)], []), ([(0w65,0w90,509),
(0w97,0w122,509)], []), ([(0w34,0w34,504),
(0w46,0w46,504),
(0w41,0w41,389),
(0w44,0w44,406),
(0w48,0w57,400)], []), ([(0w97,0w97,502)], []), ([(0w114,0w114,403)], []), ([(0w117,0w117,404)], []), ([(0w101,0w101,405)], []), ([(0w41,0w41,389),
(0w44,0w44,406)], []), ([(0w34,0w34,407),
(0w48,0w57,408),
(0w102,0w102,409),
(0w116,0w116,410)], []), ([(0w65,0w90,501),
(0w97,0w122,501)], []), ([(0w34,0w34,496),
(0w46,0w46,496),
(0w41,0w41,389),
(0w44,0w44,414),
(0w48,0w57,408)], []), ([(0w97,0w97,494)], []), ([(0w114,0w114,411)], []), ([(0w117,0w117,412)], []), ([(0w101,0w101,413)], []), ([(0w41,0w41,389),
(0w44,0w44,414)], []), ([(0w34,0w34,415),
(0w48,0w57,416),
(0w102,0w102,417),
(0w116,0w116,418)], []), ([(0w65,0w90,493),
(0w97,0w122,493)], []), ([(0w34,0w34,488),
(0w46,0w46,488),
(0w41,0w41,389),
(0w44,0w44,422),
(0w48,0w57,416)], []), ([(0w97,0w97,486)], []), ([(0w114,0w114,419)], []), ([(0w117,0w117,420)], []), ([(0w101,0w101,421)], []), ([(0w41,0w41,389),
(0w44,0w44,422)], []), ([(0w34,0w34,423),
(0w48,0w57,424),
(0w102,0w102,425),
(0w116,0w116,426)], []), ([(0w65,0w90,485),
(0w97,0w122,485)], []), ([(0w34,0w34,480),
(0w46,0w46,480),
(0w41,0w41,389),
(0w44,0w44,430),
(0w48,0w57,424)], []), ([(0w97,0w97,478)], []), ([(0w114,0w114,427)], []), ([(0w117,0w117,428)], []), ([(0w101,0w101,429)], []), ([(0w41,0w41,389),
(0w44,0w44,430)], []), ([(0w34,0w34,431),
(0w48,0w57,432),
(0w102,0w102,433),
(0w116,0w116,434)], []), ([(0w65,0w90,477),
(0w97,0w122,477)], []), ([(0w34,0w34,472),
(0w46,0w46,472),
(0w41,0w41,389),
(0w44,0w44,438),
(0w48,0w57,432)], []), ([(0w97,0w97,470)], []), ([(0w114,0w114,435)], []), ([(0w117,0w117,436)], []), ([(0w101,0w101,437)], []), ([(0w41,0w41,389),
(0w44,0w44,438)], []), ([(0w34,0w34,439),
(0w48,0w57,440),
(0w102,0w102,441),
(0w116,0w116,442)], []), ([(0w65,0w90,469),
(0w97,0w122,469)], []), ([(0w34,0w34,464),
(0w46,0w46,464),
(0w41,0w41,389),
(0w44,0w44,446),
(0w48,0w57,440)], []), ([(0w97,0w97,462)], []), ([(0w114,0w114,443)], []), ([(0w117,0w117,444)], []), ([(0w101,0w101,445)], []), ([(0w41,0w41,389),
(0w44,0w44,446)], []), ([(0w34,0w34,447),
(0w48,0w57,448),
(0w102,0w102,449),
(0w116,0w116,450)], []), ([(0w65,0w90,461),
(0w97,0w122,461)], []), ([(0w34,0w34,456),
(0w46,0w46,456),
(0w41,0w41,389),
(0w48,0w57,448)], []), ([(0w97,0w97,454)], []), ([(0w114,0w114,451)], []), ([(0w117,0w117,452)], []), ([(0w101,0w101,453)], []), ([(0w41,0w41,389)], []), ([(0w108,0w108,455)], []), ([(0w115,0w115,452)], []), ([(0w48,0w57,457)], []), ([(0w41,0w41,389),
(0w48,0w57,458),
(0w69,0w69,459),
(0w101,0w101,459)], []), ([(0w41,0w41,389),
(0w48,0w57,458)], []), ([(0w48,0w57,460)], []), ([(0w41,0w41,389),
(0w48,0w57,460)], []), ([(0w34,0w34,453),
(0w48,0w57,461),
(0w65,0w90,461),
(0w97,0w122,461)], []), ([(0w108,0w108,463)], []), ([(0w115,0w115,444)], []), ([(0w48,0w57,465)], []), ([(0w41,0w41,389),
(0w44,0w44,446),
(0w48,0w57,466),
(0w69,0w69,467),
(0w101,0w101,467)], []), ([(0w41,0w41,389),
(0w44,0w44,446),
(0w48,0w57,466)], []), ([(0w48,0w57,468)], []), ([(0w41,0w41,389),
(0w44,0w44,446),
(0w48,0w57,468)], []), ([(0w34,0w34,445),
(0w48,0w57,469),
(0w65,0w90,469),
(0w97,0w122,469)], []), ([(0w108,0w108,471)], []), ([(0w115,0w115,436)], []), ([(0w48,0w57,473)], []), ([(0w41,0w41,389),
(0w44,0w44,438),
(0w48,0w57,474),
(0w69,0w69,475),
(0w101,0w101,475)], []), ([(0w41,0w41,389),
(0w44,0w44,438),
(0w48,0w57,474)], []), ([(0w48,0w57,476)], []), ([(0w41,0w41,389),
(0w44,0w44,438),
(0w48,0w57,476)], []), ([(0w34,0w34,437),
(0w48,0w57,477),
(0w65,0w90,477),
(0w97,0w122,477)], []), ([(0w108,0w108,479)], []), ([(0w115,0w115,428)], []), ([(0w48,0w57,481)], []), ([(0w41,0w41,389),
(0w44,0w44,430),
(0w48,0w57,482),
(0w69,0w69,483),
(0w101,0w101,483)], []), ([(0w41,0w41,389),
(0w44,0w44,430),
(0w48,0w57,482)], []), ([(0w48,0w57,484)], []), ([(0w41,0w41,389),
(0w44,0w44,430),
(0w48,0w57,484)], []), ([(0w34,0w34,429),
(0w48,0w57,485),
(0w65,0w90,485),
(0w97,0w122,485)], []), ([(0w108,0w108,487)], []), ([(0w115,0w115,420)], []), ([(0w48,0w57,489)], []), ([(0w41,0w41,389),
(0w44,0w44,422),
(0w48,0w57,490),
(0w69,0w69,491),
(0w101,0w101,491)], []), ([(0w41,0w41,389),
(0w44,0w44,422),
(0w48,0w57,490)], []), ([(0w48,0w57,492)], []), ([(0w41,0w41,389),
(0w44,0w44,422),
(0w48,0w57,492)], []), ([(0w34,0w34,421),
(0w48,0w57,493),
(0w65,0w90,493),
(0w97,0w122,493)], []), ([(0w108,0w108,495)], []), ([(0w115,0w115,412)], []), ([(0w48,0w57,497)], []), ([(0w41,0w41,389),
(0w44,0w44,414),
(0w48,0w57,498),
(0w69,0w69,499),
(0w101,0w101,499)], []), ([(0w41,0w41,389),
(0w44,0w44,414),
(0w48,0w57,498)], []), ([(0w48,0w57,500)], []), ([(0w41,0w41,389),
(0w44,0w44,414),
(0w48,0w57,500)], []), ([(0w34,0w34,413),
(0w48,0w57,501),
(0w65,0w90,501),
(0w97,0w122,501)], []), ([(0w108,0w108,503)], []), ([(0w115,0w115,404)], []), ([(0w48,0w57,505)], []), ([(0w41,0w41,389),
(0w44,0w44,406),
(0w48,0w57,506),
(0w69,0w69,507),
(0w101,0w101,507)], []), ([(0w41,0w41,389),
(0w44,0w44,406),
(0w48,0w57,506)], []), ([(0w48,0w57,508)], []), ([(0w41,0w41,389),
(0w44,0w44,406),
(0w48,0w57,508)], []), ([(0w34,0w34,405),
(0w48,0w57,509),
(0w65,0w90,509),
(0w97,0w122,509)], []), ([(0w108,0w108,511)], []), ([(0w115,0w115,396)], []), ([(0w48,0w57,513)], []), ([(0w41,0w41,389),
(0w44,0w44,398),
(0w48,0w57,514),
(0w69,0w69,515),
(0w101,0w101,515)], []), ([(0w41,0w41,389),
(0w44,0w44,398),
(0w48,0w57,514)], []), ([(0w48,0w57,516)], []), ([(0w41,0w41,389),
(0w44,0w44,398),
(0w48,0w57,516)], []), ([(0w34,0w34,397),
(0w48,0w57,517),
(0w65,0w90,517),
(0w97,0w122,517)], []), ([(0w108,0w108,519)], []), ([(0w115,0w115,387)], []), ([(0w48,0w57,521)], []), ([(0w41,0w41,389),
(0w44,0w44,390),
(0w48,0w57,522),
(0w69,0w69,523),
(0w101,0w101,523)], []), ([(0w41,0w41,389),
(0w44,0w44,390),
(0w48,0w57,522)], []), ([(0w48,0w57,524)], []), ([(0w41,0w41,389),
(0w44,0w44,390),
(0w48,0w57,524)], []), ([(0w34,0w34,388),
(0w48,0w57,525),
(0w65,0w90,525),
(0w97,0w122,525)], []), ([(0w108,0w108,527)], []), ([(0w115,0w115,379)], []), ([(0w48,0w57,529)], []), ([(0w44,0w44,381),
(0w48,0w57,530),
(0w69,0w69,531),
(0w101,0w101,531)], []), ([(0w44,0w44,381),
(0w48,0w57,530)], []), ([(0w48,0w57,532)], []), ([(0w44,0w44,381),
(0w48,0w57,532)], []), ([(0w34,0w34,380),
(0w48,0w57,533),
(0w65,0w90,533),
(0w97,0w122,533)], []), ([], [36]), ([(0w34,0w34,536),
(0w48,0w57,535),
(0w65,0w90,535),
(0w97,0w122,535)], []), ([], [11]), ([], [43])]
    fun yystreamify' p input = ULexBuffer.mkStream (p, input)

    fun yystreamifyReader' p readFn strm = let
          val s = ref strm
	  fun iter(strm, n, accum) = 
	        if n > 1024 then (String.implode (rev accum), strm)
		else (case readFn strm
		       of NONE => (String.implode (rev accum), strm)
			| SOME(c, strm') => iter (strm', n+1, c::accum))
          fun input() = let
	        val (data, strm) = iter(!s, 0, [])
	        in
	          s := strm;
		  data
	        end
          in
            yystreamify' p input
          end

    fun yystreamifyInstream' p strm = yystreamify' p (fn ()=>TextIO.input strm)

    fun innerLex 
(yystrm_, yyss_, yysm) = let
        (* current start state *)
          val yyss = ref yyss_
	  fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
          val yystrm = ref yystrm_
	  fun yysetStrm strm = yystrm := strm
	  fun yygetPos() = ULexBuffer.getpos (!yystrm)
	  fun yystreamify input = yystreamify' (yygetPos()) input
	  fun yystreamifyReader readFn strm = yystreamifyReader' (yygetPos()) readFn strm
	  fun yystreamifyInstream strm = yystreamifyInstream' (yygetPos()) strm
        (* start position of token -- can be updated via skip() *)
	  val yystartPos = ref (yygetPos())
	(* get one char of input *)
	  fun yygetc strm = (case ULexBuffer.getu strm
                of (SOME (0w10, s')) => 
		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
		      SOME (0w10, s'))
		 | x => x)
          fun yygetList getc strm = let
            val get1 = UTF8.getu getc
            fun iter (strm, accum) = 
	        (case get1 strm
	          of NONE => rev accum
	           | SOME (w, strm') => iter (strm', w::accum)
	         (* end case *))
          in
            iter (strm, [])
          end
	(* create yytext *)
	  fun yymksubstr(strm) = ULexBuffer.subtract (strm, !yystrm)
	  fun yymktext(strm) = Substring.string (yymksubstr strm)
	  fun yymkunicode(strm) = yygetList Substring.getc (yymksubstr strm)
          open UserDeclarations
          fun lex () = let
            fun yystuck (yyNO_MATCH) = raise Fail "lexer reached a stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yygetPos()
	    fun yygetlineNo strm = AntlrStreamPos.lineNo yysm (ULexBuffer.getpos strm)
	    fun yygetcolNo  strm = AntlrStreamPos.colNo  yysm (ULexBuffer.getpos strm)
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    val yylastwasnref = ref (ULexBuffer.lastWasNL (!yystrm))
	    fun continue() = let val yylastwasn = !yylastwasnref in
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_variables )
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_title )
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_comands )
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_Print )
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_SUM )
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_PROD )
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_TOSTRING )
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_endvars )
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_MEAN )
fun yyAction9 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.TIPO yytext 
      end
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.ID yytext 
      end
fun yyAction11 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction12 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.NUM (valOf (Int.fromString yytext)) 
      end
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.REAL (valOf (Real.fromString yytext)) 
      end
fun yyAction14 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.BOOL (valOf (Bool.fromString yytext)) 
      end
fun yyAction15 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction16 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.SINT (Grammar.toIntList (Grammar.tokenize yytext))
      end
fun yyAction17 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         T.SFLOAT (Grammar.toFloatList (Grammar.tokenize yytext))
      end
fun yyAction18 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.SBOOL (Grammar.toBoolList (Grammar.tokenize yytext))
      end
fun yyAction19 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.SSTRING (Grammar.tokenize yytext)
      end
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_IF )
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_THEN )
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_ELSE )
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_WHILE )
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_DO )
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_END )
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EQ )
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EEQ )
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;   T.SEMI)
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;   T.PLUS )
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;   T.MINUS )
fun yyAction31 (strm, lastMatch : yymatch) = (yystrm := strm;   T.TIMES )
fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DIV )
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LP )
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;   T.RP )
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOT )
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;   T.AND )
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;   T.OR )
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NOT )
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GEQ )
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LEQ )
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GT )
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LT )
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NEQ )
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EMPTY )
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;   T.COMMA )
fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;   continue() )
fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;
        T.KW_terminate )
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print (concat ["Unexpected character: '", yytext,
			           "'\n"]); continue()
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48])
in
  if ULexBuffer.eof(!(yystrm))
    then let
      val yycolno = ref(yygetcolNo(!(yystrm)))
      val yylineno = ref(yygetlineNo(!(yystrm)))
      in
        (case (!(yyss))
         of _ => (UserDeclarations.eof())
        (* end case *))
      end
    else (case (!(yyss))
       of INITIAL => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
      (* end case *))
end
end
            and skip() = (yystartPos := yygetPos(); 
			  yylastwasnref := ULexBuffer.lastWasNL (!yystrm);
			  continue())
	    in (continue(), (!yystartPos, yygetPos()), !yystrm, !yyss) end
          in 
            lex()
          end
  in
    type pos = AntlrStreamPos.pos
    type span = AntlrStreamPos.span
    type tok = UserDeclarations.lex_result

    datatype prestrm = STRM of ULexBuffer.stream * 
		(yystart_state * tok * span * prestrm * yystart_state) option ref
    type strm = (prestrm * yystart_state)

    fun lex sm 
(STRM (yystrm, memo), ss) = (case !memo
	  of NONE => let
	     val (tok, span, yystrm', ss') = innerLex 
(yystrm, ss, sm)
	     val strm' = STRM (yystrm', ref NONE);
	     in 
	       memo := SOME (ss, tok, span, strm', ss');
	       (tok, span, (strm', ss'))
	     end
	   | SOME (ss', tok, span, strm', ss'') => 
	       if ss = ss' then
		 (tok, span, (strm', ss''))
	       else (
		 memo := NONE;
		 lex sm 
(STRM (yystrm, memo), ss))
         (* end case *))

    fun streamify input = (STRM (yystreamify' 0 input, ref NONE), INITIAL)
    fun streamifyReader readFn strm = (STRM (yystreamifyReader' 0 readFn strm, ref NONE), 
				       INITIAL)
    fun streamifyInstream strm = (STRM (yystreamifyInstream' 0 strm, ref NONE), 
				  INITIAL)

    fun getPos (STRM (strm, _), _) = ULexBuffer.getpos strm

  end
end
