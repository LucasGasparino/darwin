structure DarwinLexer  = struct

    datatype yystart_state = 
INITIAL
    structure UserDeclarations = 
      struct

 
    structure T = DarwinTokens
    type lex_result = T.token
    fun eof() = T.EOF


      end

    local
    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of ULexBuffer.stream * action * yymatch
    withtype action = ULexBuffer.stream * yymatch -> UserDeclarations.lex_result

    val yytable : ((UTF8.wchar * UTF8.wchar * int) list * int list) Vector.vector = 
#[([(0w0,0w8,1),
(0w11,0w31,1),
(0w35,0w37,1),
(0w39,0w39,1),
(0w58,0w58,1),
(0w63,0w64,1),
(0w91,0w96,1),
(0w125,0w2147483647,1),
(0w9,0w10,2),
(0w32,0w32,2),
(0w33,0w33,3),
(0w34,0w34,4),
(0w38,0w38,5),
(0w40,0w40,6),
(0w41,0w41,7),
(0w42,0w42,8),
(0w43,0w43,9),
(0w44,0w44,10),
(0w45,0w45,11),
(0w46,0w46,12),
(0w47,0w47,13),
(0w48,0w57,14),
(0w59,0w59,15),
(0w60,0w60,16),
(0w61,0w61,17),
(0w62,0w62,18),
(0w65,0w90,19),
(0w97,0w97,19),
(0w103,0w104,19),
(0w106,0w111,19),
(0w113,0w114,19),
(0w117,0w117,19),
(0w120,0w122,19),
(0w98,0w98,20),
(0w99,0w99,21),
(0w100,0w100,22),
(0w101,0w101,23),
(0w102,0w102,24),
(0w105,0w105,25),
(0w112,0w112,26),
(0w115,0w115,27),
(0w116,0w116,28),
(0w118,0w118,29),
(0w119,0w119,30),
(0w123,0w123,31),
(0w124,0w124,32)], []), ([], [46]), ([], [44, 46]), ([(0w61,0w61,526)], [36, 46]), ([(0w65,0w90,524),
(0w97,0w122,524)], [46]), ([(0w38,0w38,523)], [46]), ([(0w34,0w34,363),
(0w48,0w57,364),
(0w102,0w102,365),
(0w116,0w116,366)], [31, 46]), ([], [32, 46]), ([], [29, 46]), ([], [27, 46]), ([], [43, 46]), ([], [28, 46]), ([], [33, 46]), ([], [30, 46]), ([(0w34,0w34,357),
(0w46,0w46,357),
(0w48,0w57,358)], [10, 46]), ([], [26, 46]), ([(0w61,0w61,356)], [46]), ([(0w61,0w61,355)], [24, 46]), ([(0w61,0w61,354)], [46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w110,61),
(0w112,0w122,61),
(0w111,0w111,349)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w110,61),
(0w112,0w122,61),
(0w111,0w111,342)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w110,61),
(0w112,0w122,61),
(0w111,0w111,341)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w107,61),
(0w109,0w109,61),
(0w111,0w122,61),
(0w108,0w108,326),
(0w110,0w110,327)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w98,0w107,61),
(0w109,0w122,61),
(0w97,0w97,322),
(0w108,0w108,323)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w101,61),
(0w103,0w109,61),
(0w111,0w122,61),
(0w102,0w102,320),
(0w110,0w110,321)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w113,61),
(0w115,0w122,61),
(0w114,0w114,314)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w98,0w115,61),
(0w118,0w122,61),
(0w97,0w97,277),
(0w116,0w116,278),
(0w117,0w117,279)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w103,61),
(0w106,0w113,61),
(0w115,0w116,61),
(0w118,0w122,61),
(0w101,0w101,74),
(0w104,0w104,75),
(0w105,0w105,76),
(0w114,0w114,77),
(0w117,0w117,78)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w98,0w122,61),
(0w97,0w97,66)], [8, 46]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w103,61),
(0w105,0w122,61),
(0w104,0w104,62)], [8, 46]), ([(0w34,0w34,34),
(0w48,0w57,35),
(0w102,0w102,36),
(0w116,0w116,37),
(0w125,0w125,38)], [46]), ([(0w124,0w124,33)], [46]), ([], [35]), ([(0w65,0w90,57),
(0w97,0w122,57)], []), ([(0w34,0w34,46),
(0w46,0w46,46),
(0w44,0w44,47),
(0w48,0w57,35),
(0w125,0w125,48)], []), ([(0w97,0w97,44)], []), ([(0w114,0w114,39)], []), ([], [14, 15, 16, 17, 42]), ([(0w117,0w117,40)], []), ([(0w101,0w101,41)], []), ([(0w44,0w44,42),
(0w125,0w125,43)], []), ([(0w102,0w102,36),
(0w116,0w116,37)], []), ([], [16]), ([(0w108,0w108,45)], []), ([(0w115,0w115,40)], []), ([(0w48,0w57,50)], []), ([(0w48,0w57,49)], []), ([], [14]), ([(0w44,0w44,47),
(0w48,0w57,49),
(0w125,0w125,48)], []), ([(0w44,0w44,51),
(0w48,0w57,52),
(0w69,0w69,53),
(0w101,0w101,53),
(0w125,0w125,54)], []), ([(0w48,0w57,56)], []), ([(0w44,0w44,51),
(0w48,0w57,52),
(0w125,0w125,54)], []), ([(0w48,0w57,55)], []), ([], [15]), ([(0w44,0w44,51),
(0w48,0w57,55),
(0w125,0w125,54)], []), ([(0w34,0w34,46),
(0w46,0w46,46),
(0w48,0w57,56)], []), ([(0w34,0w34,58),
(0w48,0w57,57),
(0w65,0w90,57),
(0w97,0w122,57)], []), ([(0w44,0w44,59),
(0w125,0w125,60)], []), ([(0w34,0w34,34)], []), ([], [17]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w104,61),
(0w106,0w122,61),
(0w105,0w105,63)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w107,61),
(0w109,0w122,61),
(0w108,0w108,64)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,65)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 21]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w113,61),
(0w115,0w122,61),
(0w114,0w114,67)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w104,61),
(0w106,0w122,61),
(0w105,0w105,68)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w98,0w122,61),
(0w97,0w97,69)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w97,61),
(0w99,0w122,61),
(0w98,0w98,70)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w107,61),
(0w109,0w122,61),
(0w108,0w108,71)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,72)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w114,61),
(0w116,0w122,61),
(0w115,0w115,73)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [0, 8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w113,61),
(0w115,0w122,61),
(0w114,0w114,270)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,268)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w115,61),
(0w117,0w122,61),
(0w116,0w116,265)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w116,61),
(0w118,0w122,61),
(0w117,0w117,263)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w111,61),
(0w113,0w122,61),
(0w112,0w112,79)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w107,61),
(0w109,0w122,61),
(0w108,0w108,80)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,81)], [8]), ([(0w40,0w40,82),
(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8]), ([(0w98,0w98,83),
(0w102,0w102,84),
(0w105,0w105,85),
(0w115,0w115,86)], []), ([(0w111,0w111,258)], []), ([(0w108,0w108,256)], []), ([(0w110,0w110,255)], []), ([(0w116,0w116,87)], []), ([(0w114,0w114,88)], []), ([(0w105,0w105,89)], []), ([(0w110,0w110,90)], []), ([(0w103,0w103,91)], []), ([(0w44,0w44,92)], []), ([(0w98,0w98,93),
(0w102,0w102,94),
(0w105,0w105,95),
(0w115,0w115,96)], []), ([(0w111,0w111,250)], []), ([(0w108,0w108,248)], []), ([(0w110,0w110,247)], []), ([(0w116,0w116,97)], []), ([(0w114,0w114,98)], []), ([(0w105,0w105,99)], []), ([(0w110,0w110,100)], []), ([(0w103,0w103,101)], []), ([(0w41,0w41,102),
(0w44,0w44,103)], []), ([], [7]), ([(0w98,0w98,104),
(0w102,0w102,105),
(0w105,0w105,106),
(0w115,0w115,107)], []), ([(0w111,0w111,242)], []), ([(0w108,0w108,240)], []), ([(0w110,0w110,239)], []), ([(0w116,0w116,108)], []), ([(0w114,0w114,109)], []), ([(0w105,0w105,110)], []), ([(0w110,0w110,111)], []), ([(0w103,0w103,112)], []), ([(0w41,0w41,102),
(0w44,0w44,113)], []), ([(0w98,0w98,114),
(0w102,0w102,115),
(0w105,0w105,116),
(0w115,0w115,117)], []), ([(0w111,0w111,234)], []), ([(0w108,0w108,232)], []), ([(0w110,0w110,231)], []), ([(0w116,0w116,118)], []), ([(0w114,0w114,119)], []), ([(0w105,0w105,120)], []), ([(0w110,0w110,121)], []), ([(0w103,0w103,122)], []), ([(0w41,0w41,102),
(0w44,0w44,123)], []), ([(0w98,0w98,124),
(0w102,0w102,125),
(0w105,0w105,126),
(0w115,0w115,127)], []), ([(0w111,0w111,226)], []), ([(0w108,0w108,224)], []), ([(0w110,0w110,223)], []), ([(0w116,0w116,128)], []), ([(0w114,0w114,129)], []), ([(0w105,0w105,130)], []), ([(0w110,0w110,131)], []), ([(0w103,0w103,132)], []), ([(0w41,0w41,102),
(0w44,0w44,133)], []), ([(0w98,0w98,134),
(0w102,0w102,135),
(0w105,0w105,136),
(0w115,0w115,137)], []), ([(0w111,0w111,218)], []), ([(0w108,0w108,216)], []), ([(0w110,0w110,215)], []), ([(0w116,0w116,138)], []), ([(0w114,0w114,139)], []), ([(0w105,0w105,140)], []), ([(0w110,0w110,141)], []), ([(0w103,0w103,142)], []), ([(0w41,0w41,102),
(0w44,0w44,143)], []), ([(0w98,0w98,144),
(0w102,0w102,145),
(0w105,0w105,146),
(0w115,0w115,147)], []), ([(0w111,0w111,210)], []), ([(0w108,0w108,208)], []), ([(0w110,0w110,207)], []), ([(0w116,0w116,148)], []), ([(0w114,0w114,149)], []), ([(0w105,0w105,150)], []), ([(0w110,0w110,151)], []), ([(0w103,0w103,152)], []), ([(0w41,0w41,102),
(0w44,0w44,153)], []), ([(0w98,0w98,154),
(0w102,0w102,155),
(0w105,0w105,156),
(0w115,0w115,157)], []), ([(0w111,0w111,202)], []), ([(0w108,0w108,200)], []), ([(0w110,0w110,199)], []), ([(0w116,0w116,158)], []), ([(0w114,0w114,159)], []), ([(0w105,0w105,160)], []), ([(0w110,0w110,161)], []), ([(0w103,0w103,162)], []), ([(0w41,0w41,102),
(0w44,0w44,163)], []), ([(0w98,0w98,164),
(0w102,0w102,165),
(0w105,0w105,166),
(0w115,0w115,167)], []), ([(0w111,0w111,194)], []), ([(0w108,0w108,192)], []), ([(0w110,0w110,191)], []), ([(0w116,0w116,168)], []), ([(0w114,0w114,169)], []), ([(0w105,0w105,170)], []), ([(0w110,0w110,171)], []), ([(0w103,0w103,172)], []), ([(0w41,0w41,102),
(0w44,0w44,173)], []), ([(0w98,0w98,174),
(0w102,0w102,175),
(0w105,0w105,176),
(0w115,0w115,177)], []), ([(0w111,0w111,186)], []), ([(0w108,0w108,184)], []), ([(0w110,0w110,183)], []), ([(0w116,0w116,178)], []), ([(0w114,0w114,179)], []), ([(0w105,0w105,180)], []), ([(0w110,0w110,181)], []), ([(0w103,0w103,182)], []), ([(0w41,0w41,102)], []), ([(0w116,0w116,182)], []), ([(0w111,0w111,185)], []), ([(0w97,0w97,183)], []), ([(0w111,0w111,187)], []), ([(0w108,0w108,188)], []), ([(0w101,0w101,189)], []), ([(0w97,0w97,190)], []), ([(0w110,0w110,182)], []), ([(0w116,0w116,172)], []), ([(0w111,0w111,193)], []), ([(0w97,0w97,191)], []), ([(0w111,0w111,195)], []), ([(0w108,0w108,196)], []), ([(0w101,0w101,197)], []), ([(0w97,0w97,198)], []), ([(0w110,0w110,172)], []), ([(0w116,0w116,162)], []), ([(0w111,0w111,201)], []), ([(0w97,0w97,199)], []), ([(0w111,0w111,203)], []), ([(0w108,0w108,204)], []), ([(0w101,0w101,205)], []), ([(0w97,0w97,206)], []), ([(0w110,0w110,162)], []), ([(0w116,0w116,152)], []), ([(0w111,0w111,209)], []), ([(0w97,0w97,207)], []), ([(0w111,0w111,211)], []), ([(0w108,0w108,212)], []), ([(0w101,0w101,213)], []), ([(0w97,0w97,214)], []), ([(0w110,0w110,152)], []), ([(0w116,0w116,142)], []), ([(0w111,0w111,217)], []), ([(0w97,0w97,215)], []), ([(0w111,0w111,219)], []), ([(0w108,0w108,220)], []), ([(0w101,0w101,221)], []), ([(0w97,0w97,222)], []), ([(0w110,0w110,142)], []), ([(0w116,0w116,132)], []), ([(0w111,0w111,225)], []), ([(0w97,0w97,223)], []), ([(0w111,0w111,227)], []), ([(0w108,0w108,228)], []), ([(0w101,0w101,229)], []), ([(0w97,0w97,230)], []), ([(0w110,0w110,132)], []), ([(0w116,0w116,122)], []), ([(0w111,0w111,233)], []), ([(0w97,0w97,231)], []), ([(0w111,0w111,235)], []), ([(0w108,0w108,236)], []), ([(0w101,0w101,237)], []), ([(0w97,0w97,238)], []), ([(0w110,0w110,122)], []), ([(0w116,0w116,112)], []), ([(0w111,0w111,241)], []), ([(0w97,0w97,239)], []), ([(0w111,0w111,243)], []), ([(0w108,0w108,244)], []), ([(0w101,0w101,245)], []), ([(0w97,0w97,246)], []), ([(0w110,0w110,112)], []), ([(0w116,0w116,101)], []), ([(0w111,0w111,249)], []), ([(0w97,0w97,247)], []), ([(0w111,0w111,251)], []), ([(0w108,0w108,252)], []), ([(0w101,0w101,253)], []), ([(0w97,0w97,254)], []), ([(0w110,0w110,101)], []), ([(0w116,0w116,91)], []), ([(0w111,0w111,257)], []), ([(0w97,0w97,255)], []), ([(0w111,0w111,259)], []), ([(0w108,0w108,260)], []), ([(0w101,0w101,261)], []), ([(0w97,0w97,262)], []), ([(0w110,0w110,91)], []), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,264)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 12]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w107,61),
(0w109,0w122,61),
(0w108,0w108,266)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,267)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [1, 8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w109,61),
(0w111,0w122,61),
(0w110,0w110,269)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 19]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w108,61),
(0w110,0w122,61),
(0w109,0w109,271)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w104,61),
(0w106,0w122,61),
(0w105,0w105,272)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w109,61),
(0w111,0w122,61),
(0w110,0w110,273)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w98,0w122,61),
(0w97,0w97,274)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w115,61),
(0w117,0w122,61),
(0w116,0w116,275)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,276)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 45]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w108,61),
(0w110,0w122,61),
(0w109,0w109,285)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w113,61),
(0w115,0w122,61),
(0w114,0w114,281)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w108,61),
(0w110,0w122,61),
(0w109,0w109,280)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [4, 8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w104,61),
(0w106,0w122,61),
(0w105,0w105,282)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w109,61),
(0w111,0w122,61),
(0w110,0w110,283)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w102,61),
(0w104,0w122,61),
(0w103,0w103,284)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [7, 8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w111,61),
(0w113,0w122,61),
(0w112,0w112,286)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w107,61),
(0w109,0w122,61),
(0w108,0w108,287)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,288)], [8]), ([(0w32,0w32,289),
(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8]), ([(0w111,0w111,290)], []), ([(0w102,0w102,291)], []), ([(0w32,0w32,292)], []), ([(0w98,0w98,293),
(0w102,0w102,294),
(0w105,0w105,295),
(0w115,0w115,296),
(0w116,0w116,297)], []), ([(0w111,0w111,309)], []), ([(0w108,0w108,307)], []), ([(0w110,0w110,306)], []), ([(0w116,0w116,302)], []), ([(0w117,0w117,298)], []), ([(0w112,0w112,299)], []), ([(0w108,0w108,300)], []), ([(0w101,0w101,301)], []), ([(0w40,0w40,82)], []), ([(0w114,0w114,303)], []), ([(0w105,0w105,304)], []), ([(0w110,0w110,305)], []), ([(0w103,0w103,102)], []), ([(0w116,0w116,102)], []), ([(0w111,0w111,308)], []), ([(0w97,0w97,306)], []), ([(0w111,0w111,310)], []), ([(0w108,0w108,311)], []), ([(0w101,0w101,312)], []), ([(0w97,0w97,313)], []), ([(0w110,0w110,102)], []), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w104,61),
(0w106,0w110,61),
(0w112,0w122,61),
(0w105,0w105,315),
(0w111,0w111,316)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w109,61),
(0w111,0w122,61),
(0w110,0w110,318)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w99,61),
(0w101,0w122,61),
(0w100,0w100,317)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [5, 8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w115,61),
(0w117,0w122,61),
(0w116,0w116,319)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [3, 8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 18]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w115,61),
(0w117,0w122,61),
(0w116,0w116,284)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w107,61),
(0w109,0w122,61),
(0w108,0w108,325)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w110,61),
(0w112,0w122,61),
(0w111,0w111,324)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w98,0w122,61),
(0w97,0w97,321)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w114,61),
(0w116,0w122,61),
(0w115,0w115,263)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w114,61),
(0w116,0w122,61),
(0w115,0w115,339)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w99,61),
(0w101,0w122,61),
(0w100,0w100,328)], [8]), ([(0w32,0w32,329),
(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 23]), ([(0w118,0w118,330)], []), ([(0w97,0w97,331)], []), ([(0w114,0w114,332)], []), ([(0w105,0w105,333)], []), ([(0w97,0w97,334)], []), ([(0w98,0w98,335)], []), ([(0w108,0w108,336)], []), ([(0w101,0w101,337)], []), ([(0w115,0w115,338)], []), ([], [6]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,340)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 20]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [8, 22]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w108,61),
(0w110,0w122,61),
(0w109,0w109,343)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w108,61),
(0w110,0w122,61),
(0w109,0w109,344)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w98,0w122,61),
(0w97,0w97,345)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w109,61),
(0w111,0w122,61),
(0w110,0w110,346)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w99,61),
(0w101,0w122,61),
(0w100,0w100,347)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w114,61),
(0w116,0w122,61),
(0w115,0w115,348)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], [2, 8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w110,61),
(0w112,0w122,61),
(0w111,0w111,350)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w107,61),
(0w109,0w122,61),
(0w108,0w108,351)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w100,61),
(0w102,0w122,61),
(0w101,0w101,352)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w98,0w122,61),
(0w97,0w97,353)], [8]), ([(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w109,61),
(0w111,0w122,61),
(0w110,0w110,284)], [8]), ([], [37, 39]), ([], [25]), ([], [38, 40]), ([(0w48,0w57,359)], []), ([(0w34,0w34,357),
(0w46,0w46,357),
(0w48,0w57,358)], [10]), ([(0w48,0w57,360),
(0w69,0w69,361),
(0w101,0w101,361)], [11]), ([(0w48,0w57,360)], [11]), ([(0w48,0w57,362)], []), ([(0w48,0w57,362)], [11]), ([(0w65,0w90,522),
(0w97,0w122,522)], []), ([(0w34,0w34,517),
(0w46,0w46,517),
(0w44,0w44,370),
(0w48,0w57,364)], []), ([(0w97,0w97,515)], []), ([(0w114,0w114,367)], []), ([(0w117,0w117,368)], []), ([(0w101,0w101,369)], []), ([(0w44,0w44,370)], []), ([(0w34,0w34,371),
(0w48,0w57,372),
(0w102,0w102,373),
(0w116,0w116,374)], []), ([(0w65,0w90,514),
(0w97,0w122,514)], []), ([(0w34,0w34,509),
(0w46,0w46,509),
(0w41,0w41,378),
(0w44,0w44,379),
(0w48,0w57,372)], []), ([(0w97,0w97,507)], []), ([(0w114,0w114,375)], []), ([(0w117,0w117,376)], []), ([(0w101,0w101,377)], []), ([(0w41,0w41,378),
(0w44,0w44,379)], []), ([], [13]), ([(0w34,0w34,380),
(0w48,0w57,381),
(0w102,0w102,382),
(0w116,0w116,383)], []), ([(0w65,0w90,506),
(0w97,0w122,506)], []), ([(0w34,0w34,501),
(0w46,0w46,501),
(0w41,0w41,378),
(0w44,0w44,387),
(0w48,0w57,381)], []), ([(0w97,0w97,499)], []), ([(0w114,0w114,384)], []), ([(0w117,0w117,385)], []), ([(0w101,0w101,386)], []), ([(0w41,0w41,378),
(0w44,0w44,387)], []), ([(0w34,0w34,388),
(0w48,0w57,389),
(0w102,0w102,390),
(0w116,0w116,391)], []), ([(0w65,0w90,498),
(0w97,0w122,498)], []), ([(0w34,0w34,493),
(0w46,0w46,493),
(0w41,0w41,378),
(0w44,0w44,395),
(0w48,0w57,389)], []), ([(0w97,0w97,491)], []), ([(0w114,0w114,392)], []), ([(0w117,0w117,393)], []), ([(0w101,0w101,394)], []), ([(0w41,0w41,378),
(0w44,0w44,395)], []), ([(0w34,0w34,396),
(0w48,0w57,397),
(0w102,0w102,398),
(0w116,0w116,399)], []), ([(0w65,0w90,490),
(0w97,0w122,490)], []), ([(0w34,0w34,485),
(0w46,0w46,485),
(0w41,0w41,378),
(0w44,0w44,403),
(0w48,0w57,397)], []), ([(0w97,0w97,483)], []), ([(0w114,0w114,400)], []), ([(0w117,0w117,401)], []), ([(0w101,0w101,402)], []), ([(0w41,0w41,378),
(0w44,0w44,403)], []), ([(0w34,0w34,404),
(0w48,0w57,405),
(0w102,0w102,406),
(0w116,0w116,407)], []), ([(0w65,0w90,482),
(0w97,0w122,482)], []), ([(0w34,0w34,477),
(0w46,0w46,477),
(0w41,0w41,378),
(0w44,0w44,411),
(0w48,0w57,405)], []), ([(0w97,0w97,475)], []), ([(0w114,0w114,408)], []), ([(0w117,0w117,409)], []), ([(0w101,0w101,410)], []), ([(0w41,0w41,378),
(0w44,0w44,411)], []), ([(0w34,0w34,412),
(0w48,0w57,413),
(0w102,0w102,414),
(0w116,0w116,415)], []), ([(0w65,0w90,474),
(0w97,0w122,474)], []), ([(0w34,0w34,469),
(0w46,0w46,469),
(0w41,0w41,378),
(0w44,0w44,419),
(0w48,0w57,413)], []), ([(0w97,0w97,467)], []), ([(0w114,0w114,416)], []), ([(0w117,0w117,417)], []), ([(0w101,0w101,418)], []), ([(0w41,0w41,378),
(0w44,0w44,419)], []), ([(0w34,0w34,420),
(0w48,0w57,421),
(0w102,0w102,422),
(0w116,0w116,423)], []), ([(0w65,0w90,466),
(0w97,0w122,466)], []), ([(0w34,0w34,461),
(0w46,0w46,461),
(0w41,0w41,378),
(0w44,0w44,427),
(0w48,0w57,421)], []), ([(0w97,0w97,459)], []), ([(0w114,0w114,424)], []), ([(0w117,0w117,425)], []), ([(0w101,0w101,426)], []), ([(0w41,0w41,378),
(0w44,0w44,427)], []), ([(0w34,0w34,428),
(0w48,0w57,429),
(0w102,0w102,430),
(0w116,0w116,431)], []), ([(0w65,0w90,458),
(0w97,0w122,458)], []), ([(0w34,0w34,453),
(0w46,0w46,453),
(0w41,0w41,378),
(0w44,0w44,435),
(0w48,0w57,429)], []), ([(0w97,0w97,451)], []), ([(0w114,0w114,432)], []), ([(0w117,0w117,433)], []), ([(0w101,0w101,434)], []), ([(0w41,0w41,378),
(0w44,0w44,435)], []), ([(0w34,0w34,436),
(0w48,0w57,437),
(0w102,0w102,438),
(0w116,0w116,439)], []), ([(0w65,0w90,450),
(0w97,0w122,450)], []), ([(0w34,0w34,445),
(0w46,0w46,445),
(0w41,0w41,378),
(0w48,0w57,437)], []), ([(0w97,0w97,443)], []), ([(0w114,0w114,440)], []), ([(0w117,0w117,441)], []), ([(0w101,0w101,442)], []), ([(0w41,0w41,378)], []), ([(0w108,0w108,444)], []), ([(0w115,0w115,441)], []), ([(0w48,0w57,446)], []), ([(0w41,0w41,378),
(0w48,0w57,447),
(0w69,0w69,448),
(0w101,0w101,448)], []), ([(0w41,0w41,378),
(0w48,0w57,447)], []), ([(0w48,0w57,449)], []), ([(0w41,0w41,378),
(0w48,0w57,449)], []), ([(0w34,0w34,442),
(0w48,0w57,450),
(0w65,0w90,450),
(0w97,0w122,450)], []), ([(0w108,0w108,452)], []), ([(0w115,0w115,433)], []), ([(0w48,0w57,454)], []), ([(0w41,0w41,378),
(0w44,0w44,435),
(0w48,0w57,455),
(0w69,0w69,456),
(0w101,0w101,456)], []), ([(0w41,0w41,378),
(0w44,0w44,435),
(0w48,0w57,455)], []), ([(0w48,0w57,457)], []), ([(0w41,0w41,378),
(0w44,0w44,435),
(0w48,0w57,457)], []), ([(0w34,0w34,434),
(0w48,0w57,458),
(0w65,0w90,458),
(0w97,0w122,458)], []), ([(0w108,0w108,460)], []), ([(0w115,0w115,425)], []), ([(0w48,0w57,462)], []), ([(0w41,0w41,378),
(0w44,0w44,427),
(0w48,0w57,463),
(0w69,0w69,464),
(0w101,0w101,464)], []), ([(0w41,0w41,378),
(0w44,0w44,427),
(0w48,0w57,463)], []), ([(0w48,0w57,465)], []), ([(0w41,0w41,378),
(0w44,0w44,427),
(0w48,0w57,465)], []), ([(0w34,0w34,426),
(0w48,0w57,466),
(0w65,0w90,466),
(0w97,0w122,466)], []), ([(0w108,0w108,468)], []), ([(0w115,0w115,417)], []), ([(0w48,0w57,470)], []), ([(0w41,0w41,378),
(0w44,0w44,419),
(0w48,0w57,471),
(0w69,0w69,472),
(0w101,0w101,472)], []), ([(0w41,0w41,378),
(0w44,0w44,419),
(0w48,0w57,471)], []), ([(0w48,0w57,473)], []), ([(0w41,0w41,378),
(0w44,0w44,419),
(0w48,0w57,473)], []), ([(0w34,0w34,418),
(0w48,0w57,474),
(0w65,0w90,474),
(0w97,0w122,474)], []), ([(0w108,0w108,476)], []), ([(0w115,0w115,409)], []), ([(0w48,0w57,478)], []), ([(0w41,0w41,378),
(0w44,0w44,411),
(0w48,0w57,479),
(0w69,0w69,480),
(0w101,0w101,480)], []), ([(0w41,0w41,378),
(0w44,0w44,411),
(0w48,0w57,479)], []), ([(0w48,0w57,481)], []), ([(0w41,0w41,378),
(0w44,0w44,411),
(0w48,0w57,481)], []), ([(0w34,0w34,410),
(0w48,0w57,482),
(0w65,0w90,482),
(0w97,0w122,482)], []), ([(0w108,0w108,484)], []), ([(0w115,0w115,401)], []), ([(0w48,0w57,486)], []), ([(0w41,0w41,378),
(0w44,0w44,403),
(0w48,0w57,487),
(0w69,0w69,488),
(0w101,0w101,488)], []), ([(0w41,0w41,378),
(0w44,0w44,403),
(0w48,0w57,487)], []), ([(0w48,0w57,489)], []), ([(0w41,0w41,378),
(0w44,0w44,403),
(0w48,0w57,489)], []), ([(0w34,0w34,402),
(0w48,0w57,490),
(0w65,0w90,490),
(0w97,0w122,490)], []), ([(0w108,0w108,492)], []), ([(0w115,0w115,393)], []), ([(0w48,0w57,494)], []), ([(0w41,0w41,378),
(0w44,0w44,395),
(0w48,0w57,495),
(0w69,0w69,496),
(0w101,0w101,496)], []), ([(0w41,0w41,378),
(0w44,0w44,395),
(0w48,0w57,495)], []), ([(0w48,0w57,497)], []), ([(0w41,0w41,378),
(0w44,0w44,395),
(0w48,0w57,497)], []), ([(0w34,0w34,394),
(0w48,0w57,498),
(0w65,0w90,498),
(0w97,0w122,498)], []), ([(0w108,0w108,500)], []), ([(0w115,0w115,385)], []), ([(0w48,0w57,502)], []), ([(0w41,0w41,378),
(0w44,0w44,387),
(0w48,0w57,503),
(0w69,0w69,504),
(0w101,0w101,504)], []), ([(0w41,0w41,378),
(0w44,0w44,387),
(0w48,0w57,503)], []), ([(0w48,0w57,505)], []), ([(0w41,0w41,378),
(0w44,0w44,387),
(0w48,0w57,505)], []), ([(0w34,0w34,386),
(0w48,0w57,506),
(0w65,0w90,506),
(0w97,0w122,506)], []), ([(0w108,0w108,508)], []), ([(0w115,0w115,376)], []), ([(0w48,0w57,510)], []), ([(0w41,0w41,378),
(0w44,0w44,379),
(0w48,0w57,511),
(0w69,0w69,512),
(0w101,0w101,512)], []), ([(0w41,0w41,378),
(0w44,0w44,379),
(0w48,0w57,511)], []), ([(0w48,0w57,513)], []), ([(0w41,0w41,378),
(0w44,0w44,379),
(0w48,0w57,513)], []), ([(0w34,0w34,377),
(0w48,0w57,514),
(0w65,0w90,514),
(0w97,0w122,514)], []), ([(0w108,0w108,516)], []), ([(0w115,0w115,368)], []), ([(0w48,0w57,518)], []), ([(0w44,0w44,370),
(0w48,0w57,519),
(0w69,0w69,520),
(0w101,0w101,520)], []), ([(0w44,0w44,370),
(0w48,0w57,519)], []), ([(0w48,0w57,521)], []), ([(0w44,0w44,370),
(0w48,0w57,521)], []), ([(0w34,0w34,369),
(0w48,0w57,522),
(0w65,0w90,522),
(0w97,0w122,522)], []), ([], [34]), ([(0w34,0w34,525),
(0w48,0w57,524),
(0w65,0w90,524),
(0w97,0w122,524)], []), ([], [9]), ([], [41])]
    fun yystreamify' p input = ULexBuffer.mkStream (p, input)

    fun yystreamifyReader' p readFn strm = let
          val s = ref strm
	  fun iter(strm, n, accum) = 
	        if n > 1024 then (String.implode (rev accum), strm)
		else (case readFn strm
		       of NONE => (String.implode (rev accum), strm)
			| SOME(c, strm') => iter (strm', n+1, c::accum))
          fun input() = let
	        val (data, strm) = iter(!s, 0, [])
	        in
	          s := strm;
		  data
	        end
          in
            yystreamify' p input
          end

    fun yystreamifyInstream' p strm = yystreamify' p (fn ()=>TextIO.input strm)

    fun innerLex 
(yystrm_, yyss_, yysm) = let
        (* current start state *)
          val yyss = ref yyss_
	  fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
          val yystrm = ref yystrm_
	  fun yysetStrm strm = yystrm := strm
	  fun yygetPos() = ULexBuffer.getpos (!yystrm)
	  fun yystreamify input = yystreamify' (yygetPos()) input
	  fun yystreamifyReader readFn strm = yystreamifyReader' (yygetPos()) readFn strm
	  fun yystreamifyInstream strm = yystreamifyInstream' (yygetPos()) strm
        (* start position of token -- can be updated via skip() *)
	  val yystartPos = ref (yygetPos())
	(* get one char of input *)
	  fun yygetc strm = (case ULexBuffer.getu strm
                of (SOME (0w10, s')) => 
		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
		      SOME (0w10, s'))
		 | x => x)
          fun yygetList getc strm = let
            val get1 = UTF8.getu getc
            fun iter (strm, accum) = 
	        (case get1 strm
	          of NONE => rev accum
	           | SOME (w, strm') => iter (strm', w::accum)
	         (* end case *))
          in
            iter (strm, [])
          end
	(* create yytext *)
	  fun yymksubstr(strm) = ULexBuffer.subtract (strm, !yystrm)
	  fun yymktext(strm) = Substring.string (yymksubstr strm)
	  fun yymkunicode(strm) = yygetList Substring.getc (yymksubstr strm)
          open UserDeclarations
          fun lex () = let
            fun yystuck (yyNO_MATCH) = raise Fail "lexer reached a stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yygetPos()
	    fun yygetlineNo strm = AntlrStreamPos.lineNo yysm (ULexBuffer.getpos strm)
	    fun yygetcolNo  strm = AntlrStreamPos.colNo  yysm (ULexBuffer.getpos strm)
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    val yylastwasnref = ref (ULexBuffer.lastWasNL (!yystrm))
	    fun continue() = let val yylastwasn = !yylastwasnref in
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_variables )
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_title )
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_comands )
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_Print )
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_SUM )
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_PROD )
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_endvars )
fun yyAction7 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.TIPO yytext 
      end
fun yyAction8 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.ID yytext 
      end
fun yyAction9 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.NUM (valOf (Int.fromString yytext)) 
      end
fun yyAction11 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.REAL (valOf (Real.fromString yytext)) 
      end
fun yyAction12 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.BOOL (valOf (Bool.fromString yytext)) 
      end
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction14 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.SINT (Grammar.toIntList (Grammar.tokenize yytext))
      end
fun yyAction15 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         T.SFLOAT (Grammar.toFloatList (Grammar.tokenize yytext))
      end
fun yyAction16 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.SBOOL (Grammar.toBoolList (Grammar.tokenize yytext))
      end
fun yyAction17 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.SSTRING (Grammar.tokenize yytext)
      end
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_IF )
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_THEN )
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_ELSE )
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_WHILE )
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_DO )
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_END )
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EQ )
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EEQ )
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;   T.SEMI)
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;   T.PLUS )
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;   T.MINUS )
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;   T.TIMES )
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DIV )
fun yyAction31 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LP )
fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;   T.RP )
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOT )
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;   T.AND )
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;   T.OR )
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NOT )
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GEQ )
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LEQ )
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GT )
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LT )
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NEQ )
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EMPTY )
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;   T.COMMA )
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;   continue() )
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;
        T.KW_terminate )
fun yyAction46 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print (concat ["Unexpected character: '", yytext,
			           "'\n"]); continue()
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46])
in
  if ULexBuffer.eof(!(yystrm))
    then let
      val yycolno = ref(yygetcolNo(!(yystrm)))
      val yylineno = ref(yygetlineNo(!(yystrm)))
      in
        (case (!(yyss))
         of _ => (UserDeclarations.eof())
        (* end case *))
      end
    else (case (!(yyss))
       of INITIAL => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
      (* end case *))
end
end
            and skip() = (yystartPos := yygetPos(); 
			  yylastwasnref := ULexBuffer.lastWasNL (!yystrm);
			  continue())
	    in (continue(), (!yystartPos, yygetPos()), !yystrm, !yyss) end
          in 
            lex()
          end
  in
    type pos = AntlrStreamPos.pos
    type span = AntlrStreamPos.span
    type tok = UserDeclarations.lex_result

    datatype prestrm = STRM of ULexBuffer.stream * 
		(yystart_state * tok * span * prestrm * yystart_state) option ref
    type strm = (prestrm * yystart_state)

    fun lex sm 
(STRM (yystrm, memo), ss) = (case !memo
	  of NONE => let
	     val (tok, span, yystrm', ss') = innerLex 
(yystrm, ss, sm)
	     val strm' = STRM (yystrm', ref NONE);
	     in 
	       memo := SOME (ss, tok, span, strm', ss');
	       (tok, span, (strm', ss'))
	     end
	   | SOME (ss', tok, span, strm', ss'') => 
	       if ss = ss' then
		 (tok, span, (strm', ss''))
	       else (
		 memo := NONE;
		 lex sm 
(STRM (yystrm, memo), ss))
         (* end case *))

    fun streamify input = (STRM (yystreamify' 0 input, ref NONE), INITIAL)
    fun streamifyReader readFn strm = (STRM (yystreamifyReader' 0 readFn strm, ref NONE), 
				       INITIAL)
    fun streamifyInstream strm = (STRM (yystreamifyInstream' 0 strm, ref NONE), 
				  INITIAL)

    fun getPos (STRM (strm, _), _) = ULexBuffer.getpos strm

  end
end
