structure DarwinLexer  = struct

    datatype yystart_state = 
INITIAL
    structure UserDeclarations = 
      struct

 
    structure T = DarwinTokens
    type lex_result = T.token
    fun eof() = T.EOF


      end

    local
    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of ULexBuffer.stream * action * yymatch
    withtype action = ULexBuffer.stream * yymatch -> UserDeclarations.lex_result

    val yytable : ((UTF8.wchar * UTF8.wchar * int) list * int list) Vector.vector = 
#[([(0w0,0w8,1),
(0w11,0w31,1),
(0w35,0w37,1),
(0w39,0w39,1),
(0w58,0w58,1),
(0w63,0w64,1),
(0w91,0w96,1),
(0w125,0w2147483647,1),
(0w9,0w10,2),
(0w32,0w32,2),
(0w33,0w33,3),
(0w34,0w34,4),
(0w38,0w38,5),
(0w40,0w40,6),
(0w41,0w41,7),
(0w42,0w42,8),
(0w43,0w43,9),
(0w44,0w44,10),
(0w45,0w45,11),
(0w46,0w46,12),
(0w47,0w47,13),
(0w48,0w57,14),
(0w59,0w59,15),
(0w60,0w60,16),
(0w61,0w61,17),
(0w62,0w62,18),
(0w65,0w90,19),
(0w97,0w97,19),
(0w103,0w104,19),
(0w106,0w107,19),
(0w109,0w111,19),
(0w113,0w114,19),
(0w117,0w117,19),
(0w120,0w122,19),
(0w98,0w98,20),
(0w99,0w99,21),
(0w100,0w100,22),
(0w101,0w101,23),
(0w102,0w102,24),
(0w105,0w105,25),
(0w108,0w108,26),
(0w112,0w112,27),
(0w115,0w115,28),
(0w116,0w116,29),
(0w118,0w118,30),
(0w119,0w119,31),
(0w123,0w123,32),
(0w124,0w124,33)], []), ([], [48]), ([], [46, 48]), ([(0w61,0w61,530)], [38, 48]), ([(0w65,0w90,528),
(0w97,0w122,528)], [48]), ([(0w38,0w38,527)], [48]), ([(0w34,0w34,367),
(0w48,0w57,368),
(0w102,0w102,369),
(0w116,0w116,370)], [33, 48]), ([], [34, 48]), ([], [31, 48]), ([], [29, 48]), ([], [45, 48]), ([], [30, 48]), ([], [35, 48]), ([], [32, 48]), ([(0w34,0w34,361),
(0w46,0w46,361),
(0w48,0w57,362)], [12, 48]), ([], [28, 48]), ([(0w61,0w61,360)], [48]), ([(0w61,0w61,359)], [26, 48]), ([(0w61,0w61,358)], [48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,353)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,346)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,345)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w109,62),
(0w111,0w122,62),
(0w108,0w108,330),
(0w110,0w110,331)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w107,62),
(0w109,0w122,62),
(0w97,0w97,325),
(0w108,0w108,326)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w101,62),
(0w103,0w109,62),
(0w111,0w122,62),
(0w102,0w102,323),
(0w110,0w110,324)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,321)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,315)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w115,62),
(0w118,0w122,62),
(0w97,0w97,278),
(0w116,0w116,279),
(0w117,0w117,280)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w103,62),
(0w106,0w113,62),
(0w115,0w116,62),
(0w118,0w122,62),
(0w101,0w101,75),
(0w104,0w104,76),
(0w105,0w105,77),
(0w114,0w114,78),
(0w117,0w117,79)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,67)], [10, 48]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w103,62),
(0w105,0w122,62),
(0w104,0w104,63)], [10, 48]), ([(0w34,0w34,35),
(0w48,0w57,36),
(0w102,0w102,37),
(0w116,0w116,38),
(0w125,0w125,39)], [48]), ([(0w124,0w124,34)], [48]), ([], [37]), ([(0w65,0w90,58),
(0w97,0w122,58)], []), ([(0w34,0w34,47),
(0w46,0w46,47),
(0w44,0w44,48),
(0w48,0w57,36),
(0w125,0w125,49)], []), ([(0w97,0w97,45)], []), ([(0w114,0w114,40)], []), ([], [16, 17, 18, 19, 44]), ([(0w117,0w117,41)], []), ([(0w101,0w101,42)], []), ([(0w44,0w44,43),
(0w125,0w125,44)], []), ([(0w102,0w102,37),
(0w116,0w116,38)], []), ([], [18]), ([(0w108,0w108,46)], []), ([(0w115,0w115,41)], []), ([(0w48,0w57,51)], []), ([(0w48,0w57,50)], []), ([], [16]), ([(0w44,0w44,48),
(0w48,0w57,50),
(0w125,0w125,49)], []), ([(0w44,0w44,52),
(0w48,0w57,53),
(0w69,0w69,54),
(0w101,0w101,54),
(0w125,0w125,55)], []), ([(0w48,0w57,57)], []), ([(0w44,0w44,52),
(0w48,0w57,53),
(0w125,0w125,55)], []), ([(0w48,0w57,56)], []), ([], [17]), ([(0w44,0w44,52),
(0w48,0w57,56),
(0w125,0w125,55)], []), ([(0w34,0w34,47),
(0w46,0w46,47),
(0w48,0w57,57)], []), ([(0w34,0w34,59),
(0w48,0w57,58),
(0w65,0w90,58),
(0w97,0w122,58)], []), ([(0w44,0w44,60),
(0w125,0w125,61)], []), ([(0w34,0w34,35)], []), ([], [19]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,64)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,65)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,66)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 23]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,68)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,69)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,70)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w97,62),
(0w99,0w122,62),
(0w98,0w98,71)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,72)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,73)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w114,62),
(0w116,0w122,62),
(0w115,0w115,74)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [1, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,271)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,269)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,266)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w116,62),
(0w118,0w122,62),
(0w117,0w117,264)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w111,62),
(0w113,0w122,62),
(0w112,0w112,80)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,81)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,82)], [10]), ([(0w40,0w40,83),
(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10]), ([(0w98,0w98,84),
(0w102,0w102,85),
(0w105,0w105,86),
(0w115,0w115,87)], []), ([(0w111,0w111,259)], []), ([(0w108,0w108,257)], []), ([(0w110,0w110,256)], []), ([(0w116,0w116,88)], []), ([(0w114,0w114,89)], []), ([(0w105,0w105,90)], []), ([(0w110,0w110,91)], []), ([(0w103,0w103,92)], []), ([(0w44,0w44,93)], []), ([(0w98,0w98,94),
(0w102,0w102,95),
(0w105,0w105,96),
(0w115,0w115,97)], []), ([(0w111,0w111,251)], []), ([(0w108,0w108,249)], []), ([(0w110,0w110,248)], []), ([(0w116,0w116,98)], []), ([(0w114,0w114,99)], []), ([(0w105,0w105,100)], []), ([(0w110,0w110,101)], []), ([(0w103,0w103,102)], []), ([(0w41,0w41,103),
(0w44,0w44,104)], []), ([], [9]), ([(0w98,0w98,105),
(0w102,0w102,106),
(0w105,0w105,107),
(0w115,0w115,108)], []), ([(0w111,0w111,243)], []), ([(0w108,0w108,241)], []), ([(0w110,0w110,240)], []), ([(0w116,0w116,109)], []), ([(0w114,0w114,110)], []), ([(0w105,0w105,111)], []), ([(0w110,0w110,112)], []), ([(0w103,0w103,113)], []), ([(0w41,0w41,103),
(0w44,0w44,114)], []), ([(0w98,0w98,115),
(0w102,0w102,116),
(0w105,0w105,117),
(0w115,0w115,118)], []), ([(0w111,0w111,235)], []), ([(0w108,0w108,233)], []), ([(0w110,0w110,232)], []), ([(0w116,0w116,119)], []), ([(0w114,0w114,120)], []), ([(0w105,0w105,121)], []), ([(0w110,0w110,122)], []), ([(0w103,0w103,123)], []), ([(0w41,0w41,103),
(0w44,0w44,124)], []), ([(0w98,0w98,125),
(0w102,0w102,126),
(0w105,0w105,127),
(0w115,0w115,128)], []), ([(0w111,0w111,227)], []), ([(0w108,0w108,225)], []), ([(0w110,0w110,224)], []), ([(0w116,0w116,129)], []), ([(0w114,0w114,130)], []), ([(0w105,0w105,131)], []), ([(0w110,0w110,132)], []), ([(0w103,0w103,133)], []), ([(0w41,0w41,103),
(0w44,0w44,134)], []), ([(0w98,0w98,135),
(0w102,0w102,136),
(0w105,0w105,137),
(0w115,0w115,138)], []), ([(0w111,0w111,219)], []), ([(0w108,0w108,217)], []), ([(0w110,0w110,216)], []), ([(0w116,0w116,139)], []), ([(0w114,0w114,140)], []), ([(0w105,0w105,141)], []), ([(0w110,0w110,142)], []), ([(0w103,0w103,143)], []), ([(0w41,0w41,103),
(0w44,0w44,144)], []), ([(0w98,0w98,145),
(0w102,0w102,146),
(0w105,0w105,147),
(0w115,0w115,148)], []), ([(0w111,0w111,211)], []), ([(0w108,0w108,209)], []), ([(0w110,0w110,208)], []), ([(0w116,0w116,149)], []), ([(0w114,0w114,150)], []), ([(0w105,0w105,151)], []), ([(0w110,0w110,152)], []), ([(0w103,0w103,153)], []), ([(0w41,0w41,103),
(0w44,0w44,154)], []), ([(0w98,0w98,155),
(0w102,0w102,156),
(0w105,0w105,157),
(0w115,0w115,158)], []), ([(0w111,0w111,203)], []), ([(0w108,0w108,201)], []), ([(0w110,0w110,200)], []), ([(0w116,0w116,159)], []), ([(0w114,0w114,160)], []), ([(0w105,0w105,161)], []), ([(0w110,0w110,162)], []), ([(0w103,0w103,163)], []), ([(0w41,0w41,103),
(0w44,0w44,164)], []), ([(0w98,0w98,165),
(0w102,0w102,166),
(0w105,0w105,167),
(0w115,0w115,168)], []), ([(0w111,0w111,195)], []), ([(0w108,0w108,193)], []), ([(0w110,0w110,192)], []), ([(0w116,0w116,169)], []), ([(0w114,0w114,170)], []), ([(0w105,0w105,171)], []), ([(0w110,0w110,172)], []), ([(0w103,0w103,173)], []), ([(0w41,0w41,103),
(0w44,0w44,174)], []), ([(0w98,0w98,175),
(0w102,0w102,176),
(0w105,0w105,177),
(0w115,0w115,178)], []), ([(0w111,0w111,187)], []), ([(0w108,0w108,185)], []), ([(0w110,0w110,184)], []), ([(0w116,0w116,179)], []), ([(0w114,0w114,180)], []), ([(0w105,0w105,181)], []), ([(0w110,0w110,182)], []), ([(0w103,0w103,183)], []), ([(0w41,0w41,103)], []), ([(0w116,0w116,183)], []), ([(0w111,0w111,186)], []), ([(0w97,0w97,184)], []), ([(0w111,0w111,188)], []), ([(0w108,0w108,189)], []), ([(0w101,0w101,190)], []), ([(0w97,0w97,191)], []), ([(0w110,0w110,183)], []), ([(0w116,0w116,173)], []), ([(0w111,0w111,194)], []), ([(0w97,0w97,192)], []), ([(0w111,0w111,196)], []), ([(0w108,0w108,197)], []), ([(0w101,0w101,198)], []), ([(0w97,0w97,199)], []), ([(0w110,0w110,173)], []), ([(0w116,0w116,163)], []), ([(0w111,0w111,202)], []), ([(0w97,0w97,200)], []), ([(0w111,0w111,204)], []), ([(0w108,0w108,205)], []), ([(0w101,0w101,206)], []), ([(0w97,0w97,207)], []), ([(0w110,0w110,163)], []), ([(0w116,0w116,153)], []), ([(0w111,0w111,210)], []), ([(0w97,0w97,208)], []), ([(0w111,0w111,212)], []), ([(0w108,0w108,213)], []), ([(0w101,0w101,214)], []), ([(0w97,0w97,215)], []), ([(0w110,0w110,153)], []), ([(0w116,0w116,143)], []), ([(0w111,0w111,218)], []), ([(0w97,0w97,216)], []), ([(0w111,0w111,220)], []), ([(0w108,0w108,221)], []), ([(0w101,0w101,222)], []), ([(0w97,0w97,223)], []), ([(0w110,0w110,143)], []), ([(0w116,0w116,133)], []), ([(0w111,0w111,226)], []), ([(0w97,0w97,224)], []), ([(0w111,0w111,228)], []), ([(0w108,0w108,229)], []), ([(0w101,0w101,230)], []), ([(0w97,0w97,231)], []), ([(0w110,0w110,133)], []), ([(0w116,0w116,123)], []), ([(0w111,0w111,234)], []), ([(0w97,0w97,232)], []), ([(0w111,0w111,236)], []), ([(0w108,0w108,237)], []), ([(0w101,0w101,238)], []), ([(0w97,0w97,239)], []), ([(0w110,0w110,123)], []), ([(0w116,0w116,113)], []), ([(0w111,0w111,242)], []), ([(0w97,0w97,240)], []), ([(0w111,0w111,244)], []), ([(0w108,0w108,245)], []), ([(0w101,0w101,246)], []), ([(0w97,0w97,247)], []), ([(0w110,0w110,113)], []), ([(0w116,0w116,102)], []), ([(0w111,0w111,250)], []), ([(0w97,0w97,248)], []), ([(0w111,0w111,252)], []), ([(0w108,0w108,253)], []), ([(0w101,0w101,254)], []), ([(0w97,0w97,255)], []), ([(0w110,0w110,102)], []), ([(0w116,0w116,92)], []), ([(0w111,0w111,258)], []), ([(0w97,0w97,256)], []), ([(0w111,0w111,260)], []), ([(0w108,0w108,261)], []), ([(0w101,0w101,262)], []), ([(0w97,0w97,263)], []), ([(0w110,0w110,92)], []), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,265)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 14]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,267)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,268)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [2, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,270)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 21]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,272)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,273)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,274)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,275)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,276)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,277)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 47]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,286)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w113,62),
(0w115,0w122,62),
(0w114,0w114,282)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,281)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [5, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w122,62),
(0w105,0w105,283)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,284)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w102,62),
(0w104,0w122,62),
(0w103,0w103,285)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [9, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w111,62),
(0w113,0w122,62),
(0w112,0w112,287)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,288)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,289)], [10]), ([(0w32,0w32,290),
(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10]), ([(0w111,0w111,291)], []), ([(0w102,0w102,292)], []), ([(0w32,0w32,293)], []), ([(0w98,0w98,294),
(0w102,0w102,295),
(0w105,0w105,296),
(0w115,0w115,297),
(0w116,0w116,298)], []), ([(0w111,0w111,310)], []), ([(0w108,0w108,308)], []), ([(0w110,0w110,307)], []), ([(0w116,0w116,303)], []), ([(0w117,0w117,299)], []), ([(0w112,0w112,300)], []), ([(0w108,0w108,301)], []), ([(0w101,0w101,302)], []), ([(0w40,0w40,83)], []), ([(0w114,0w114,304)], []), ([(0w105,0w105,305)], []), ([(0w110,0w110,306)], []), ([(0w103,0w103,103)], []), ([(0w116,0w116,103)], []), ([(0w111,0w111,309)], []), ([(0w97,0w97,307)], []), ([(0w111,0w111,311)], []), ([(0w108,0w108,312)], []), ([(0w101,0w101,313)], []), ([(0w97,0w97,314)], []), ([(0w110,0w110,103)], []), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w104,62),
(0w106,0w110,62),
(0w112,0w122,62),
(0w105,0w105,316),
(0w111,0w111,317)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,319)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w99,62),
(0w101,0w122,62),
(0w100,0w100,318)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [6, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,320)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [4, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,322)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [0, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 20]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,285)], [8, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,329)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,327)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,328)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w115,62),
(0w117,0w122,62),
(0w116,0w116,285)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w114,62),
(0w116,0w122,62),
(0w115,0w115,264)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w114,62),
(0w116,0w122,62),
(0w115,0w115,343)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w99,62),
(0w101,0w122,62),
(0w100,0w100,332)], [10]), ([(0w32,0w32,333),
(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 25]), ([(0w118,0w118,334)], []), ([(0w97,0w97,335)], []), ([(0w114,0w114,336)], []), ([(0w105,0w105,337)], []), ([(0w97,0w97,338)], []), ([(0w98,0w98,339)], []), ([(0w108,0w108,340)], []), ([(0w101,0w101,341)], []), ([(0w115,0w115,342)], []), ([], [7]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,344)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 22]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [10, 24]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,347)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w108,62),
(0w110,0w122,62),
(0w109,0w109,348)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,349)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,350)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w99,62),
(0w101,0w122,62),
(0w100,0w100,351)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w114,62),
(0w116,0w122,62),
(0w115,0w115,352)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w122,62)], [3, 10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w110,62),
(0w112,0w122,62),
(0w111,0w111,354)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w107,62),
(0w109,0w122,62),
(0w108,0w108,355)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w100,62),
(0w102,0w122,62),
(0w101,0w101,356)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w98,0w122,62),
(0w97,0w97,357)], [10]), ([(0w48,0w57,62),
(0w65,0w90,62),
(0w97,0w109,62),
(0w111,0w122,62),
(0w110,0w110,285)], [10]), ([], [39, 41]), ([], [27]), ([], [40, 42]), ([(0w48,0w57,363)], []), ([(0w34,0w34,361),
(0w46,0w46,361),
(0w48,0w57,362)], [12]), ([(0w48,0w57,364),
(0w69,0w69,365),
(0w101,0w101,365)], [13]), ([(0w48,0w57,364)], [13]), ([(0w48,0w57,366)], []), ([(0w48,0w57,366)], [13]), ([(0w65,0w90,526),
(0w97,0w122,526)], []), ([(0w34,0w34,521),
(0w46,0w46,521),
(0w44,0w44,374),
(0w48,0w57,368)], []), ([(0w97,0w97,519)], []), ([(0w114,0w114,371)], []), ([(0w117,0w117,372)], []), ([(0w101,0w101,373)], []), ([(0w44,0w44,374)], []), ([(0w34,0w34,375),
(0w48,0w57,376),
(0w102,0w102,377),
(0w116,0w116,378)], []), ([(0w65,0w90,518),
(0w97,0w122,518)], []), ([(0w34,0w34,513),
(0w46,0w46,513),
(0w41,0w41,382),
(0w44,0w44,383),
(0w48,0w57,376)], []), ([(0w97,0w97,511)], []), ([(0w114,0w114,379)], []), ([(0w117,0w117,380)], []), ([(0w101,0w101,381)], []), ([(0w41,0w41,382),
(0w44,0w44,383)], []), ([], [15]), ([(0w34,0w34,384),
(0w48,0w57,385),
(0w102,0w102,386),
(0w116,0w116,387)], []), ([(0w65,0w90,510),
(0w97,0w122,510)], []), ([(0w34,0w34,505),
(0w46,0w46,505),
(0w41,0w41,382),
(0w44,0w44,391),
(0w48,0w57,385)], []), ([(0w97,0w97,503)], []), ([(0w114,0w114,388)], []), ([(0w117,0w117,389)], []), ([(0w101,0w101,390)], []), ([(0w41,0w41,382),
(0w44,0w44,391)], []), ([(0w34,0w34,392),
(0w48,0w57,393),
(0w102,0w102,394),
(0w116,0w116,395)], []), ([(0w65,0w90,502),
(0w97,0w122,502)], []), ([(0w34,0w34,497),
(0w46,0w46,497),
(0w41,0w41,382),
(0w44,0w44,399),
(0w48,0w57,393)], []), ([(0w97,0w97,495)], []), ([(0w114,0w114,396)], []), ([(0w117,0w117,397)], []), ([(0w101,0w101,398)], []), ([(0w41,0w41,382),
(0w44,0w44,399)], []), ([(0w34,0w34,400),
(0w48,0w57,401),
(0w102,0w102,402),
(0w116,0w116,403)], []), ([(0w65,0w90,494),
(0w97,0w122,494)], []), ([(0w34,0w34,489),
(0w46,0w46,489),
(0w41,0w41,382),
(0w44,0w44,407),
(0w48,0w57,401)], []), ([(0w97,0w97,487)], []), ([(0w114,0w114,404)], []), ([(0w117,0w117,405)], []), ([(0w101,0w101,406)], []), ([(0w41,0w41,382),
(0w44,0w44,407)], []), ([(0w34,0w34,408),
(0w48,0w57,409),
(0w102,0w102,410),
(0w116,0w116,411)], []), ([(0w65,0w90,486),
(0w97,0w122,486)], []), ([(0w34,0w34,481),
(0w46,0w46,481),
(0w41,0w41,382),
(0w44,0w44,415),
(0w48,0w57,409)], []), ([(0w97,0w97,479)], []), ([(0w114,0w114,412)], []), ([(0w117,0w117,413)], []), ([(0w101,0w101,414)], []), ([(0w41,0w41,382),
(0w44,0w44,415)], []), ([(0w34,0w34,416),
(0w48,0w57,417),
(0w102,0w102,418),
(0w116,0w116,419)], []), ([(0w65,0w90,478),
(0w97,0w122,478)], []), ([(0w34,0w34,473),
(0w46,0w46,473),
(0w41,0w41,382),
(0w44,0w44,423),
(0w48,0w57,417)], []), ([(0w97,0w97,471)], []), ([(0w114,0w114,420)], []), ([(0w117,0w117,421)], []), ([(0w101,0w101,422)], []), ([(0w41,0w41,382),
(0w44,0w44,423)], []), ([(0w34,0w34,424),
(0w48,0w57,425),
(0w102,0w102,426),
(0w116,0w116,427)], []), ([(0w65,0w90,470),
(0w97,0w122,470)], []), ([(0w34,0w34,465),
(0w46,0w46,465),
(0w41,0w41,382),
(0w44,0w44,431),
(0w48,0w57,425)], []), ([(0w97,0w97,463)], []), ([(0w114,0w114,428)], []), ([(0w117,0w117,429)], []), ([(0w101,0w101,430)], []), ([(0w41,0w41,382),
(0w44,0w44,431)], []), ([(0w34,0w34,432),
(0w48,0w57,433),
(0w102,0w102,434),
(0w116,0w116,435)], []), ([(0w65,0w90,462),
(0w97,0w122,462)], []), ([(0w34,0w34,457),
(0w46,0w46,457),
(0w41,0w41,382),
(0w44,0w44,439),
(0w48,0w57,433)], []), ([(0w97,0w97,455)], []), ([(0w114,0w114,436)], []), ([(0w117,0w117,437)], []), ([(0w101,0w101,438)], []), ([(0w41,0w41,382),
(0w44,0w44,439)], []), ([(0w34,0w34,440),
(0w48,0w57,441),
(0w102,0w102,442),
(0w116,0w116,443)], []), ([(0w65,0w90,454),
(0w97,0w122,454)], []), ([(0w34,0w34,449),
(0w46,0w46,449),
(0w41,0w41,382),
(0w48,0w57,441)], []), ([(0w97,0w97,447)], []), ([(0w114,0w114,444)], []), ([(0w117,0w117,445)], []), ([(0w101,0w101,446)], []), ([(0w41,0w41,382)], []), ([(0w108,0w108,448)], []), ([(0w115,0w115,445)], []), ([(0w48,0w57,450)], []), ([(0w41,0w41,382),
(0w48,0w57,451),
(0w69,0w69,452),
(0w101,0w101,452)], []), ([(0w41,0w41,382),
(0w48,0w57,451)], []), ([(0w48,0w57,453)], []), ([(0w41,0w41,382),
(0w48,0w57,453)], []), ([(0w34,0w34,446),
(0w48,0w57,454),
(0w65,0w90,454),
(0w97,0w122,454)], []), ([(0w108,0w108,456)], []), ([(0w115,0w115,437)], []), ([(0w48,0w57,458)], []), ([(0w41,0w41,382),
(0w44,0w44,439),
(0w48,0w57,459),
(0w69,0w69,460),
(0w101,0w101,460)], []), ([(0w41,0w41,382),
(0w44,0w44,439),
(0w48,0w57,459)], []), ([(0w48,0w57,461)], []), ([(0w41,0w41,382),
(0w44,0w44,439),
(0w48,0w57,461)], []), ([(0w34,0w34,438),
(0w48,0w57,462),
(0w65,0w90,462),
(0w97,0w122,462)], []), ([(0w108,0w108,464)], []), ([(0w115,0w115,429)], []), ([(0w48,0w57,466)], []), ([(0w41,0w41,382),
(0w44,0w44,431),
(0w48,0w57,467),
(0w69,0w69,468),
(0w101,0w101,468)], []), ([(0w41,0w41,382),
(0w44,0w44,431),
(0w48,0w57,467)], []), ([(0w48,0w57,469)], []), ([(0w41,0w41,382),
(0w44,0w44,431),
(0w48,0w57,469)], []), ([(0w34,0w34,430),
(0w48,0w57,470),
(0w65,0w90,470),
(0w97,0w122,470)], []), ([(0w108,0w108,472)], []), ([(0w115,0w115,421)], []), ([(0w48,0w57,474)], []), ([(0w41,0w41,382),
(0w44,0w44,423),
(0w48,0w57,475),
(0w69,0w69,476),
(0w101,0w101,476)], []), ([(0w41,0w41,382),
(0w44,0w44,423),
(0w48,0w57,475)], []), ([(0w48,0w57,477)], []), ([(0w41,0w41,382),
(0w44,0w44,423),
(0w48,0w57,477)], []), ([(0w34,0w34,422),
(0w48,0w57,478),
(0w65,0w90,478),
(0w97,0w122,478)], []), ([(0w108,0w108,480)], []), ([(0w115,0w115,413)], []), ([(0w48,0w57,482)], []), ([(0w41,0w41,382),
(0w44,0w44,415),
(0w48,0w57,483),
(0w69,0w69,484),
(0w101,0w101,484)], []), ([(0w41,0w41,382),
(0w44,0w44,415),
(0w48,0w57,483)], []), ([(0w48,0w57,485)], []), ([(0w41,0w41,382),
(0w44,0w44,415),
(0w48,0w57,485)], []), ([(0w34,0w34,414),
(0w48,0w57,486),
(0w65,0w90,486),
(0w97,0w122,486)], []), ([(0w108,0w108,488)], []), ([(0w115,0w115,405)], []), ([(0w48,0w57,490)], []), ([(0w41,0w41,382),
(0w44,0w44,407),
(0w48,0w57,491),
(0w69,0w69,492),
(0w101,0w101,492)], []), ([(0w41,0w41,382),
(0w44,0w44,407),
(0w48,0w57,491)], []), ([(0w48,0w57,493)], []), ([(0w41,0w41,382),
(0w44,0w44,407),
(0w48,0w57,493)], []), ([(0w34,0w34,406),
(0w48,0w57,494),
(0w65,0w90,494),
(0w97,0w122,494)], []), ([(0w108,0w108,496)], []), ([(0w115,0w115,397)], []), ([(0w48,0w57,498)], []), ([(0w41,0w41,382),
(0w44,0w44,399),
(0w48,0w57,499),
(0w69,0w69,500),
(0w101,0w101,500)], []), ([(0w41,0w41,382),
(0w44,0w44,399),
(0w48,0w57,499)], []), ([(0w48,0w57,501)], []), ([(0w41,0w41,382),
(0w44,0w44,399),
(0w48,0w57,501)], []), ([(0w34,0w34,398),
(0w48,0w57,502),
(0w65,0w90,502),
(0w97,0w122,502)], []), ([(0w108,0w108,504)], []), ([(0w115,0w115,389)], []), ([(0w48,0w57,506)], []), ([(0w41,0w41,382),
(0w44,0w44,391),
(0w48,0w57,507),
(0w69,0w69,508),
(0w101,0w101,508)], []), ([(0w41,0w41,382),
(0w44,0w44,391),
(0w48,0w57,507)], []), ([(0w48,0w57,509)], []), ([(0w41,0w41,382),
(0w44,0w44,391),
(0w48,0w57,509)], []), ([(0w34,0w34,390),
(0w48,0w57,510),
(0w65,0w90,510),
(0w97,0w122,510)], []), ([(0w108,0w108,512)], []), ([(0w115,0w115,380)], []), ([(0w48,0w57,514)], []), ([(0w41,0w41,382),
(0w44,0w44,383),
(0w48,0w57,515),
(0w69,0w69,516),
(0w101,0w101,516)], []), ([(0w41,0w41,382),
(0w44,0w44,383),
(0w48,0w57,515)], []), ([(0w48,0w57,517)], []), ([(0w41,0w41,382),
(0w44,0w44,383),
(0w48,0w57,517)], []), ([(0w34,0w34,381),
(0w48,0w57,518),
(0w65,0w90,518),
(0w97,0w122,518)], []), ([(0w108,0w108,520)], []), ([(0w115,0w115,372)], []), ([(0w48,0w57,522)], []), ([(0w44,0w44,374),
(0w48,0w57,523),
(0w69,0w69,524),
(0w101,0w101,524)], []), ([(0w44,0w44,374),
(0w48,0w57,523)], []), ([(0w48,0w57,525)], []), ([(0w44,0w44,374),
(0w48,0w57,525)], []), ([(0w34,0w34,373),
(0w48,0w57,526),
(0w65,0w90,526),
(0w97,0w122,526)], []), ([], [36]), ([(0w34,0w34,529),
(0w48,0w57,528),
(0w65,0w90,528),
(0w97,0w122,528)], []), ([], [11]), ([], [43])]
    fun yystreamify' p input = ULexBuffer.mkStream (p, input)

    fun yystreamifyReader' p readFn strm = let
          val s = ref strm
	  fun iter(strm, n, accum) = 
	        if n > 1024 then (String.implode (rev accum), strm)
		else (case readFn strm
		       of NONE => (String.implode (rev accum), strm)
			| SOME(c, strm') => iter (strm', n+1, c::accum))
          fun input() = let
	        val (data, strm) = iter(!s, 0, [])
	        in
	          s := strm;
		  data
	        end
          in
            yystreamify' p input
          end

    fun yystreamifyInstream' p strm = yystreamify' p (fn ()=>TextIO.input strm)

    fun innerLex 
(yystrm_, yyss_, yysm) = let
        (* current start state *)
          val yyss = ref yyss_
	  fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
          val yystrm = ref yystrm_
	  fun yysetStrm strm = yystrm := strm
	  fun yygetPos() = ULexBuffer.getpos (!yystrm)
	  fun yystreamify input = yystreamify' (yygetPos()) input
	  fun yystreamifyReader readFn strm = yystreamifyReader' (yygetPos()) readFn strm
	  fun yystreamifyInstream strm = yystreamifyInstream' (yygetPos()) strm
        (* start position of token -- can be updated via skip() *)
	  val yystartPos = ref (yygetPos())
	(* get one char of input *)
	  fun yygetc strm = (case ULexBuffer.getu strm
                of (SOME (0w10, s')) => 
		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
		      SOME (0w10, s'))
		 | x => x)
          fun yygetList getc strm = let
            val get1 = UTF8.getu getc
            fun iter (strm, accum) = 
	        (case get1 strm
	          of NONE => rev accum
	           | SOME (w, strm') => iter (strm', w::accum)
	         (* end case *))
          in
            iter (strm, [])
          end
	(* create yytext *)
	  fun yymksubstr(strm) = ULexBuffer.subtract (strm, !yystrm)
	  fun yymktext(strm) = Substring.string (yymksubstr strm)
	  fun yymkunicode(strm) = yygetList Substring.getc (yymksubstr strm)
          open UserDeclarations
          fun lex () = let
            fun yystuck (yyNO_MATCH) = raise Fail "lexer reached a stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yygetPos()
	    fun yygetlineNo strm = AntlrStreamPos.lineNo yysm (ULexBuffer.getpos strm)
	    fun yygetcolNo  strm = AntlrStreamPos.colNo  yysm (ULexBuffer.getpos strm)
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    val yylastwasnref = ref (ULexBuffer.lastWasNL (!yystrm))
	    fun continue() = let val yylastwasn = !yylastwasnref in
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_let )
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_variables )
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_title )
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_comands )
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_Print )
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_SUM )
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_PROD )
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_endvars )
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_in )
fun yyAction9 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   print yytext; T.TIPO yytext 
      end
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.ID yytext 
      end
fun yyAction11 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction12 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.NUM (valOf (Int.fromString yytext)) 
      end
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.REAL (valOf (Real.fromString yytext)) 
      end
fun yyAction14 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.BOOL (valOf (Bool.fromString yytext)) 
      end
fun yyAction15 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction16 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print yytext; T.SINT (Grammar.toIntList (Grammar.tokenize yytext))
      end
fun yyAction17 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print yytext; T.SFLOAT (Grammar.toFloatList (Grammar.tokenize yytext))
      end
fun yyAction18 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print yytext; T.SBOOL (Grammar.toBoolList (Grammar.tokenize yytext))
      end
fun yyAction19 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  print yytext; T.SSTRING (Grammar.tokenize yytext)
      end
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_IF )
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_THEN )
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_ELSE )
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_WHILE )
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_DO )
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_END )
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EQ )
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EEQ )
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;   T.SEMI)
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;   T.PLUS )
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;   T.MINUS )
fun yyAction31 (strm, lastMatch : yymatch) = (yystrm := strm;   T.TIMES )
fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DIV )
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LP )
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;   T.RP )
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOT )
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;   T.AND )
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;   T.OR )
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NOT )
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GEQ )
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LEQ )
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GT )
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LT )
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NEQ )
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EMPTY )
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;   T.COMMA )
fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;   continue() )
fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;
        T.KW_terminate )
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print (concat ["Unexpected character: '", yytext,
			           "'\n"]); continue()
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48])
in
  if ULexBuffer.eof(!(yystrm))
    then let
      val yycolno = ref(yygetcolNo(!(yystrm)))
      val yylineno = ref(yygetlineNo(!(yystrm)))
      in
        (case (!(yyss))
         of _ => (UserDeclarations.eof())
        (* end case *))
      end
    else (case (!(yyss))
       of INITIAL => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
      (* end case *))
end
end
            and skip() = (yystartPos := yygetPos(); 
			  yylastwasnref := ULexBuffer.lastWasNL (!yystrm);
			  continue())
	    in (continue(), (!yystartPos, yygetPos()), !yystrm, !yyss) end
          in 
            lex()
          end
  in
    type pos = AntlrStreamPos.pos
    type span = AntlrStreamPos.span
    type tok = UserDeclarations.lex_result

    datatype prestrm = STRM of ULexBuffer.stream * 
		(yystart_state * tok * span * prestrm * yystart_state) option ref
    type strm = (prestrm * yystart_state)

    fun lex sm 
(STRM (yystrm, memo), ss) = (case !memo
	  of NONE => let
	     val (tok, span, yystrm', ss') = innerLex 
(yystrm, ss, sm)
	     val strm' = STRM (yystrm', ref NONE);
	     in 
	       memo := SOME (ss, tok, span, strm', ss');
	       (tok, span, (strm', ss'))
	     end
	   | SOME (ss', tok, span, strm', ss'') => 
	       if ss = ss' then
		 (tok, span, (strm', ss''))
	       else (
		 memo := NONE;
		 lex sm 
(STRM (yystrm, memo), ss))
         (* end case *))

    fun streamify input = (STRM (yystreamify' 0 input, ref NONE), INITIAL)
    fun streamifyReader readFn strm = (STRM (yystreamifyReader' 0 readFn strm, ref NONE), 
				       INITIAL)
    fun streamifyInstream strm = (STRM (yystreamifyInstream' 0 strm, ref NONE), 
				  INITIAL)

    fun getPos (STRM (strm, _), _) = ULexBuffer.getpos strm

  end
end
