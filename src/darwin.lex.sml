structure DarwinLexer  = struct

    datatype yystart_state = 
INITIAL
    structure UserDeclarations = 
      struct

 
    structure T = DarwinTokens
    type lex_result = T.token
    fun eof() = T.EOF


      end

    local
    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of ULexBuffer.stream * action * yymatch
    withtype action = ULexBuffer.stream * yymatch -> UserDeclarations.lex_result

    val yytable : ((UTF8.wchar * UTF8.wchar * int) list * int list) Vector.vector = 
#[([(0w0,0w8,1),
(0w11,0w31,1),
(0w35,0w37,1),
(0w39,0w39,1),
(0w63,0w64,1),
(0w91,0w96,1),
(0w125,0w2147483647,1),
(0w9,0w10,2),
(0w32,0w32,2),
(0w33,0w33,3),
(0w34,0w34,4),
(0w38,0w38,5),
(0w40,0w40,6),
(0w41,0w41,7),
(0w42,0w42,8),
(0w43,0w43,9),
(0w44,0w44,10),
(0w45,0w45,11),
(0w46,0w46,12),
(0w47,0w47,13),
(0w48,0w57,14),
(0w58,0w58,15),
(0w59,0w59,16),
(0w60,0w60,17),
(0w61,0w61,18),
(0w62,0w62,19),
(0w65,0w90,20),
(0w97,0w97,20),
(0w104,0w104,20),
(0w106,0w107,20),
(0w110,0w111,20),
(0w113,0w114,20),
(0w117,0w117,20),
(0w120,0w122,20),
(0w98,0w98,21),
(0w99,0w99,22),
(0w100,0w100,23),
(0w101,0w101,24),
(0w102,0w102,25),
(0w103,0w103,26),
(0w105,0w105,27),
(0w108,0w108,28),
(0w109,0w109,29),
(0w112,0w112,30),
(0w115,0w115,31),
(0w116,0w116,32),
(0w118,0w118,33),
(0w119,0w119,34),
(0w123,0w123,35),
(0w124,0w124,36)], []), ([], [62]), ([], [60, 62]), ([(0w61,0w61,465)], [51, 62]), ([(0w65,0w90,463),
(0w97,0w122,463)], [62]), ([(0w38,0w38,462)], [62]), ([], [46, 62]), ([], [47, 62]), ([], [44, 62]), ([(0w43,0w43,461)], [41, 62]), ([], [58, 62]), ([], [43, 62]), ([], [48, 62]), ([], [45, 62]), ([(0w34,0w34,455),
(0w46,0w46,455),
(0w48,0w57,456)], [25, 62]), ([(0w61,0w61,454)], [62]), ([], [40, 62]), ([(0w61,0w61,453)], [55, 62]), ([(0w61,0w61,452)], [38, 62]), ([(0w61,0w61,451)], [54, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,446)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,422)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,421)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w109,65),
(0w111,0w122,65),
(0w108,0w108,406),
(0w110,0w110,407)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w107,65),
(0w109,0w122,65),
(0w97,0w97,402),
(0w108,0w108,403)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,386)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w101,65),
(0w103,0w109,65),
(0w111,0w122,65),
(0w102,0w102,384),
(0w110,0w110,385)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,369)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,362)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,356)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w115,65),
(0w118,0w122,65),
(0w97,0w97,302),
(0w116,0w116,303),
(0w117,0w117,304)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w103,65),
(0w106,0w110,65),
(0w112,0w113,65),
(0w115,0w116,65),
(0w118,0w122,65),
(0w101,0w101,84),
(0w104,0w104,85),
(0w105,0w105,86),
(0w111,0w111,87),
(0w114,0w114,88),
(0w117,0w117,89)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w110,65),
(0w112,0w122,65),
(0w97,0w97,70),
(0w111,0w111,71)], [23, 62]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w103,65),
(0w105,0w122,65),
(0w104,0w104,66)], [23, 62]), ([(0w34,0w34,38),
(0w48,0w57,39),
(0w102,0w102,40),
(0w116,0w116,41),
(0w125,0w125,42)], [62]), ([(0w124,0w124,37)], [62]), ([], [50]), ([(0w65,0w90,61),
(0w97,0w122,61)], []), ([(0w34,0w34,50),
(0w46,0w46,50),
(0w44,0w44,51),
(0w48,0w57,39),
(0w125,0w125,52)], []), ([(0w97,0w97,48)], []), ([(0w114,0w114,43)], []), ([], [28, 29, 30, 31, 57]), ([(0w117,0w117,44)], []), ([(0w101,0w101,45)], []), ([(0w44,0w44,46),
(0w125,0w125,47)], []), ([(0w102,0w102,40),
(0w116,0w116,41)], []), ([], [30]), ([(0w108,0w108,49)], []), ([(0w115,0w115,44)], []), ([(0w48,0w57,54)], []), ([(0w48,0w57,53)], []), ([], [28]), ([(0w44,0w44,51),
(0w48,0w57,53),
(0w125,0w125,52)], []), ([(0w44,0w44,55),
(0w48,0w57,56),
(0w69,0w69,57),
(0w101,0w101,57),
(0w125,0w125,58)], []), ([(0w48,0w57,60)], []), ([(0w44,0w44,55),
(0w48,0w57,56),
(0w125,0w125,58)], []), ([(0w48,0w57,59)], []), ([], [29]), ([(0w44,0w44,55),
(0w48,0w57,59),
(0w125,0w125,58)], []), ([(0w34,0w34,50),
(0w46,0w46,50),
(0w48,0w57,60)], []), ([(0w34,0w34,62),
(0w48,0w57,61),
(0w65,0w90,61),
(0w97,0w122,61)], []), ([(0w44,0w44,63),
(0w125,0w125,64)], []), ([(0w34,0w34,38)], []), ([], [31]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,67)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,68)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,69)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 35]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,74)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,72)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w99,65),
(0w101,0w122,65),
(0w100,0w100,73)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [21, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,75)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,76)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w97,65),
(0w99,0w109,65),
(0w111,0w122,65),
(0w98,0w98,77),
(0w110,0w110,78)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,81)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w98,65),
(0w100,0w122,65),
(0w99,0w99,79)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,80)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [12, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,82)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w114,65),
(0w116,0w122,65),
(0w115,0w115,83)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [0, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,295)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,293)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,290)], [23]), ([(0w48,0w57,65),
(0w65,0w69,65),
(0w71,0w72,65),
(0w74,0w82,65),
(0w84,0w90,65),
(0w97,0w122,65),
(0w70,0w70,276),
(0w73,0w73,277),
(0w83,0w83,278)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w116,65),
(0w118,0w122,65),
(0w117,0w117,274)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w111,65),
(0w113,0w122,65),
(0w112,0w112,90)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,91)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,92)], [23]), ([(0w40,0w40,93),
(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23]), ([(0w98,0w98,94),
(0w102,0w102,95),
(0w105,0w105,96),
(0w115,0w115,97)], []), ([(0w111,0w111,269)], []), ([(0w108,0w108,267)], []), ([(0w110,0w110,266)], []), ([(0w116,0w116,98)], []), ([(0w114,0w114,99)], []), ([(0w105,0w105,100)], []), ([(0w110,0w110,101)], []), ([(0w103,0w103,102)], []), ([(0w44,0w44,103)], []), ([(0w98,0w98,104),
(0w102,0w102,105),
(0w105,0w105,106),
(0w115,0w115,107)], []), ([(0w111,0w111,261)], []), ([(0w108,0w108,259)], []), ([(0w110,0w110,258)], []), ([(0w116,0w116,108)], []), ([(0w114,0w114,109)], []), ([(0w105,0w105,110)], []), ([(0w110,0w110,111)], []), ([(0w103,0w103,112)], []), ([(0w41,0w41,113),
(0w44,0w44,114)], []), ([], [22]), ([(0w98,0w98,115),
(0w102,0w102,116),
(0w105,0w105,117),
(0w115,0w115,118)], []), ([(0w111,0w111,253)], []), ([(0w108,0w108,251)], []), ([(0w110,0w110,250)], []), ([(0w116,0w116,119)], []), ([(0w114,0w114,120)], []), ([(0w105,0w105,121)], []), ([(0w110,0w110,122)], []), ([(0w103,0w103,123)], []), ([(0w41,0w41,113),
(0w44,0w44,124)], []), ([(0w98,0w98,125),
(0w102,0w102,126),
(0w105,0w105,127),
(0w115,0w115,128)], []), ([(0w111,0w111,245)], []), ([(0w108,0w108,243)], []), ([(0w110,0w110,242)], []), ([(0w116,0w116,129)], []), ([(0w114,0w114,130)], []), ([(0w105,0w105,131)], []), ([(0w110,0w110,132)], []), ([(0w103,0w103,133)], []), ([(0w41,0w41,113),
(0w44,0w44,134)], []), ([(0w98,0w98,135),
(0w102,0w102,136),
(0w105,0w105,137),
(0w115,0w115,138)], []), ([(0w111,0w111,237)], []), ([(0w108,0w108,235)], []), ([(0w110,0w110,234)], []), ([(0w116,0w116,139)], []), ([(0w114,0w114,140)], []), ([(0w105,0w105,141)], []), ([(0w110,0w110,142)], []), ([(0w103,0w103,143)], []), ([(0w41,0w41,113),
(0w44,0w44,144)], []), ([(0w98,0w98,145),
(0w102,0w102,146),
(0w105,0w105,147),
(0w115,0w115,148)], []), ([(0w111,0w111,229)], []), ([(0w108,0w108,227)], []), ([(0w110,0w110,226)], []), ([(0w116,0w116,149)], []), ([(0w114,0w114,150)], []), ([(0w105,0w105,151)], []), ([(0w110,0w110,152)], []), ([(0w103,0w103,153)], []), ([(0w41,0w41,113),
(0w44,0w44,154)], []), ([(0w98,0w98,155),
(0w102,0w102,156),
(0w105,0w105,157),
(0w115,0w115,158)], []), ([(0w111,0w111,221)], []), ([(0w108,0w108,219)], []), ([(0w110,0w110,218)], []), ([(0w116,0w116,159)], []), ([(0w114,0w114,160)], []), ([(0w105,0w105,161)], []), ([(0w110,0w110,162)], []), ([(0w103,0w103,163)], []), ([(0w41,0w41,113),
(0w44,0w44,164)], []), ([(0w98,0w98,165),
(0w102,0w102,166),
(0w105,0w105,167),
(0w115,0w115,168)], []), ([(0w111,0w111,213)], []), ([(0w108,0w108,211)], []), ([(0w110,0w110,210)], []), ([(0w116,0w116,169)], []), ([(0w114,0w114,170)], []), ([(0w105,0w105,171)], []), ([(0w110,0w110,172)], []), ([(0w103,0w103,173)], []), ([(0w41,0w41,113),
(0w44,0w44,174)], []), ([(0w98,0w98,175),
(0w102,0w102,176),
(0w105,0w105,177),
(0w115,0w115,178)], []), ([(0w111,0w111,205)], []), ([(0w108,0w108,203)], []), ([(0w110,0w110,202)], []), ([(0w116,0w116,179)], []), ([(0w114,0w114,180)], []), ([(0w105,0w105,181)], []), ([(0w110,0w110,182)], []), ([(0w103,0w103,183)], []), ([(0w41,0w41,113),
(0w44,0w44,184)], []), ([(0w98,0w98,185),
(0w102,0w102,186),
(0w105,0w105,187),
(0w115,0w115,188)], []), ([(0w111,0w111,197)], []), ([(0w108,0w108,195)], []), ([(0w110,0w110,194)], []), ([(0w116,0w116,189)], []), ([(0w114,0w114,190)], []), ([(0w105,0w105,191)], []), ([(0w110,0w110,192)], []), ([(0w103,0w103,193)], []), ([(0w41,0w41,113)], []), ([(0w116,0w116,193)], []), ([(0w111,0w111,196)], []), ([(0w97,0w97,194)], []), ([(0w111,0w111,198)], []), ([(0w108,0w108,199)], []), ([(0w101,0w101,200)], []), ([(0w97,0w97,201)], []), ([(0w110,0w110,193)], []), ([(0w116,0w116,183)], []), ([(0w111,0w111,204)], []), ([(0w97,0w97,202)], []), ([(0w111,0w111,206)], []), ([(0w108,0w108,207)], []), ([(0w101,0w101,208)], []), ([(0w97,0w97,209)], []), ([(0w110,0w110,183)], []), ([(0w116,0w116,173)], []), ([(0w111,0w111,212)], []), ([(0w97,0w97,210)], []), ([(0w111,0w111,214)], []), ([(0w108,0w108,215)], []), ([(0w101,0w101,216)], []), ([(0w97,0w97,217)], []), ([(0w110,0w110,173)], []), ([(0w116,0w116,163)], []), ([(0w111,0w111,220)], []), ([(0w97,0w97,218)], []), ([(0w111,0w111,222)], []), ([(0w108,0w108,223)], []), ([(0w101,0w101,224)], []), ([(0w97,0w97,225)], []), ([(0w110,0w110,163)], []), ([(0w116,0w116,153)], []), ([(0w111,0w111,228)], []), ([(0w97,0w97,226)], []), ([(0w111,0w111,230)], []), ([(0w108,0w108,231)], []), ([(0w101,0w101,232)], []), ([(0w97,0w97,233)], []), ([(0w110,0w110,153)], []), ([(0w116,0w116,143)], []), ([(0w111,0w111,236)], []), ([(0w97,0w97,234)], []), ([(0w111,0w111,238)], []), ([(0w108,0w108,239)], []), ([(0w101,0w101,240)], []), ([(0w97,0w97,241)], []), ([(0w110,0w110,143)], []), ([(0w116,0w116,133)], []), ([(0w111,0w111,244)], []), ([(0w97,0w97,242)], []), ([(0w111,0w111,246)], []), ([(0w108,0w108,247)], []), ([(0w101,0w101,248)], []), ([(0w97,0w97,249)], []), ([(0w110,0w110,133)], []), ([(0w116,0w116,123)], []), ([(0w111,0w111,252)], []), ([(0w97,0w97,250)], []), ([(0w111,0w111,254)], []), ([(0w108,0w108,255)], []), ([(0w101,0w101,256)], []), ([(0w97,0w97,257)], []), ([(0w110,0w110,123)], []), ([(0w116,0w116,112)], []), ([(0w111,0w111,260)], []), ([(0w97,0w97,258)], []), ([(0w111,0w111,262)], []), ([(0w108,0w108,263)], []), ([(0w101,0w101,264)], []), ([(0w97,0w97,265)], []), ([(0w110,0w110,112)], []), ([(0w116,0w116,102)], []), ([(0w111,0w111,268)], []), ([(0w97,0w97,266)], []), ([(0w111,0w111,270)], []), ([(0w108,0w108,271)], []), ([(0w101,0w101,272)], []), ([(0w97,0w97,273)], []), ([(0w110,0w110,102)], []), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,275)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 27]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,286)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,284)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,279)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,280)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,281)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,282)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w102,65),
(0w104,0w122,65),
(0w103,0w103,283)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [6, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,285)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [17, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,287)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,288)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,289)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [16, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,291)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,292)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [1, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,294)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 33]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w108,65),
(0w110,0w122,65),
(0w109,0w109,296)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,297)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,298)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,299)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,300)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,301)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 61]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w108,65),
(0w110,0w122,65),
(0w109,0w109,327)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w99,65),
(0w101,0w113,65),
(0w115,0w122,65),
(0w100,0w100,313),
(0w114,0w114,314)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w97,65),
(0w99,0w108,65),
(0w110,0w122,65),
(0w98,0w98,305),
(0w109,0w109,306)], [23]), ([(0w48,0w57,65),
(0w65,0w82,65),
(0w84,0w90,65),
(0w97,0w122,65),
(0w83,0w83,307)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [4, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,308)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w108,65),
(0w110,0w122,65),
(0w109,0w109,309)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w111,65),
(0w113,0w122,65),
(0w112,0w112,310)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,311)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,312)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [18, 23]), ([(0w48,0w57,65),
(0w65,0w67,65),
(0w69,0w90,65),
(0w97,0w122,65),
(0w68,0w68,318)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,315)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,316)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w102,65),
(0w104,0w122,65),
(0w103,0w103,317)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [22, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,319)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w117,65),
(0w119,0w122,65),
(0w118,0w118,320)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,321)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,322)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,323)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,324)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,325)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,326)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [11, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w111,65),
(0w113,0w122,65),
(0w112,0w112,328)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,329)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,330)], [23]), ([(0w32,0w32,331),
(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23]), ([(0w111,0w111,332)], []), ([(0w102,0w102,333)], []), ([(0w32,0w32,334)], []), ([(0w98,0w98,335),
(0w102,0w102,336),
(0w105,0w105,337),
(0w115,0w115,338),
(0w116,0w116,339)], []), ([(0w111,0w111,351)], []), ([(0w108,0w108,349)], []), ([(0w110,0w110,348)], []), ([(0w116,0w116,344)], []), ([(0w117,0w117,340)], []), ([(0w112,0w112,341)], []), ([(0w108,0w108,342)], []), ([(0w101,0w101,343)], []), ([(0w40,0w40,93)], []), ([(0w114,0w114,345)], []), ([(0w105,0w105,346)], []), ([(0w110,0w110,347)], []), ([(0w103,0w103,113)], []), ([(0w116,0w116,113)], []), ([(0w111,0w111,350)], []), ([(0w97,0w97,348)], []), ([(0w111,0w111,352)], []), ([(0w108,0w108,353)], []), ([(0w101,0w101,354)], []), ([(0w97,0w97,355)], []), ([(0w110,0w110,113)], []), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w110,65),
(0w112,0w122,65),
(0w105,0w105,357),
(0w111,0w111,358)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,360)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w99,65),
(0w101,0w122,65),
(0w100,0w100,359)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [5, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,361)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [3, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w99,65),
(0w101,0w122,65),
(0w97,0w97,363),
(0w100,0w100,364)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,368)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,365)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,366)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,367)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [10, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [8, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,370)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,371)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,372)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,373)], [23]), ([(0w48,0w57,65),
(0w65,0w81,65),
(0w83,0w90,65),
(0w97,0w122,65),
(0w82,0w82,374)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,375)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w102,65),
(0w104,0w122,65),
(0w103,0w103,376)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,377)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,378)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w114,65),
(0w116,0w122,65),
(0w115,0w115,379)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w114,65),
(0w116,0w122,65),
(0w115,0w115,380)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,381)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,382)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,383)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [19, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 32]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,317)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,387)], [23]), ([(0w48,0w57,65),
(0w65,0w69,65),
(0w71,0w72,65),
(0w74,0w82,65),
(0w84,0w90,65),
(0w97,0w122,65),
(0w70,0w70,388),
(0w73,0w73,389),
(0w83,0w83,390)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,398)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,396)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,391)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,392)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,393)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,394)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w102,65),
(0w104,0w122,65),
(0w103,0w103,395)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [15, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,397)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [14, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,399)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,400)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,401)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [13, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,405)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,404)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,385)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w114,65),
(0w116,0w122,65),
(0w115,0w115,274)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w114,65),
(0w116,0w122,65),
(0w115,0w115,419)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w99,65),
(0w101,0w122,65),
(0w100,0w100,408)], [23]), ([(0w32,0w32,409),
(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 37]), ([(0w118,0w118,410)], []), ([(0w97,0w97,411)], []), ([(0w114,0w114,412)], []), ([(0w105,0w105,413)], []), ([(0w97,0w97,414)], []), ([(0w98,0w98,415)], []), ([(0w108,0w108,416)], []), ([(0w101,0w101,417)], []), ([(0w115,0w115,418)], []), ([], [7]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,420)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 34]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [23, 36]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w108,65),
(0w110,0w113,65),
(0w115,0w117,65),
(0w119,0w122,65),
(0w109,0w109,423),
(0w114,0w114,424),
(0w118,0w118,425)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w108,65),
(0w110,0w122,65),
(0w109,0w109,441)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,433)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,426)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w113,65),
(0w115,0w122,65),
(0w114,0w114,427)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,428)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,429)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,430)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w98,65),
(0w100,0w122,65),
(0w99,0w99,431)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,432)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [20, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,434)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,435)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,436)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w115,65),
(0w117,0w122,65),
(0w116,0w116,437)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w104,65),
(0w106,0w122,65),
(0w105,0w105,438)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,439)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,440)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [9, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,442)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,443)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w99,65),
(0w101,0w122,65),
(0w100,0w100,444)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w114,65),
(0w116,0w122,65),
(0w115,0w115,445)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w122,65)], [2, 23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w110,65),
(0w112,0w122,65),
(0w111,0w111,447)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w107,65),
(0w109,0w122,65),
(0w108,0w108,448)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w100,65),
(0w102,0w122,65),
(0w101,0w101,449)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w98,0w122,65),
(0w97,0w97,450)], [23]), ([(0w48,0w57,65),
(0w65,0w90,65),
(0w97,0w109,65),
(0w111,0w122,65),
(0w110,0w110,317)], [23]), ([], [52]), ([], [39]), ([], [53]), ([], [59]), ([(0w48,0w57,457)], []), ([(0w34,0w34,455),
(0w46,0w46,455),
(0w48,0w57,456)], [25]), ([(0w48,0w57,458),
(0w69,0w69,459),
(0w101,0w101,459)], [26]), ([(0w48,0w57,458)], [26]), ([(0w48,0w57,460)], []), ([(0w48,0w57,460)], [26]), ([], [42]), ([], [49]), ([(0w34,0w34,464),
(0w48,0w57,463),
(0w65,0w90,463),
(0w97,0w122,463)], []), ([], [24]), ([], [56])]
    fun yystreamify' p input = ULexBuffer.mkStream (p, input)

    fun yystreamifyReader' p readFn strm = let
          val s = ref strm
	  fun iter(strm, n, accum) = 
	        if n > 1024 then (String.implode (rev accum), strm)
		else (case readFn strm
		       of NONE => (String.implode (rev accum), strm)
			| SOME(c, strm') => iter (strm', n+1, c::accum))
          fun input() = let
	        val (data, strm) = iter(!s, 0, [])
	        in
	          s := strm;
		  data
	        end
          in
            yystreamify' p input
          end

    fun yystreamifyInstream' p strm = yystreamify' p (fn ()=>TextIO.input strm)

    fun innerLex 
(yystrm_, yyss_, yysm) = let
        (* current start state *)
          val yyss = ref yyss_
	  fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
          val yystrm = ref yystrm_
	  fun yysetStrm strm = yystrm := strm
	  fun yygetPos() = ULexBuffer.getpos (!yystrm)
	  fun yystreamify input = yystreamify' (yygetPos()) input
	  fun yystreamifyReader readFn strm = yystreamifyReader' (yygetPos()) readFn strm
	  fun yystreamifyInstream strm = yystreamifyInstream' (yygetPos()) strm
        (* start position of token -- can be updated via skip() *)
	  val yystartPos = ref (yygetPos())
	(* get one char of input *)
	  fun yygetc strm = (case ULexBuffer.getu strm
                of (SOME (0w10, s')) => 
		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
		      SOME (0w10, s'))
		 | x => x)
          fun yygetList getc strm = let
            val get1 = UTF8.getu getc
            fun iter (strm, accum) = 
	        (case get1 strm
	          of NONE => rev accum
	           | SOME (w, strm') => iter (strm', w::accum)
	         (* end case *))
          in
            iter (strm, [])
          end
	(* create yytext *)
	  fun yymksubstr(strm) = ULexBuffer.subtract (strm, !yystrm)
	  fun yymktext(strm) = Substring.string (yymksubstr strm)
	  fun yymkunicode(strm) = yygetList Substring.getc (yymksubstr strm)
          open UserDeclarations
          fun lex () = let
            fun yystuck (yyNO_MATCH) = raise Fail "lexer reached a stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yygetPos()
	    fun yygetlineNo strm = AntlrStreamPos.lineNo yysm (ULexBuffer.getpos strm)
	    fun yygetcolNo  strm = AntlrStreamPos.colNo  yysm (ULexBuffer.getpos strm)
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    val yylastwasnref = ref (ULexBuffer.lastWasNL (!yystrm))
	    fun continue() = let val yylastwasn = !yylastwasnref in
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_variables )
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_title )
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_comands )
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_Print )
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_SUM )
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_PROD )
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_TOSTRING )
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_endvars )
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_MEAN )
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_CORR )
fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_MEDIAN )
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_STDEV )
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_VAR )
fun yyAction13 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_GETF )
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_GETI )
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_GETS )
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_TOFLOAT)
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_TOINT)
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_SUBS )
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_LINREG)
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_COV)
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;   T.VOID )
fun yyAction22 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.TIPO yytext 
      end
fun yyAction23 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.ID yytext 
      end
fun yyAction24 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction25 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.NUM (valOf (Int.fromString yytext)) 
      end
fun yyAction26 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.REAL (valOf (Real.fromString yytext)) 
      end
fun yyAction27 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.BOOL (valOf (Bool.fromString yytext)) 
      end
fun yyAction28 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.SINT (Grammar.toIntList (Grammar.tokenize yytext))
      end
fun yyAction29 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         T.SFLOAT (Grammar.toFloatList (Grammar.tokenize yytext))
      end
fun yyAction30 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.SBOOL (Grammar.toBoolList (Grammar.tokenize yytext))
      end
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.SSTRING (Grammar.tokenize yytext)
      end
fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_IF )
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_THEN )
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_ELSE )
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_WHILE )
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_DO )
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_END )
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EQ )
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EEQ )
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;   T.SEMI)
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;   T.PLUS )
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;  T.CONCAT)
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;   T.MINUS )
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;   T.TIMES )
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DIV )
fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LP )
fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;   T.RP )
fun yyAction48 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOT )
fun yyAction49 (strm, lastMatch : yymatch) = (yystrm := strm;   T.AND )
fun yyAction50 (strm, lastMatch : yymatch) = (yystrm := strm;   T.OR )
fun yyAction51 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NOT )
fun yyAction52 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GEQ )
fun yyAction53 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LEQ )
fun yyAction54 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GT )
fun yyAction55 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LT )
fun yyAction56 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NEQ )
fun yyAction57 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EMPTY )
fun yyAction58 (strm, lastMatch : yymatch) = (yystrm := strm;   T.COMMA )
fun yyAction59 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOTDOT )
fun yyAction60 (strm, lastMatch : yymatch) = (yystrm := strm;   continue() )
fun yyAction61 (strm, lastMatch : yymatch) = (yystrm := strm;
        T.KW_terminate )
fun yyAction62 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print (concat ["Unexpected character: '", yytext,
			           "'\n"]); continue()
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62])
in
  if ULexBuffer.eof(!(yystrm))
    then let
      val yycolno = ref(yygetcolNo(!(yystrm)))
      val yylineno = ref(yygetlineNo(!(yystrm)))
      in
        (case (!(yyss))
         of _ => (UserDeclarations.eof())
        (* end case *))
      end
    else (case (!(yyss))
       of INITIAL => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
      (* end case *))
end
end
            and skip() = (yystartPos := yygetPos(); 
			  yylastwasnref := ULexBuffer.lastWasNL (!yystrm);
			  continue())
	    in (continue(), (!yystartPos, yygetPos()), !yystrm, !yyss) end
          in 
            lex()
          end
  in
    type pos = AntlrStreamPos.pos
    type span = AntlrStreamPos.span
    type tok = UserDeclarations.lex_result

    datatype prestrm = STRM of ULexBuffer.stream * 
		(yystart_state * tok * span * prestrm * yystart_state) option ref
    type strm = (prestrm * yystart_state)

    fun lex sm 
(STRM (yystrm, memo), ss) = (case !memo
	  of NONE => let
	     val (tok, span, yystrm', ss') = innerLex 
(yystrm, ss, sm)
	     val strm' = STRM (yystrm', ref NONE);
	     in 
	       memo := SOME (ss, tok, span, strm', ss');
	       (tok, span, (strm', ss'))
	     end
	   | SOME (ss', tok, span, strm', ss'') => 
	       if ss = ss' then
		 (tok, span, (strm', ss''))
	       else (
		 memo := NONE;
		 lex sm 
(STRM (yystrm, memo), ss))
         (* end case *))

    fun streamify input = (STRM (yystreamify' 0 input, ref NONE), INITIAL)
    fun streamifyReader readFn strm = (STRM (yystreamifyReader' 0 readFn strm, ref NONE), 
				       INITIAL)
    fun streamifyInstream strm = (STRM (yystreamifyInstream' 0 strm, ref NONE), 
				  INITIAL)

    fun getPos (STRM (strm, _), _) = ULexBuffer.getpos strm

  end
end
