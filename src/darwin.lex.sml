structure DarwinLexer  = struct

    datatype yystart_state = 
INITIAL
    local

    structure UserDeclarations = 
      struct

 
    structure T = DarwinTokens
    type lex_result = T.token
    fun eof() = T.EOF

      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of ULexBuffer.stream * action * yymatch
    withtype action = ULexBuffer.stream * yymatch -> UserDeclarations.lex_result

    val yytable : ((UTF8.wchar * UTF8.wchar * int) list * int list) Vector.vector = 
#[([(0w0,0w8,1),
(0w11,0w31,1),
(0w35,0w37,1),
(0w39,0w39,1),
(0w63,0w64,1),
(0w91,0w96,1),
(0w125,0w2147483647,1),
(0w9,0w10,2),
(0w32,0w32,2),
(0w33,0w33,3),
(0w34,0w34,4),
(0w38,0w38,5),
(0w40,0w40,6),
(0w41,0w41,7),
(0w42,0w42,8),
(0w43,0w43,9),
(0w44,0w44,10),
(0w45,0w45,11),
(0w46,0w46,12),
(0w47,0w47,13),
(0w48,0w57,14),
(0w58,0w58,15),
(0w59,0w59,16),
(0w60,0w60,17),
(0w61,0w61,18),
(0w62,0w62,19),
(0w65,0w90,20),
(0w97,0w97,20),
(0w104,0w104,20),
(0w106,0w107,20),
(0w110,0w111,20),
(0w113,0w114,20),
(0w117,0w117,20),
(0w120,0w122,20),
(0w98,0w98,21),
(0w99,0w99,22),
(0w100,0w100,23),
(0w101,0w101,24),
(0w102,0w102,25),
(0w103,0w103,26),
(0w105,0w105,27),
(0w108,0w108,28),
(0w109,0w109,29),
(0w112,0w112,30),
(0w115,0w115,31),
(0w116,0w116,32),
(0w118,0w118,33),
(0w119,0w119,34),
(0w123,0w123,35),
(0w124,0w124,36)], []), ([], [63]), ([], [61, 63]), ([(0w61,0w61,469)], [52, 63]), ([(0w32,0w33,467),
(0w35,0w38,467),
(0w42,0w42,467),
(0w48,0w58,467),
(0w64,0w90,467),
(0w97,0w122,467),
(0w34,0w34,468)], [63]), ([(0w38,0w38,466)], [63]), ([], [47, 63]), ([], [48, 63]), ([], [45, 63]), ([(0w43,0w43,465),
(0w48,0w57,460)], [42, 63]), ([], [59, 63]), ([(0w48,0w57,460)], [44, 63]), ([], [49, 63]), ([], [46, 63]), ([(0w34,0w34,459),
(0w46,0w46,459),
(0w48,0w57,460)], [33, 63]), ([(0w61,0w61,458)], [63]), ([], [41, 63]), ([(0w61,0w61,457)], [56, 63]), ([(0w61,0w61,456)], [39, 63]), ([(0w61,0w61,455)], [55, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,450)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,426)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,425)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w109,67),
(0w111,0w122,67),
(0w108,0w108,410),
(0w110,0w110,411)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w107,67),
(0w109,0w122,67),
(0w97,0w97,406),
(0w108,0w108,407)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,390)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w101,67),
(0w103,0w109,67),
(0w111,0w122,67),
(0w102,0w102,388),
(0w110,0w110,389)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,373)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,366)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w113,67),
(0w115,0w122,67),
(0w111,0w111,358),
(0w114,0w114,359)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w115,67),
(0w118,0w122,67),
(0w97,0w97,304),
(0w116,0w116,305),
(0w117,0w117,306)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w103,67),
(0w106,0w110,67),
(0w112,0w113,67),
(0w115,0w116,67),
(0w118,0w122,67),
(0w101,0w101,86),
(0w104,0w104,87),
(0w105,0w105,88),
(0w111,0w111,89),
(0w114,0w114,90),
(0w117,0w117,91)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w110,67),
(0w112,0w122,67),
(0w97,0w97,72),
(0w111,0w111,73)], [31, 63]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w103,67),
(0w105,0w122,67),
(0w104,0w104,68)], [31, 63]), ([(0w34,0w34,38),
(0w43,0w43,39),
(0w45,0w45,39),
(0w48,0w57,40),
(0w102,0w102,41),
(0w116,0w116,42),
(0w125,0w125,43)], [63]), ([(0w124,0w124,37)], [63]), ([], [51]), ([(0w32,0w33,38),
(0w35,0w38,38),
(0w42,0w42,38),
(0w48,0w58,38),
(0w64,0w90,38),
(0w97,0w122,38),
(0w34,0w34,64)], []), ([(0w48,0w57,40)], []), ([(0w34,0w34,51),
(0w46,0w46,51),
(0w44,0w44,52),
(0w48,0w57,40),
(0w125,0w125,53)], []), ([(0w97,0w97,49)], []), ([(0w114,0w114,44)], []), ([], [35, 36, 37, 38, 58]), ([(0w117,0w117,45)], []), ([(0w101,0w101,46)], []), ([(0w44,0w44,47),
(0w125,0w125,48)], []), ([(0w102,0w102,41),
(0w116,0w116,42)], []), ([], [37]), ([(0w108,0w108,50)], []), ([(0w115,0w115,45)], []), ([(0w48,0w57,56)], []), ([(0w43,0w43,54),
(0w45,0w45,54),
(0w48,0w57,55)], []), ([], [35]), ([(0w48,0w57,55)], []), ([(0w44,0w44,52),
(0w48,0w57,55),
(0w125,0w125,53)], []), ([(0w44,0w44,57),
(0w48,0w57,56),
(0w69,0w69,58),
(0w101,0w101,58),
(0w125,0w125,59)], []), ([(0w43,0w43,62),
(0w45,0w45,62),
(0w48,0w57,63)], []), ([(0w43,0w43,60),
(0w45,0w45,60),
(0w48,0w57,61)], []), ([], [36]), ([(0w48,0w57,61)], []), ([(0w44,0w44,57),
(0w48,0w57,61),
(0w125,0w125,59)], []), ([(0w48,0w57,63)], []), ([(0w34,0w34,51),
(0w46,0w46,51),
(0w48,0w57,63)], []), ([(0w32,0w33,38),
(0w35,0w38,38),
(0w42,0w42,38),
(0w48,0w58,38),
(0w64,0w90,38),
(0w97,0w122,38),
(0w34,0w34,64),
(0w44,0w44,65),
(0w125,0w125,66)], []), ([(0w34,0w34,38)], []), ([], [38]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,69)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,70)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,71)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [26, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w113,67),
(0w115,0w122,67),
(0w114,0w114,76)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,74)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w99,67),
(0w101,0w122,67),
(0w100,0w100,75)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [22, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,77)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,78)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w97,67),
(0w99,0w109,67),
(0w111,0w122,67),
(0w98,0w98,79),
(0w110,0w110,80)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,83)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w98,67),
(0w100,0w122,67),
(0w99,0w99,81)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,82)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [12, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,84)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w114,67),
(0w116,0w122,67),
(0w115,0w115,85)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [0, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w113,67),
(0w115,0w122,67),
(0w114,0w114,297)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,295)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,292)], [31]), ([(0w48,0w57,67),
(0w65,0w69,67),
(0w71,0w72,67),
(0w74,0w82,67),
(0w84,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67),
(0w70,0w70,278),
(0w73,0w73,279),
(0w83,0w83,280)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w116,67),
(0w118,0w122,67),
(0w117,0w117,276)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w111,67),
(0w113,0w122,67),
(0w112,0w112,92)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,93)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,94)], [31]), ([(0w40,0w40,95),
(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [31]), ([(0w98,0w98,96),
(0w102,0w102,97),
(0w105,0w105,98),
(0w115,0w115,99)], []), ([(0w111,0w111,271)], []), ([(0w108,0w108,269)], []), ([(0w110,0w110,268)], []), ([(0w116,0w116,100)], []), ([(0w114,0w114,101)], []), ([(0w105,0w105,102)], []), ([(0w110,0w110,103)], []), ([(0w103,0w103,104)], []), ([(0w44,0w44,105)], []), ([(0w98,0w98,106),
(0w102,0w102,107),
(0w105,0w105,108),
(0w115,0w115,109)], []), ([(0w111,0w111,263)], []), ([(0w108,0w108,261)], []), ([(0w110,0w110,260)], []), ([(0w116,0w116,110)], []), ([(0w114,0w114,111)], []), ([(0w105,0w105,112)], []), ([(0w110,0w110,113)], []), ([(0w103,0w103,114)], []), ([(0w41,0w41,115),
(0w44,0w44,116)], []), ([], [29]), ([(0w98,0w98,117),
(0w102,0w102,118),
(0w105,0w105,119),
(0w115,0w115,120)], []), ([(0w111,0w111,255)], []), ([(0w108,0w108,253)], []), ([(0w110,0w110,252)], []), ([(0w116,0w116,121)], []), ([(0w114,0w114,122)], []), ([(0w105,0w105,123)], []), ([(0w110,0w110,124)], []), ([(0w103,0w103,125)], []), ([(0w41,0w41,115),
(0w44,0w44,126)], []), ([(0w98,0w98,127),
(0w102,0w102,128),
(0w105,0w105,129),
(0w115,0w115,130)], []), ([(0w111,0w111,247)], []), ([(0w108,0w108,245)], []), ([(0w110,0w110,244)], []), ([(0w116,0w116,131)], []), ([(0w114,0w114,132)], []), ([(0w105,0w105,133)], []), ([(0w110,0w110,134)], []), ([(0w103,0w103,135)], []), ([(0w41,0w41,115),
(0w44,0w44,136)], []), ([(0w98,0w98,137),
(0w102,0w102,138),
(0w105,0w105,139),
(0w115,0w115,140)], []), ([(0w111,0w111,239)], []), ([(0w108,0w108,237)], []), ([(0w110,0w110,236)], []), ([(0w116,0w116,141)], []), ([(0w114,0w114,142)], []), ([(0w105,0w105,143)], []), ([(0w110,0w110,144)], []), ([(0w103,0w103,145)], []), ([(0w41,0w41,115),
(0w44,0w44,146)], []), ([(0w98,0w98,147),
(0w102,0w102,148),
(0w105,0w105,149),
(0w115,0w115,150)], []), ([(0w111,0w111,231)], []), ([(0w108,0w108,229)], []), ([(0w110,0w110,228)], []), ([(0w116,0w116,151)], []), ([(0w114,0w114,152)], []), ([(0w105,0w105,153)], []), ([(0w110,0w110,154)], []), ([(0w103,0w103,155)], []), ([(0w41,0w41,115),
(0w44,0w44,156)], []), ([(0w98,0w98,157),
(0w102,0w102,158),
(0w105,0w105,159),
(0w115,0w115,160)], []), ([(0w111,0w111,223)], []), ([(0w108,0w108,221)], []), ([(0w110,0w110,220)], []), ([(0w116,0w116,161)], []), ([(0w114,0w114,162)], []), ([(0w105,0w105,163)], []), ([(0w110,0w110,164)], []), ([(0w103,0w103,165)], []), ([(0w41,0w41,115),
(0w44,0w44,166)], []), ([(0w98,0w98,167),
(0w102,0w102,168),
(0w105,0w105,169),
(0w115,0w115,170)], []), ([(0w111,0w111,215)], []), ([(0w108,0w108,213)], []), ([(0w110,0w110,212)], []), ([(0w116,0w116,171)], []), ([(0w114,0w114,172)], []), ([(0w105,0w105,173)], []), ([(0w110,0w110,174)], []), ([(0w103,0w103,175)], []), ([(0w41,0w41,115),
(0w44,0w44,176)], []), ([(0w98,0w98,177),
(0w102,0w102,178),
(0w105,0w105,179),
(0w115,0w115,180)], []), ([(0w111,0w111,207)], []), ([(0w108,0w108,205)], []), ([(0w110,0w110,204)], []), ([(0w116,0w116,181)], []), ([(0w114,0w114,182)], []), ([(0w105,0w105,183)], []), ([(0w110,0w110,184)], []), ([(0w103,0w103,185)], []), ([(0w41,0w41,115),
(0w44,0w44,186)], []), ([(0w98,0w98,187),
(0w102,0w102,188),
(0w105,0w105,189),
(0w115,0w115,190)], []), ([(0w111,0w111,199)], []), ([(0w108,0w108,197)], []), ([(0w110,0w110,196)], []), ([(0w116,0w116,191)], []), ([(0w114,0w114,192)], []), ([(0w105,0w105,193)], []), ([(0w110,0w110,194)], []), ([(0w103,0w103,195)], []), ([(0w41,0w41,115)], []), ([(0w116,0w116,195)], []), ([(0w111,0w111,198)], []), ([(0w97,0w97,196)], []), ([(0w111,0w111,200)], []), ([(0w108,0w108,201)], []), ([(0w101,0w101,202)], []), ([(0w97,0w97,203)], []), ([(0w110,0w110,195)], []), ([(0w116,0w116,185)], []), ([(0w111,0w111,206)], []), ([(0w97,0w97,204)], []), ([(0w111,0w111,208)], []), ([(0w108,0w108,209)], []), ([(0w101,0w101,210)], []), ([(0w97,0w97,211)], []), ([(0w110,0w110,185)], []), ([(0w116,0w116,175)], []), ([(0w111,0w111,214)], []), ([(0w97,0w97,212)], []), ([(0w111,0w111,216)], []), ([(0w108,0w108,217)], []), ([(0w101,0w101,218)], []), ([(0w97,0w97,219)], []), ([(0w110,0w110,175)], []), ([(0w116,0w116,165)], []), ([(0w111,0w111,222)], []), ([(0w97,0w97,220)], []), ([(0w111,0w111,224)], []), ([(0w108,0w108,225)], []), ([(0w101,0w101,226)], []), ([(0w97,0w97,227)], []), ([(0w110,0w110,165)], []), ([(0w116,0w116,155)], []), ([(0w111,0w111,230)], []), ([(0w97,0w97,228)], []), ([(0w111,0w111,232)], []), ([(0w108,0w108,233)], []), ([(0w101,0w101,234)], []), ([(0w97,0w97,235)], []), ([(0w110,0w110,155)], []), ([(0w116,0w116,145)], []), ([(0w111,0w111,238)], []), ([(0w97,0w97,236)], []), ([(0w111,0w111,240)], []), ([(0w108,0w108,241)], []), ([(0w101,0w101,242)], []), ([(0w97,0w97,243)], []), ([(0w110,0w110,145)], []), ([(0w116,0w116,135)], []), ([(0w111,0w111,246)], []), ([(0w97,0w97,244)], []), ([(0w111,0w111,248)], []), ([(0w108,0w108,249)], []), ([(0w101,0w101,250)], []), ([(0w97,0w97,251)], []), ([(0w110,0w110,135)], []), ([(0w116,0w116,125)], []), ([(0w111,0w111,254)], []), ([(0w97,0w97,252)], []), ([(0w111,0w111,256)], []), ([(0w108,0w108,257)], []), ([(0w101,0w101,258)], []), ([(0w97,0w97,259)], []), ([(0w110,0w110,125)], []), ([(0w116,0w116,114)], []), ([(0w111,0w111,262)], []), ([(0w97,0w97,260)], []), ([(0w111,0w111,264)], []), ([(0w108,0w108,265)], []), ([(0w101,0w101,266)], []), ([(0w97,0w97,267)], []), ([(0w110,0w110,114)], []), ([(0w116,0w116,104)], []), ([(0w111,0w111,270)], []), ([(0w97,0w97,268)], []), ([(0w111,0w111,272)], []), ([(0w108,0w108,273)], []), ([(0w101,0w101,274)], []), ([(0w97,0w97,275)], []), ([(0w110,0w110,104)], []), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,277)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [30, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,288)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,286)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,281)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w113,67),
(0w115,0w122,67),
(0w114,0w114,282)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,283)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,284)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w102,67),
(0w104,0w122,67),
(0w103,0w103,285)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [6, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,287)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [17, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,289)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,290)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,291)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [16, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,293)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,294)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [1, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,296)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [24, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w108,67),
(0w110,0w122,67),
(0w109,0w109,298)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,299)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,300)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,301)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,302)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,303)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [31, 62]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w108,67),
(0w110,0w122,67),
(0w109,0w109,329)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w99,67),
(0w101,0w113,67),
(0w115,0w122,67),
(0w100,0w100,315),
(0w114,0w114,316)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w97,67),
(0w99,0w108,67),
(0w110,0w122,67),
(0w98,0w98,307),
(0w109,0w109,308)], [31]), ([(0w48,0w57,67),
(0w65,0w82,67),
(0w84,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67),
(0w83,0w83,309)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [4, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,310)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w108,67),
(0w110,0w122,67),
(0w109,0w109,311)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w111,67),
(0w113,0w122,67),
(0w112,0w112,312)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,313)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,314)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [18, 31]), ([(0w48,0w57,67),
(0w65,0w67,67),
(0w69,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67),
(0w68,0w68,320)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,317)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,318)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w102,67),
(0w104,0w122,67),
(0w103,0w103,319)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [29, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,321)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w117,67),
(0w119,0w122,67),
(0w118,0w118,322)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,323)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,324)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,325)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,326)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,327)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,328)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [11, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w111,67),
(0w113,0w122,67),
(0w112,0w112,330)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,331)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,332)], [31]), ([(0w32,0w32,333),
(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [31]), ([(0w111,0w111,334)], []), ([(0w102,0w102,335)], []), ([(0w32,0w32,336)], []), ([(0w98,0w98,337),
(0w102,0w102,338),
(0w105,0w105,339),
(0w115,0w115,340),
(0w116,0w116,341)], []), ([(0w111,0w111,353)], []), ([(0w108,0w108,351)], []), ([(0w110,0w110,350)], []), ([(0w116,0w116,346)], []), ([(0w117,0w117,342)], []), ([(0w112,0w112,343)], []), ([(0w108,0w108,344)], []), ([(0w101,0w101,345)], []), ([(0w40,0w40,95)], []), ([(0w114,0w114,347)], []), ([(0w105,0w105,348)], []), ([(0w110,0w110,349)], []), ([(0w103,0w103,115)], []), ([(0w116,0w116,115)], []), ([(0w111,0w111,352)], []), ([(0w97,0w97,350)], []), ([(0w111,0w111,354)], []), ([(0w108,0w108,355)], []), ([(0w101,0w101,356)], []), ([(0w97,0w97,357)], []), ([(0w110,0w110,115)], []), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w118,67),
(0w120,0w122,67),
(0w119,0w119,365)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w110,67),
(0w112,0w122,67),
(0w105,0w105,360),
(0w111,0w111,361)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,363)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w99,67),
(0w101,0w122,67),
(0w100,0w100,362)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [5, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,364)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [3, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [21, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w99,67),
(0w101,0w122,67),
(0w97,0w97,367),
(0w100,0w100,368)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,372)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,369)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,370)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,371)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [10, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [8, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,374)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,375)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,376)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w113,67),
(0w115,0w122,67),
(0w114,0w114,377)], [31]), ([(0w48,0w57,67),
(0w65,0w81,67),
(0w83,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67),
(0w82,0w82,378)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,379)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w102,67),
(0w104,0w122,67),
(0w103,0w103,380)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w113,67),
(0w115,0w122,67),
(0w114,0w114,381)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,382)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w114,67),
(0w116,0w122,67),
(0w115,0w115,383)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w114,67),
(0w116,0w122,67),
(0w115,0w115,384)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,385)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,386)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,387)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [19, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [23, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,319)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,391)], [31]), ([(0w48,0w57,67),
(0w65,0w69,67),
(0w71,0w72,67),
(0w74,0w82,67),
(0w84,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67),
(0w70,0w70,392),
(0w73,0w73,393),
(0w83,0w83,394)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,402)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,400)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,395)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w113,67),
(0w115,0w122,67),
(0w114,0w114,396)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,397)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,398)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w102,67),
(0w104,0w122,67),
(0w103,0w103,399)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [15, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,401)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [14, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,403)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,404)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,405)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [13, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,409)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,408)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,389)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w114,67),
(0w116,0w122,67),
(0w115,0w115,276)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w114,67),
(0w116,0w122,67),
(0w115,0w115,423)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w99,67),
(0w101,0w122,67),
(0w100,0w100,412)], [31]), ([(0w32,0w32,413),
(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [28, 31]), ([(0w118,0w118,414)], []), ([(0w97,0w97,415)], []), ([(0w114,0w114,416)], []), ([(0w105,0w105,417)], []), ([(0w97,0w97,418)], []), ([(0w98,0w98,419)], []), ([(0w108,0w108,420)], []), ([(0w101,0w101,421)], []), ([(0w115,0w115,422)], []), ([], [7]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,424)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [25, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [27, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w108,67),
(0w110,0w113,67),
(0w115,0w117,67),
(0w119,0w122,67),
(0w109,0w109,427),
(0w114,0w114,428),
(0w118,0w118,429)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w108,67),
(0w110,0w122,67),
(0w109,0w109,445)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w113,67),
(0w115,0w122,67),
(0w114,0w114,437)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,430)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w113,67),
(0w115,0w122,67),
(0w114,0w114,431)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,432)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,433)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,434)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w98,67),
(0w100,0w122,67),
(0w99,0w99,435)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,436)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [20, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,438)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,439)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,440)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w115,67),
(0w117,0w122,67),
(0w116,0w116,441)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w104,67),
(0w106,0w122,67),
(0w105,0w105,442)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,443)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,444)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [9, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,446)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,447)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w99,67),
(0w101,0w122,67),
(0w100,0w100,448)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w114,67),
(0w116,0w122,67),
(0w115,0w115,449)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w122,67)], [2, 31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w110,67),
(0w112,0w122,67),
(0w111,0w111,451)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w107,67),
(0w109,0w122,67),
(0w108,0w108,452)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w100,67),
(0w102,0w122,67),
(0w101,0w101,453)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w98,0w122,67),
(0w97,0w97,454)], [31]), ([(0w48,0w57,67),
(0w65,0w90,67),
(0w95,0w95,67),
(0w97,0w109,67),
(0w111,0w122,67),
(0w110,0w110,319)], [31]), ([], [53]), ([], [40]), ([], [54]), ([], [60]), ([(0w48,0w57,461)], []), ([(0w34,0w34,459),
(0w46,0w46,459),
(0w48,0w57,460)], [33]), ([(0w48,0w57,461),
(0w69,0w69,462),
(0w101,0w101,462)], [34]), ([(0w43,0w43,463),
(0w45,0w45,463),
(0w48,0w57,464)], []), ([(0w48,0w57,464)], []), ([(0w48,0w57,464)], [34]), ([], [43]), ([], [50]), ([(0w32,0w33,467),
(0w35,0w38,467),
(0w42,0w42,467),
(0w48,0w58,467),
(0w64,0w90,467),
(0w97,0w122,467),
(0w34,0w34,468)], []), ([(0w32,0w33,467),
(0w35,0w38,467),
(0w42,0w42,467),
(0w48,0w58,467),
(0w64,0w90,467),
(0w97,0w122,467),
(0w34,0w34,468)], [32]), ([], [57])]
    fun yystreamify' p input = ULexBuffer.mkStream (p, input)

    fun yystreamifyReader' p readFn strm = let
          val s = ref strm
	  fun iter(strm, n, accum) = 
	        if n > 1024 then (String.implode (rev accum), strm)
		else (case readFn strm
		       of NONE => (String.implode (rev accum), strm)
			| SOME(c, strm') => iter (strm', n+1, c::accum))
          fun input() = let
	        val (data, strm) = iter(!s, 0, [])
	        in
	          s := strm;
		  data
	        end
          in
            yystreamify' p input
          end

    fun yystreamifyInstream' p strm = yystreamify' p (fn ()=>TextIO.input strm)

    fun innerLex 
(yystrm_, yyss_, yysm) = let
        (* current start state *)
          val yyss = ref yyss_
	  fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
          val yystrm = ref yystrm_
	  fun yysetStrm strm = yystrm := strm
	  fun yygetPos() = ULexBuffer.getpos (!yystrm)
	  fun yystreamify input = yystreamify' (yygetPos()) input
	  fun yystreamifyReader readFn strm = yystreamifyReader' (yygetPos()) readFn strm
	  fun yystreamifyInstream strm = yystreamifyInstream' (yygetPos()) strm
        (* start position of token -- can be updated via skip() *)
	  val yystartPos = ref (yygetPos())
	(* get one char of input *)
	  fun yygetc strm = (case ULexBuffer.getu strm
                of (SOME (0w10, s')) => 
		     (AntlrStreamPos.markNewLine yysm (ULexBuffer.getpos strm);
		      SOME (0w10, s'))
		 | x => x)
          fun yygetList getc strm = let
            val get1 = UTF8.getu getc
            fun iter (strm, accum) = 
	        (case get1 strm
	          of NONE => rev accum
	           | SOME (w, strm') => iter (strm', w::accum)
	         (* end case *))
          in
            iter (strm, [])
          end
	(* create yytext *)
	  fun yymksubstr(strm) = ULexBuffer.subtract (strm, !yystrm)
	  fun yymktext(strm) = Substring.string (yymksubstr strm)
	  fun yymkunicode(strm) = yygetList Substring.getc (yymksubstr strm)
          open UserDeclarations
          fun lex () = let
            fun yystuck (yyNO_MATCH) = raise Fail "lexer reached a stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yygetPos()
	    fun yygetlineNo strm = AntlrStreamPos.lineNo yysm (ULexBuffer.getpos strm)
	    fun yygetcolNo  strm = AntlrStreamPos.colNo  yysm (ULexBuffer.getpos strm)
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    val yylastwasnref = ref (ULexBuffer.lastWasNL (!yystrm))
	    fun continue() = let val yylastwasn = !yylastwasnref in
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_variables )
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_title )
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_comands )
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_Print )
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_SUM )
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_PROD )
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_TOSTRING )
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_endvars )
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_MEAN )
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_CORR )
fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_MEDIAN )
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_STDEV )
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_VAR )
fun yyAction13 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_GETF )
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_GETI )
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_GETS )
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_TOFLOAT)
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_TOINT)
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_SUBS )
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_LINREG)
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_COV)
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;  T.KW_POW)
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;   T.VOID )
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_IF )
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_THEN )
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_ELSE )
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_WHILE )
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_DO )
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;   T.KW_END )
fun yyAction29 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.TIPO yytext 
      end
fun yyAction30 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.BOOL (valOf (Bool.fromString yytext)) 
      end
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.ID yytext 
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.STR yytext
      end
fun yyAction33 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.NUM (valOf (Int.fromString yytext)) 
      end
fun yyAction34 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.REAL (valOf (Real.fromString yytext)) 
      end
fun yyAction35 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.SINT (Grammar.toIntList (Grammar.tokenize yytext))
      end
fun yyAction36 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         T.SFLOAT (Grammar.toFloatList (Grammar.tokenize yytext))
      end
fun yyAction37 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;  T.SBOOL (Grammar.toBoolList (Grammar.tokenize yytext))
      end
fun yyAction38 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;   T.SSTRING (Grammar.tokenize yytext)
      end
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EQ )
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EEQ )
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;   T.SEMI)
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;   T.PLUS )
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;  T.CONCAT)
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;   T.MINUS )
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;   T.TIMES )
fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DIV )
fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LP )
fun yyAction48 (strm, lastMatch : yymatch) = (yystrm := strm;   T.RP )
fun yyAction49 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOT )
fun yyAction50 (strm, lastMatch : yymatch) = (yystrm := strm;   T.AND )
fun yyAction51 (strm, lastMatch : yymatch) = (yystrm := strm;   T.OR )
fun yyAction52 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NOT )
fun yyAction53 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GEQ )
fun yyAction54 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LEQ )
fun yyAction55 (strm, lastMatch : yymatch) = (yystrm := strm;   T.GT )
fun yyAction56 (strm, lastMatch : yymatch) = (yystrm := strm;   T.LT )
fun yyAction57 (strm, lastMatch : yymatch) = (yystrm := strm;   T.NEQ )
fun yyAction58 (strm, lastMatch : yymatch) = (yystrm := strm;   T.EMPTY )
fun yyAction59 (strm, lastMatch : yymatch) = (yystrm := strm;   T.COMMA )
fun yyAction60 (strm, lastMatch : yymatch) = (yystrm := strm;   T.DOTDOT )
fun yyAction61 (strm, lastMatch : yymatch) = (yystrm := strm;   continue() )
fun yyAction62 (strm, lastMatch : yymatch) = (yystrm := strm;
        T.KW_terminate )
fun yyAction63 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
         print (concat ["Unexpected character: '", yytext,
			           "'\n"]); continue()
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62, yyAction63])
in
  if ULexBuffer.eof(!(yystrm))
    then let
      val yycolno = ref(yygetcolNo(!(yystrm)))
      val yylineno = ref(yygetlineNo(!(yystrm)))
      in
        (case (!(yyss))
         of _ => (UserDeclarations.eof())
        (* end case *))
      end
    else (case (!(yyss))
       of INITIAL => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
      (* end case *))
end
end
            and skip() = (yystartPos := yygetPos(); 
			  yylastwasnref := ULexBuffer.lastWasNL (!yystrm);
			  continue())
	    in (continue(), (!yystartPos, yygetPos()), !yystrm, !yyss) end
          in 
            lex()
          end
  in
    type pos = AntlrStreamPos.pos
    type span = AntlrStreamPos.span
    type tok = UserDeclarations.lex_result

    datatype prestrm = STRM of ULexBuffer.stream * 
		(yystart_state * tok * span * prestrm * yystart_state) option ref
    type strm = (prestrm * yystart_state)

    fun lex sm 
(STRM (yystrm, memo), ss) = (case !memo
	  of NONE => let
	     val (tok, span, yystrm', ss') = innerLex 
(yystrm, ss, sm)
	     val strm' = STRM (yystrm', ref NONE);
	     in 
	       memo := SOME (ss, tok, span, strm', ss');
	       (tok, span, (strm', ss'))
	     end
	   | SOME (ss', tok, span, strm', ss'') => 
	       if ss = ss' then
		 (tok, span, (strm', ss''))
	       else (
		 memo := NONE;
		 lex sm 
(STRM (yystrm, memo), ss))
         (* end case *))

    fun streamify input = (STRM (yystreamify' 0 input, ref NONE), INITIAL)
    fun streamifyReader readFn strm = (STRM (yystreamifyReader' 0 readFn strm, ref NONE), 
				       INITIAL)
    fun streamifyInstream strm = (STRM (yystreamifyInstream' 0 strm, ref NONE), 
				  INITIAL)

    fun getPos (STRM (strm, _), _) = ULexBuffer.getpos strm

  end
end
